// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBView.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///其他玩家基本信息
  /// </summary>
  public sealed class ReqOtherBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqOtherBaseInfo> _parser = new pb::MessageParser<ReqOtherBaseInfo>(() => new ReqOtherBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOtherBaseInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "reqType" field.</summary>
    public const int ReqTypeFieldNumber = 2;
    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqType {
      get { return reqType_; }
      set {
        reqType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (ReqType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ReqType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回玩家基本信息
  /// </summary>
  public sealed class AckOtherBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckOtherBaseInfo> _parser = new pb::MessageParser<AckOtherBaseInfo>(() => new AckOtherBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckOtherBaseInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Protocol.PlayerProfile profile_;
    /// <summary>
    ///玩家基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "reqType" field.</summary>
    public const int ReqTypeFieldNumber = 2;
    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqType {
      get { return reqType_; }
      set {
        reqType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (ReqType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (ReqType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Protocol.PlayerProfile();
            }
            input.ReadMessage(profile_);
            break;
          }
          case 16: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家详细信息
  /// </summary>
  public sealed class ReqOtherDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqOtherDetailInfo> _parser = new pb::MessageParser<ReqOtherDetailInfo>(() => new ReqOtherDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOtherDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "reqType" field.</summary>
    public const int ReqTypeFieldNumber = 2;
    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqType {
      get { return reqType_; }
      set {
        reqType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (ReqType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ReqType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckOtherDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckOtherDetailInfo> _parser = new pb::MessageParser<AckOtherDetailInfo>(() => new AckOtherDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckOtherDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "reqType" field.</summary>
    public const int ReqTypeFieldNumber = 1;
    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqType {
      get { return reqType_; }
      set {
        reqType_ = value;
      }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> heros_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///武将信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> equips_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///装备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> runes_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///符文信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Runes {
      get { return runes_; }
    }

    /// <summary>Field number for the "talents" field.</summary>
    public const int TalentsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.TalentInfo> _repeated_talents_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.TalentInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TalentInfo> talents_ = new pbc::RepeatedField<global::Protocol.TalentInfo>();
    /// <summary>
    ///天赋信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TalentInfo> Talents {
      get { return talents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqType);
      }
      heros_.WriteTo(output, _repeated_heros_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      runes_.WriteTo(output, _repeated_runes_codec);
      talents_.WriteTo(output, _repeated_talents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      size += heros_.CalculateSize(_repeated_heros_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += runes_.CalculateSize(_repeated_runes_codec);
      size += talents_.CalculateSize(_repeated_talents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReqType = input.ReadInt32();
            break;
          }
          case 18: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 26: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 34: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
          case 42: {
            talents_.AddEntriesFrom(input, _repeated_talents_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
