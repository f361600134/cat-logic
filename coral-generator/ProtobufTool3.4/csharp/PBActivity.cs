// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBActivity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////活动//////////////////////
  ///活动开启列表信息
  /// </summary>
  public sealed class ActivityListInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityListInfo> _parser = new pb::MessageParser<ActivityListInfo>(() => new ActivityListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityListInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 2;
    private int lastTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (LastTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            LastTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求活动列表信息
  /// </summary>
  public sealed class ReqActivityListInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityListInfo> _parser = new pb::MessageParser<ReqActivityListInfo>(() => new ReqActivityListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityListInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回活动列表信息
  /// </summary>
  public sealed class AckActivityListInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckActivityListInfo> _parser = new pb::MessageParser<AckActivityListInfo>(() => new AckActivityListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivityListInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "listInfo" field.</summary>
    public const int ListInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ActivityListInfo> _repeated_listInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ActivityListInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ActivityListInfo> listInfo_ = new pbc::RepeatedField<global::Protocol.ActivityListInfo>();
    /// <summary>
    ///开启列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ActivityListInfo> ListInfo {
      get { return listInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      listInfo_.WriteTo(output, _repeated_listInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += listInfo_.CalculateSize(_repeated_listInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            listInfo_.AddEntriesFrom(input, _repeated_listInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求新的活动消息
  /// </summary>
  public sealed class ReqNewActivitiesMessage : pb::IMessage {
    private static readonly pb::MessageParser<ReqNewActivitiesMessage> _parser = new pb::MessageParser<ReqNewActivitiesMessage>(() => new ReqNewActivitiesMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqNewActivitiesMessage> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回新的活动消息
  /// </summary>
  public sealed class AckNewActivitiesMessage : pb::IMessage {
    private static readonly pb::MessageParser<AckNewActivitiesMessage> _parser = new pb::MessageParser<AckNewActivitiesMessage>(() => new AckNewActivitiesMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckNewActivitiesMessage> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityInfo" field.</summary>
    public const int ActivityInfoFieldNumber = 1;
    private global::Protocol.ActivityListInfo activityInfo_;
    /// <summary>
    ///开启列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ActivityListInfo ActivityInfo {
      get { return activityInfo_; }
      set {
        activityInfo_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态(0=关闭活动,1=开启活动)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (activityInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActivityInfo);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (activityInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivityInfo);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (activityInfo_ == null) {
              activityInfo_ = new global::Protocol.ActivityListInfo();
            }
            input.ReadMessage(activityInfo_);
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求活动信息
  /// </summary>
  public sealed class ReqActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityInfo> _parser = new pb::MessageParser<ReqActivityInfo>(() => new ReqActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求活动奖励
  /// </summary>
  public sealed class ReqActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityReward> _parser = new pb::MessageParser<ReqActivityReward>(() => new ReqActivityReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///奖励配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回活动奖励
  /// </summary>
  public sealed class AckActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<AckActivityReward> _parser = new pb::MessageParser<AckActivityReward>(() => new AckActivityReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivityReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码,0=成功(成功推送,领取活动的奖励页面)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///月卡信息载体
  /// </summary>
  public sealed class MonthCard : pb::IMessage {
    private static readonly pb::MessageParser<MonthCard> _parser = new pb::MessageParser<MonthCard>(() => new MonthCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthCard> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///月卡配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///月卡状态(0=未激活,1=未领取,2=已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private int amount_;
    /// <summary>
    ///月卡已充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "getDay" field.</summary>
    public const int GetDayFieldNumber = 4;
    private int getDay_;
    /// <summary>
    ///月卡已领取天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetDay {
      get { return getDay_; }
      set {
        getDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (GetDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GetDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (GetDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 32: {
            GetDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回月卡信息
  /// </summary>
  public sealed class AckMonthCardInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckMonthCardInfo> _parser = new pb::MessageParser<AckMonthCardInfo>(() => new AckMonthCardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMonthCardInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "monthInfo" field.</summary>
    public const int MonthInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.MonthCard> _repeated_monthInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.MonthCard.Parser);
    private readonly pbc::RepeatedField<global::Protocol.MonthCard> monthInfo_ = new pbc::RepeatedField<global::Protocol.MonthCard>();
    /// <summary>
    ///月卡信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.MonthCard> MonthInfo {
      get { return monthInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monthInfo_.WriteTo(output, _repeated_monthInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monthInfo_.CalculateSize(_repeated_monthInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monthInfo_.AddEntriesFrom(input, _repeated_monthInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升星活动载体
  /// </summary>
  public sealed class UpStarItem : pb::IMessage {
    private static readonly pb::MessageParser<UpStarItem> _parser = new pb::MessageParser<UpStarItem>(() => new UpStarItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpStarItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///升星信息Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回升星活动信息
  /// </summary>
  public sealed class AckUpStarInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckUpStarInfo> _parser = new pb::MessageParser<AckUpStarInfo>(() => new AckUpStarInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckUpStarInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.UpStarItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.UpStarItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.UpStarItem> itemList_ = new pbc::RepeatedField<global::Protocol.UpStarItem>();
    /// <summary>
    ///升星信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.UpStarItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private int remainTime_;
    /// <summary>
    ///倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 16: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新服限购载体
  /// </summary>
  public sealed class NewAstrictItem : pb::IMessage {
    private static readonly pb::MessageParser<NewAstrictItem> _parser = new pb::MessageParser<NewAstrictItem>(() => new NewAstrictItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAstrictItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///新服限购配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回新服限购活动信息
  /// </summary>
  public sealed class AckNewAstrictInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckNewAstrictInfo> _parser = new pb::MessageParser<AckNewAstrictInfo>(() => new AckNewAstrictInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckNewAstrictInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.NewAstrictItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.NewAstrictItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.NewAstrictItem> itemList_ = new pbc::RepeatedField<global::Protocol.NewAstrictItem>();
    /// <summary>
    ///新服限购信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.NewAstrictItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private int remainTime_;
    /// <summary>
    ///倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 16: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///配置id_状态
  /// </summary>
  public sealed class ConfigState : pb::IMessage {
    private static readonly pb::MessageParser<ConfigState> _parser = new pb::MessageParser<ConfigState>(() => new ConfigState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigState> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态(0=未激活,1=未领取,2=已领取,3=未完成)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回成长基金信息
  /// </summary>
  public sealed class AckGrowUpFundInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGrowUpFundInfo> _parser = new pb::MessageParser<AckGrowUpFundInfo>(() => new AckGrowUpFundInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGrowUpFundInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBuy" field.</summary>
    public const int IsBuyFieldNumber = 1;
    private int isBuy_;
    /// <summary>
    ///是否激活(0=未激活,1=已激活)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsBuy {
      get { return isBuy_; }
      set {
        isBuy_ = value;
      }
    }

    /// <summary>Field number for the "fundInfo" field.</summary>
    public const int FundInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ConfigState> _repeated_fundInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ConfigState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ConfigState> fundInfo_ = new pbc::RepeatedField<global::Protocol.ConfigState>();
    /// <summary>
    ///成长基金列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ConfigState> FundInfo {
      get { return fundInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBuy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsBuy);
      }
      fundInfo_.WriteTo(output, _repeated_fundInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBuy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBuy);
      }
      size += fundInfo_.CalculateSize(_repeated_fundInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBuy = input.ReadInt32();
            break;
          }
          case 18: {
            fundInfo_.AddEntriesFrom(input, _repeated_fundInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///人王降临活动载体
  /// </summary>
  public sealed class KingArriveItem : pb::IMessage {
    private static readonly pb::MessageParser<KingArriveItem> _parser = new pb::MessageParser<KingArriveItem>(() => new KingArriveItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KingArriveItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///人王降临配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回人王降临活动信息
  /// </summary>
  public sealed class AckKingArriveInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckKingArriveInfo> _parser = new pb::MessageParser<AckKingArriveInfo>(() => new AckKingArriveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckKingArriveInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.KingArriveItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.KingArriveItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.KingArriveItem> itemList_ = new pbc::RepeatedField<global::Protocol.KingArriveItem>();
    /// <summary>
    ///人王降临信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.KingArriveItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private int remainTime_;
    /// <summary>
    ///倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 16: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回每日首充信息
  /// </summary>
  public sealed class AckEverydayRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckEverydayRechargeInfo> _parser = new pb::MessageParser<AckEverydayRechargeInfo>(() => new AckEverydayRechargeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEverydayRechargeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "needRechargeAmount" field.</summary>
    public const int NeedRechargeAmountFieldNumber = 1;
    private int needRechargeAmount_;
    /// <summary>
    ///需要充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedRechargeAmount {
      get { return needRechargeAmount_; }
      set {
        needRechargeAmount_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态(0=未激活,1=未领取,2=已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NeedRechargeAmount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NeedRechargeAmount);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NeedRechargeAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedRechargeAmount);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NeedRechargeAmount = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///超值首充信息
  /// </summary>
  public sealed class FirstRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<FirstRechargeInfo> _parser = new pb::MessageParser<FirstRechargeInfo>(() => new FirstRechargeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FirstRechargeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///状态(0=未激活,1=未领取,2=已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 2;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "configState" field.</summary>
    public const int ConfigStateFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.ConfigState> _repeated_configState_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.ConfigState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ConfigState> configState_ = new pbc::RepeatedField<global::Protocol.ConfigState>();
    /// <summary>
    ///领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ConfigState> ConfigState {
      get { return configState_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReportId);
      }
      configState_.WriteTo(output, _repeated_configState_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      size += configState_.CalculateSize(_repeated_configState_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            ReportId = input.ReadInt64();
            break;
          }
          case 26: {
            configState_.AddEntriesFrom(input, _repeated_configState_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回超值首充信息
  /// </summary>
  public sealed class AckFirstRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckFirstRechargeInfo> _parser = new pb::MessageParser<AckFirstRechargeInfo>(() => new AckFirstRechargeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckFirstRechargeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "rechargeAmount" field.</summary>
    public const int RechargeAmountFieldNumber = 1;
    private int rechargeAmount_;
    /// <summary>
    ///已充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeAmount {
      get { return rechargeAmount_; }
      set {
        rechargeAmount_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.FirstRechargeInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.FirstRechargeInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FirstRechargeInfo> info_ = new pbc::RepeatedField<global::Protocol.FirstRechargeInfo>();
    /// <summary>
    ///超值首充信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FirstRechargeInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeAmount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeAmount);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeAmount);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeAmount = input.ReadInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回0.1元礼包信息
  /// </summary>
  public sealed class AckPointOneInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckPointOneInfo> _parser = new pb::MessageParser<AckPointOneInfo>(() => new AckPointOneInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPointOneInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 1;
    private int lastTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态(0=未激活,1=激活)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.ConfigState> _repeated_states_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.ConfigState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ConfigState> states_ = new pbc::RepeatedField<global::Protocol.ConfigState>();
    /// <summary>
    ///任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ConfigState> States {
      get { return states_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastTime);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      states_.WriteTo(output, _repeated_states_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += states_.CalculateSize(_repeated_states_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastTime = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回超值基金信息
  /// </summary>
  public sealed class AckSuperValueFundInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSuperValueFundInfo> _parser = new pb::MessageParser<AckSuperValueFundInfo>(() => new AckSuperValueFundInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSuperValueFundInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private int phase_;
    /// <summary>
    ///期数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "getDay" field.</summary>
    public const int GetDayFieldNumber = 2;
    private int getDay_;
    /// <summary>
    ///已经领取的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetDay {
      get { return getDay_; }
      set {
        getDay_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///状态(0=未激活,1=未领取,2=已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Phase);
      }
      if (GetDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetDay);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (GetDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetDay);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Phase = input.ReadInt32();
            break;
          }
          case 16: {
            GetDay = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回豪华基金信息
  /// </summary>
  public sealed class AckLuxuryFundInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckLuxuryFundInfo> _parser = new pb::MessageParser<AckLuxuryFundInfo>(() => new AckLuxuryFundInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLuxuryFundInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private int phase_;
    /// <summary>
    ///期数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "getDay" field.</summary>
    public const int GetDayFieldNumber = 2;
    private int getDay_;
    /// <summary>
    ///已经领取的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetDay {
      get { return getDay_; }
      set {
        getDay_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///状态(0=未激活,1=未领取,2=已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Phase);
      }
      if (GetDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetDay);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (GetDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetDay);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Phase = input.ReadInt32();
            break;
          }
          case 16: {
            GetDay = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回超值礼包信息
  /// </summary>
  public sealed class AckSuperValueGiftInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSuperValueGiftInfo> _parser = new pb::MessageParser<AckSuperValueGiftInfo>(() => new AckSuperValueGiftInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSuperValueGiftInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 2;
    private int lastTime_;
    /// <summary>
    ///剩余购买时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (LastTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            LastTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////活动-八天好礼//////////////////////
  ///请求八天好礼活动信息
  /// </summary>
  public sealed class ReqActivityEightDayInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityEightDayInfo> _parser = new pb::MessageParser<ReqActivityEightDayInfo>(() => new ReqActivityEightDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityEightDayInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回八天好礼活动信息
  /// </summary>
  public sealed class AckActivityEightDayInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckActivityEightDayInfo> _parser = new pb::MessageParser<AckActivityEightDayInfo>(() => new AckActivityEightDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivityEightDayInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "loginDays" field.</summary>
    public const int LoginDaysFieldNumber = 1;
    private int loginDays_;
    /// <summary>
    ///登陆天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDays {
      get { return loginDays_; }
      set {
        loginDays_ = value;
      }
    }

    /// <summary>Field number for the "rewardStates" field.</summary>
    public const int RewardStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PBRewardStateInfo> _repeated_rewardStates_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PBRewardStateInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBRewardStateInfo> rewardStates_ = new pbc::RepeatedField<global::Protocol.PBRewardStateInfo>();
    /// <summary>
    ///奖励信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBRewardStateInfo> RewardStates {
      get { return rewardStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginDays != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LoginDays);
      }
      rewardStates_.WriteTo(output, _repeated_rewardStates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDays);
      }
      size += rewardStates_.CalculateSize(_repeated_rewardStates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LoginDays = input.ReadInt32();
            break;
          }
          case 18: {
            rewardStates_.AddEntriesFrom(input, _repeated_rewardStates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求八天好礼奖励
  /// </summary>
  public sealed class ReqActivityEightDayReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityEightDayReward> _parser = new pb::MessageParser<ReqActivityEightDayReward>(() => new ReqActivityEightDayReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityEightDayReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求八天好礼奖励
  /// </summary>
  public sealed class AckActivityEightDayReward : pb::IMessage {
    private static readonly pb::MessageParser<AckActivityEightDayReward> _parser = new pb::MessageParser<AckActivityEightDayReward>(() => new AckActivityEightDayReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivityEightDayReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////活动-七日目标///////////////////////////
  ///七日目标任务结构
  /// </summary>
  public sealed class PBActivitySevenDayMission : pb::IMessage {
    private static readonly pb::MessageParser<PBActivitySevenDayMission> _parser = new pb::MessageParser<PBActivitySevenDayMission>(() => new PBActivitySevenDayMission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBActivitySevenDayMission> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///任务配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///任务状态  0:未达成,2:已达成,2:已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///七日目标结构体
  /// </summary>
  public sealed class PBActivitySevenDayTarget : pb::IMessage {
    private static readonly pb::MessageParser<PBActivitySevenDayTarget> _parser = new pb::MessageParser<PBActivitySevenDayTarget>(() => new PBActivitySevenDayTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBActivitySevenDayTarget> Parser { get { return _parser; } }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    /// <summary>
    ///天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "mission" field.</summary>
    public const int MissionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PBActivitySevenDayMission> _repeated_mission_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PBActivitySevenDayMission.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBActivitySevenDayMission> mission_ = new pbc::RepeatedField<global::Protocol.PBActivitySevenDayMission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBActivitySevenDayMission> Mission {
      get { return mission_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      mission_.WriteTo(output, _repeated_mission_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      size += mission_.CalculateSize(_repeated_mission_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 18: {
            mission_.AddEntriesFrom(input, _repeated_mission_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求七天好礼活动信息
  /// </summary>
  public sealed class ReqActivitySevenDayInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivitySevenDayInfo> _parser = new pb::MessageParser<ReqActivitySevenDayInfo>(() => new ReqActivitySevenDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivitySevenDayInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    /// <summary>
    ///天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回七天好礼活动信息
  /// </summary>
  public sealed class AckActivitySevenDayInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckActivitySevenDayInfo> _parser = new pb::MessageParser<AckActivitySevenDayInfo>(() => new AckActivitySevenDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivitySevenDayInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 1;
    private int remainTime_;
    /// <summary>
    ///活动剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PBActivitySevenDayTarget> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PBActivitySevenDayTarget.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBActivitySevenDayTarget> targets_ = new pbc::RepeatedField<global::Protocol.PBActivitySevenDayTarget>();
    /// <summary>
    ///七日目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBActivitySevenDayTarget> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemainTime);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求七天好礼奖励
  /// </summary>
  public sealed class ReqActivitySevenDayReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivitySevenDayReward> _parser = new pb::MessageParser<ReqActivitySevenDayReward>(() => new ReqActivitySevenDayReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivitySevenDayReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求七天好礼奖励
  /// </summary>
  public sealed class AckActivitySevenDayReward : pb::IMessage {
    private static readonly pb::MessageParser<AckActivitySevenDayReward> _parser = new pb::MessageParser<AckActivitySevenDayReward>(() => new AckActivitySevenDayReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivitySevenDayReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回七日宝箱信息
  /// </summary>
  public sealed class AckActivitySevenDayBoxInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckActivitySevenDayBoxInfo> _parser = new pb::MessageParser<AckActivitySevenDayBoxInfo>(() => new AckActivitySevenDayBoxInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivitySevenDayBoxInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "finishCount" field.</summary>
    public const int FinishCountFieldNumber = 1;
    private int finishCount_;
    /// <summary>
    ///完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PBRewardStateInfo> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PBRewardStateInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBRewardStateInfo> targets_ = new pbc::RepeatedField<global::Protocol.PBRewardStateInfo>();
    /// <summary>
    ///七日活跃宝箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBRewardStateInfo> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FinishCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FinishCount);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishCount);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FinishCount = input.ReadInt32();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取七日宝箱
  /// </summary>
  public sealed class ReqActivitySevenDayBoxReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivitySevenDayBoxReward> _parser = new pb::MessageParser<ReqActivitySevenDayBoxReward>(() => new ReqActivitySevenDayBoxReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivitySevenDayBoxReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxConfigId" field.</summary>
    public const int BoxConfigIdFieldNumber = 1;
    private int boxConfigId_;
    /// <summary>
    ///宝箱配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxConfigId {
      get { return boxConfigId_; }
      set {
        boxConfigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取七日宝箱
  /// </summary>
  public sealed class AckActivitySevenDayBoxReward : pb::IMessage {
    private static readonly pb::MessageParser<AckActivitySevenDayBoxReward> _parser = new pb::MessageParser<AckActivitySevenDayBoxReward>(() => new AckActivitySevenDayBoxReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckActivitySevenDayBoxReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///领取宝箱错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
