// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBPlaneBattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////位面征战//////////////////////
  ///位面征战位置信息
  /// </summary>
  public sealed class PlaneInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlaneInfo> _parser = new pb::MessageParser<PlaneInfo>(() => new PlaneInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaneInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///事件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    ///战斗力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///0未开启,1已开启,2可预览,3已失效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能数量列表
  /// </summary>
  public sealed class PlaneSkillList : pb::IMessage {
    private static readonly pb::MessageParser<PlaneSkillList> _parser = new pb::MessageParser<PlaneSkillList>(() => new PlaneSkillList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaneSkillList> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///英雄血量状态
  /// </summary>
  public sealed class HeroBloodInfo : pb::IMessage {
    private static readonly pb::MessageParser<HeroBloodInfo> _parser = new pb::MessageParser<HeroBloodInfo>(() => new HeroBloodInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroBloodInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 2;
    private long blood_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 3;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Blood != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BloodLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            Blood = input.ReadInt64();
            break;
          }
          case 24: {
            BloodLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商店物品明细
  /// </summary>
  public sealed class PlaneShopInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlaneShopInfo> _parser = new pb::MessageParser<PlaneShopInfo>(() => new PlaneShopInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaneShopInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///商城道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态(0=未购买,1=购买)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求位面征战页面
  /// </summary>
  public sealed class ReqPlanePageInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlanePageInfo> _parser = new pb::MessageParser<ReqPlanePageInfo>(() => new ReqPlanePageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlanePageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回位面远征页面
  /// </summary>
  public sealed class AckPlanePageInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckPlanePageInfo> _parser = new pb::MessageParser<AckPlanePageInfo>(() => new AckPlanePageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlanePageInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 1;
    private int lastTime_;
    /// <summary>
    ///剩余重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///当前所在位置的配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "rewardInfo" field.</summary>
    public const int RewardInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewardInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewardInfo_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///获得奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> RewardInfo {
      get { return rewardInfo_; }
    }

    /// <summary>Field number for the "planeInfo" field.</summary>
    public const int PlaneInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.PlaneInfo> _repeated_planeInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.PlaneInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PlaneInfo> planeInfo_ = new pbc::RepeatedField<global::Protocol.PlaneInfo>();
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PlaneInfo> PlaneInfo {
      get { return planeInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastTime);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      rewardInfo_.WriteTo(output, _repeated_rewardInfo_codec);
      planeInfo_.WriteTo(output, _repeated_planeInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      size += rewardInfo_.CalculateSize(_repeated_rewardInfo_codec);
      size += planeInfo_.CalculateSize(_repeated_planeInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastTime = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            rewardInfo_.AddEntriesFrom(input, _repeated_rewardInfo_codec);
            break;
          }
          case 34: {
            planeInfo_.AddEntriesFrom(input, _repeated_planeInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求位面征战事件页面
  /// </summary>
  public sealed class ReqPlaneEventPage : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlaneEventPage> _parser = new pb::MessageParser<ReqPlaneEventPage>(() => new ReqPlaneEventPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlaneEventPage> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求位面征战对阵阵型
  /// </summary>
  public sealed class AckPlaneBattleFormation : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneBattleFormation> _parser = new pb::MessageParser<AckPlaneBattleFormation>(() => new AckPlaneBattleFormation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneBattleFormation> Parser { get { return _parser; } }

    /// <summary>Field number for the "atkPlayer" field.</summary>
    public const int AtkPlayerFieldNumber = 1;
    private global::Protocol.PlayerProfile atkPlayer_;
    /// <summary>
    ///攻击方信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerProfile AtkPlayer {
      get { return atkPlayer_; }
      set {
        atkPlayer_ = value;
      }
    }

    /// <summary>Field number for the "defPlayer" field.</summary>
    public const int DefPlayerFieldNumber = 2;
    private global::Protocol.PlayerProfile defPlayer_;
    /// <summary>
    ///防守方信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerProfile DefPlayer {
      get { return defPlayer_; }
      set {
        defPlayer_ = value;
      }
    }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.PlaneSkillList> _repeated_skillList_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.PlaneSkillList.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PlaneSkillList> skillList_ = new pbc::RepeatedField<global::Protocol.PlaneSkillList>();
    /// <summary>
    ///技能数量列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PlaneSkillList> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "atkFormation" field.</summary>
    public const int AtkFormationFieldNumber = 4;
    private global::Protocol.FormationTeams atkFormation_;
    /// <summary>
    ///攻击方阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FormationTeams AtkFormation {
      get { return atkFormation_; }
      set {
        atkFormation_ = value;
      }
    }

    /// <summary>Field number for the "defFormation" field.</summary>
    public const int DefFormationFieldNumber = 5;
    private global::Protocol.FormationTeams defFormation_;
    /// <summary>
    ///防守方阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FormationTeams DefFormation {
      get { return defFormation_; }
      set {
        defFormation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (atkPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AtkPlayer);
      }
      if (defPlayer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DefPlayer);
      }
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (atkFormation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AtkFormation);
      }
      if (defFormation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DefFormation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (atkPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AtkPlayer);
      }
      if (defPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefPlayer);
      }
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (atkFormation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AtkFormation);
      }
      if (defFormation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefFormation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (atkPlayer_ == null) {
              atkPlayer_ = new global::Protocol.PlayerProfile();
            }
            input.ReadMessage(atkPlayer_);
            break;
          }
          case 18: {
            if (defPlayer_ == null) {
              defPlayer_ = new global::Protocol.PlayerProfile();
            }
            input.ReadMessage(defPlayer_);
            break;
          }
          case 26: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 34: {
            if (atkFormation_ == null) {
              atkFormation_ = new global::Protocol.FormationTeams();
            }
            input.ReadMessage(atkFormation_);
            break;
          }
          case 42: {
            if (defFormation_ == null) {
              defFormation_ = new global::Protocol.FormationTeams();
            }
            input.ReadMessage(defFormation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回支援英雄列表
  /// </summary>
  public sealed class AckPlaneSupportHreoList : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneSupportHreoList> _parser = new pb::MessageParser<AckPlaneSupportHreoList>(() => new AckPlaneSupportHreoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneSupportHreoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Hero.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Hero> heroes_ = new pbc::RepeatedField<global::Protocol.Hero>();
    /// <summary>
    ///返回英雄信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回选着buff列表
  /// </summary>
  public sealed class AckPlaneChoiceBuffList : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneChoiceBuffList> _parser = new pb::MessageParser<AckPlaneChoiceBuffList>(() => new AckPlaneChoiceBuffList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneChoiceBuffList> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_buffId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> buffId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///可选择的buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuffId {
      get { return buffId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buffId_.WriteTo(output, _repeated_buffId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buffId_.CalculateSize(_repeated_buffId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            buffId_.AddEntriesFrom(input, _repeated_buffId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回位面征战商店列表
  /// </summary>
  public sealed class AckPlaneShopList : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneShopList> _parser = new pb::MessageParser<AckPlaneShopList>(() => new AckPlaneShopList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneShopList> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.PlaneShopInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.PlaneShopInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PlaneShopInfo> info_ = new pbc::RepeatedField<global::Protocol.PlaneShopInfo>();
    /// <summary>
    ///商城道具明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PlaneShopInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "canBuy" field.</summary>
    public const int CanBuyFieldNumber = 2;
    private int canBuy_;
    /// <summary>
    ///0=不可以购买，1=可以购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanBuy {
      get { return canBuy_; }
      set {
        canBuy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (CanBuy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanBuy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (CanBuy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanBuy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            CanBuy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求处理位面征战事件
  /// </summary>
  public sealed class ReqPlaneEvent : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlaneEvent> _parser = new pb::MessageParser<ReqPlaneEvent>(() => new ReqPlaneEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlaneEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    /// <summary>
    ///英雄id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    /// <summary>
    ///选择技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回处理位面征战事件
  /// </summary>
  public sealed class AckPlaneEvent : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneEvent> _parser = new pb::MessageParser<AckPlaneEvent>(() => new AckPlaneEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///当前位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "planeInfo" field.</summary>
    public const int PlaneInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.PlaneInfo> _repeated_planeInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.PlaneInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PlaneInfo> planeInfo_ = new pbc::RepeatedField<global::Protocol.PlaneInfo>();
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PlaneInfo> PlaneInfo {
      get { return planeInfo_; }
    }

    /// <summary>Field number for the "rewardInfo" field.</summary>
    public const int RewardInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewardInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewardInfo_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///获得奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> RewardInfo {
      get { return rewardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      planeInfo_.WriteTo(output, _repeated_planeInfo_codec);
      rewardInfo_.WriteTo(output, _repeated_rewardInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      size += planeInfo_.CalculateSize(_repeated_planeInfo_codec);
      size += rewardInfo_.CalculateSize(_repeated_rewardInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            planeInfo_.AddEntriesFrom(input, _repeated_planeInfo_codec);
            break;
          }
          case 34: {
            rewardInfo_.AddEntriesFrom(input, _repeated_rewardInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求使用永恒晶石
  /// </summary>
  public sealed class ReqPlaneProp : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlaneProp> _parser = new pb::MessageParser<ReqPlaneProp>(() => new ReqPlaneProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlaneProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回使用永恒晶石
  /// </summary>
  public sealed class AckPlaneProp : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneProp> _parser = new pb::MessageParser<AckPlaneProp>(() => new AckPlaneProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneProp> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求遗物列表
  /// </summary>
  public sealed class ReqPlaneBuff : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlaneBuff> _parser = new pb::MessageParser<ReqPlaneBuff>(() => new ReqPlaneBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlaneBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回遗物列表
  /// </summary>
  public sealed class AckPlaneBuff : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneBuff> _parser = new pb::MessageParser<AckPlaneBuff>(() => new AckPlaneBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_buffList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> buffList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///buff列表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuffList {
      get { return buffList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buffList_.WriteTo(output, _repeated_buffList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回英雄血量列表
  /// </summary>
  public sealed class AckHeroBloodList : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroBloodList> _parser = new pb::MessageParser<AckHeroBloodList>(() => new AckHeroBloodList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroBloodList> Parser { get { return _parser; } }

    /// <summary>Field number for the "bloodList" field.</summary>
    public const int BloodListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.HeroBloodInfo> _repeated_bloodList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.HeroBloodInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroBloodInfo> bloodList_ = new pbc::RepeatedField<global::Protocol.HeroBloodInfo>();
    /// <summary>
    ///英雄血量列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroBloodInfo> BloodList {
      get { return bloodList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bloodList_.WriteTo(output, _repeated_bloodList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bloodList_.CalculateSize(_repeated_bloodList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bloodList_.AddEntriesFrom(input, _repeated_bloodList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AckPlaneSupportQueue : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneSupportQueue> _parser = new pb::MessageParser<AckPlaneSupportQueue>(() => new AckPlaneSupportQueue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneSupportQueue> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Hero.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Hero> heroes_ = new pbc::RepeatedField<global::Protocol.Hero>();
    /// <summary>
    ///支援的武将
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求操作商店
  /// </summary>
  public sealed class ReqOperateShop : pb::IMessage {
    private static readonly pb::MessageParser<ReqOperateShop> _parser = new pb::MessageParser<ReqOperateShop>(() => new ReqOperateShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOperateShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 2;
    private int operate_;
    /// <summary>
    ///操作：1=进入，2=放弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Operate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Operate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回操作商店
  /// </summary>
  public sealed class AckOperateShop : pb::IMessage {
    private static readonly pb::MessageParser<AckOperateShop> _parser = new pb::MessageParser<AckOperateShop>(() => new AckOperateShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckOperateShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求位面商人购买
  /// </summary>
  public sealed class ReqPlaneShopBuy : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlaneShopBuy> _parser = new pb::MessageParser<ReqPlaneShopBuy>(() => new ReqPlaneShopBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlaneShopBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///位置配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "shopConfigId" field.</summary>
    public const int ShopConfigIdFieldNumber = 2;
    private int shopConfigId_;
    /// <summary>
    ///商城道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopConfigId {
      get { return shopConfigId_; }
      set {
        shopConfigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (ShopConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShopConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (ShopConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            ShopConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回位面商人购买
  /// </summary>
  public sealed class AckPlaneShopBuy : pb::IMessage {
    private static readonly pb::MessageParser<AckPlaneShopBuy> _parser = new pb::MessageParser<AckPlaneShopBuy>(() => new AckPlaneShopBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlaneShopBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求传送门
  /// </summary>
  public sealed class ReqPlanePortal : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlanePortal> _parser = new pb::MessageParser<ReqPlanePortal>(() => new ReqPlanePortal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlanePortal> Parser { get { return _parser; } }

    /// <summary>Field number for the "curConfigId" field.</summary>
    public const int CurConfigIdFieldNumber = 1;
    private int curConfigId_;
    /// <summary>
    ///当前传送门配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurConfigId {
      get { return curConfigId_; }
      set {
        curConfigId_ = value;
      }
    }

    /// <summary>Field number for the "nextConfigId" field.</summary>
    public const int NextConfigIdFieldNumber = 2;
    private int nextConfigId_;
    /// <summary>
    ///下一层关卡配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextConfigId {
      get { return nextConfigId_; }
      set {
        nextConfigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurConfigId);
      }
      if (NextConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurConfigId);
      }
      if (NextConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            NextConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回传送门
  /// </summary>
  public sealed class AckPlanePortal : pb::IMessage {
    private static readonly pb::MessageParser<AckPlanePortal> _parser = new pb::MessageParser<AckPlanePortal>(() => new AckPlanePortal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlanePortal> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
