// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBPracticeTower.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////试练塔//////////////////////
  ///试练塔排行信息
  /// </summary>
  public sealed class TowerRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<TowerRankInfo> _parser = new pb::MessageParser<TowerRankInfo>(() => new TowerRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "skinId" field.</summary>
    public const int SkinIdFieldNumber = 4;
    private int skinId_;
    /// <summary>
    ///头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 5;
    private int headFrame_;
    /// <summary>
    ///头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    /// <summary>Field number for the "floorNum" field.</summary>
    public const int FloorNumFieldNumber = 6;
    private int floorNum_;
    /// <summary>
    ///层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloorNum {
      get { return floorNum_; }
      set {
        floorNum_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private int time_;
    /// <summary>
    ///通关时间Head frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (SkinId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkinId);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HeadFrame);
      }
      if (FloorNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FloorNum);
      }
      if (Time != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadFrame);
      }
      if (FloorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorNum);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            SkinId = input.ReadInt32();
            break;
          }
          case 40: {
            HeadFrame = input.ReadInt32();
            break;
          }
          case 48: {
            FloorNum = input.ReadInt32();
            break;
          }
          case 56: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求试练塔页面
  /// </summary>
  public sealed class ReqTowerInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqTowerInfo> _parser = new pb::MessageParser<ReqTowerInfo>(() => new ReqTowerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTowerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回试练塔页面
  /// </summary>
  public sealed class AckTowerInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckTowerInfo> _parser = new pb::MessageParser<AckTowerInfo>(() => new AckTowerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTowerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "floorNum" field.</summary>
    public const int FloorNumFieldNumber = 1;
    private int floorNum_;
    /// <summary>
    ///层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloorNum {
      get { return floorNum_; }
      set {
        floorNum_ = value;
      }
    }

    /// <summary>Field number for the "lastFreeTime" field.</summary>
    public const int LastFreeTimeFieldNumber = 2;
    private int lastFreeTime_;
    /// <summary>
    ///剩余免费挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastFreeTime {
      get { return lastFreeTime_; }
      set {
        lastFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBuyTime" field.</summary>
    public const int LastBuyTimeFieldNumber = 3;
    private int lastBuyTime_;
    /// <summary>
    ///剩余购买挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBuyTime {
      get { return lastBuyTime_; }
      set {
        lastBuyTime_ = value;
      }
    }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.TowerRankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TowerRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TowerRankInfo> rankInfo_ = new pbc::RepeatedField<global::Protocol.TowerRankInfo>();
    /// <summary>
    ///排行信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TowerRankInfo> RankInfo {
      get { return rankInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FloorNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FloorNum);
      }
      if (LastFreeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastFreeTime);
      }
      if (LastBuyTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastBuyTime);
      }
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FloorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorNum);
      }
      if (LastFreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastFreeTime);
      }
      if (LastBuyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBuyTime);
      }
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FloorNum = input.ReadInt32();
            break;
          }
          case 16: {
            LastFreeTime = input.ReadInt32();
            break;
          }
          case 24: {
            LastBuyTime = input.ReadInt32();
            break;
          }
          case 34: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求层数信息
  /// </summary>
  public sealed class ReqFloorInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqFloorInfo> _parser = new pb::MessageParser<ReqFloorInfo>(() => new ReqFloorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqFloorInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///层数配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回层数信息
  /// </summary>
  public sealed class AckFloorInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckFloorInfo> _parser = new pb::MessageParser<AckFloorInfo>(() => new AckFloorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckFloorInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "fastPass" field.</summary>
    public const int FastPassFieldNumber = 1;
    private string fastPass_ = "";
    /// <summary>
    ///最快通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FastPass {
      get { return fastPass_; }
      set {
        fastPass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mixPowerPass" field.</summary>
    public const int MixPowerPassFieldNumber = 2;
    private string mixPowerPass_ = "";
    /// <summary>
    ///最低战力通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MixPowerPass {
      get { return mixPowerPass_; }
      set {
        mixPowerPass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FastPass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FastPass);
      }
      if (MixPowerPass.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MixPowerPass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FastPass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FastPass);
      }
      if (MixPowerPass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MixPowerPass);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FastPass = input.ReadString();
            break;
          }
          case 18: {
            MixPowerPass = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取通关奖励
  /// </summary>
  public sealed class ReqGetReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetReward> _parser = new pb::MessageParser<ReqGetReward>(() => new ReqGetReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///层数配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取通关奖励
  /// </summary>
  public sealed class AckGetReward : pb::IMessage {
    private static readonly pb::MessageParser<AckGetReward> _parser = new pb::MessageParser<AckGetReward>(() => new AckGetReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
