// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: formation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  /// 阵法队伍
  /// </summary>
  public sealed class FormationTeams : pb::IMessage {
    private static readonly pb::MessageParser<FormationTeams> _parser = new pb::MessageParser<FormationTeams>(() => new FormationTeams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormationTeams> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.FormationTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.FormationTeam.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FormationTeam> teams_ = new pbc::RepeatedField<global::Protocol.FormationTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FormationTeam> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵法
  /// </summary>
  public sealed class FormationTeam : pb::IMessage {
    private static readonly pb::MessageParser<FormationTeam> _parser = new pb::MessageParser<FormationTeam>(() => new FormationTeam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormationTeam> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "artifactId" field.</summary>
    public const int ArtifactIdFieldNumber = 3;
    private uint artifactId_;
    /// <summary>
    /// 神器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArtifactId {
      get { return artifactId_; }
      set {
        artifactId_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.FormationTeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.FormationTeamMember.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FormationTeamMember> members_ = new pbc::RepeatedField<global::Protocol.FormationTeamMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FormationTeamMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConfigId);
      }
      if (ArtifactId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArtifactId);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (ArtifactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArtifactId);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 24: {
            ArtifactId = input.ReadUInt32();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class FormationTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<FormationTeamMember> _parser = new pb::MessageParser<FormationTeamMember>(() => new FormationTeamMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormationTeamMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (HeroId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (HeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有的阵法
  /// </summary>
  public sealed class FormationTeamsResp : pb::IMessage {
    private static readonly pb::MessageParser<FormationTeamsResp> _parser = new pb::MessageParser<FormationTeamsResp>(() => new FormationTeamsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormationTeamsResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.FormationTeams> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.FormationTeams.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FormationTeams> teams_ = new pbc::RepeatedField<global::Protocol.FormationTeams>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FormationTeams> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 增加阵法
  /// </summary>
  public sealed class AddFormationTeamsResp : pb::IMessage {
    private static readonly pb::MessageParser<AddFormationTeamsResp> _parser = new pb::MessageParser<AddFormationTeamsResp>(() => new AddFormationTeamsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddFormationTeamsResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.FormationTeams> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.FormationTeams.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FormationTeams> teams_ = new pbc::RepeatedField<global::Protocol.FormationTeams>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FormationTeams> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改阵法
  /// </summary>
  public sealed class ChangeFormationTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<ChangeFormationTeamReq> _parser = new pb::MessageParser<ChangeFormationTeamReq>(() => new ChangeFormationTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeFormationTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "artifactId" field.</summary>
    public const int ArtifactIdFieldNumber = 4;
    private uint artifactId_;
    /// <summary>
    /// 神器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArtifactId {
      get { return artifactId_; }
      set {
        artifactId_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.FormationTeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.FormationTeamMember.Parser);
    private readonly pbc::RepeatedField<global::Protocol.FormationTeamMember> members_ = new pbc::RepeatedField<global::Protocol.FormationTeamMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.FormationTeamMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "changeType" field.</summary>
    public const int ChangeTypeFieldNumber = 6;
    private uint changeType_;
    /// <summary>
    ///1:防守布阵；2：挑战布阵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      if (ArtifactId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ArtifactId);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (ChangeType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChangeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (ArtifactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArtifactId);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            ArtifactId = input.ReadUInt32();
            break;
          }
          case 42: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 48: {
            ChangeType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ChangeFormationTeamResp : pb::IMessage {
    private static readonly pb::MessageParser<ChangeFormationTeamResp> _parser = new pb::MessageParser<ChangeFormationTeamResp>(() => new ChangeFormationTeamResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeFormationTeamResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private global::Protocol.FormationTeam team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FormationTeam Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "changeType" field.</summary>
    public const int ChangeTypeFieldNumber = 3;
    private uint changeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (team_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Team);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChangeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (team_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            if (team_ == null) {
              team_ = new global::Protocol.FormationTeam();
            }
            input.ReadMessage(team_);
            break;
          }
          case 24: {
            ChangeType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
