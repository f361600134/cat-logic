// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBArena.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////竞技场//////////////////////
  ///玩家列表
  /// </summary>
  public sealed class ArenaInfo : pb::IMessage {
    private static readonly pb::MessageParser<ArenaInfo> _parser = new pb::MessageParser<ArenaInfo>(() => new ArenaInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "headImageId" field.</summary>
    public const int HeadImageIdFieldNumber = 3;
    private int headImageId_;
    /// <summary>
    ///头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadImageId {
      get { return headImageId_; }
      set {
        headImageId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 5;
    private int integral_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "fc" field.</summary>
    public const int FcFieldNumber = 6;
    private int fc_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fc {
      get { return fc_; }
      set {
        fc_ = value;
      }
    }

    /// <summary>Field number for the "likeTimes" field.</summary>
    public const int LikeTimesFieldNumber = 7;
    private int likeTimes_;
    /// <summary>
    ///被膜拜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeTimes {
      get { return likeTimes_; }
      set {
        likeTimes_ = value;
      }
    }

    /// <summary>Field number for the "isSameGuild" field.</summary>
    public const int IsSameGuildFieldNumber = 8;
    private int isSameGuild_;
    /// <summary>
    ///是否是同一工会(0=不是,1=是)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSameGuild {
      get { return isSameGuild_; }
      set {
        isSameGuild_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (HeadImageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeadImageId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Integral != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Integral);
      }
      if (Fc != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Fc);
      }
      if (LikeTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LikeTimes);
      }
      if (IsSameGuild != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsSameGuild);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HeadImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImageId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      if (Fc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fc);
      }
      if (LikeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LikeTimes);
      }
      if (IsSameGuild != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSameGuild);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            HeadImageId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Integral = input.ReadInt32();
            break;
          }
          case 48: {
            Fc = input.ReadInt32();
            break;
          }
          case 56: {
            LikeTimes = input.ReadInt32();
            break;
          }
          case 64: {
            IsSameGuild = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家简易信息列表
  /// </summary>
  public sealed class SimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<SimpleInfo> _parser = new pb::MessageParser<SimpleInfo>(() => new SimpleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "imageId" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private int imageId_;
    /// <summary>
    ///形象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "likeTimes" field.</summary>
    public const int LikeTimesFieldNumber = 3;
    private int likeTimes_;
    /// <summary>
    ///被膜拜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeTimes {
      get { return likeTimes_; }
      set {
        likeTimes_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 4;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImageId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (LikeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LikeTimes);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LikeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LikeTimes);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ImageId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            LikeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///竞技场记录
  /// </summary>
  public sealed class ArenaLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<ArenaLogInfo> _parser = new pb::MessageParser<ArenaLogInfo>(() => new ArenaLogInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaLogInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "otherPlayerId" field.</summary>
    public const int OtherPlayerIdFieldNumber = 1;
    private long otherPlayerId_;
    /// <summary>
    ///其他玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtherPlayerId {
      get { return otherPlayerId_; }
      set {
        otherPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "otherName" field.</summary>
    public const int OtherNameFieldNumber = 2;
    private string otherName_ = "";
    /// <summary>
    ///其他玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherHeadImageId" field.</summary>
    public const int OtherHeadImageIdFieldNumber = 3;
    private int otherHeadImageId_;
    /// <summary>
    ///其他玩家头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherHeadImageId {
      get { return otherHeadImageId_; }
      set {
        otherHeadImageId_ = value;
      }
    }

    /// <summary>Field number for the "changeIntegral" field.</summary>
    public const int ChangeIntegralFieldNumber = 4;
    private int changeIntegral_;
    /// <summary>
    ///积分变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeIntegral {
      get { return changeIntegral_; }
      set {
        changeIntegral_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private int time_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///类型(1=进攻成功,2=进攻失败,3=防守成功,4=防守失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 7;
    private long videoId_;
    /// <summary>
    ///录像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherPlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OtherPlayerId);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OtherName);
      }
      if (OtherHeadImageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OtherHeadImageId);
      }
      if (ChangeIntegral != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChangeIntegral);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (VideoId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtherPlayerId);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (OtherHeadImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherHeadImageId);
      }
      if (ChangeIntegral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeIntegral);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (VideoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OtherPlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            OtherName = input.ReadString();
            break;
          }
          case 24: {
            OtherHeadImageId = input.ReadInt32();
            break;
          }
          case 32: {
            ChangeIntegral = input.ReadInt32();
            break;
          }
          case 40: {
            Time = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            VideoId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求竞技场页面
  /// </summary>
  public sealed class ReqArenaPage : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaPage> _parser = new pb::MessageParser<ReqArenaPage>(() => new ReqArenaPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaPage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回竞技场页面
  /// </summary>
  public sealed class AckArenaPage : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaPage> _parser = new pb::MessageParser<AckArenaPage>(() => new AckArenaPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaPage> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    ///个人排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 2;
    private int integral_;
    /// <summary>
    ///个人积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.SimpleInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.SimpleInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SimpleInfo> info_ = new pbc::RepeatedField<global::Protocol.SimpleInfo>();
    /// <summary>
    ///前三玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SimpleInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "lastTimes" field.</summary>
    public const int LastTimesFieldNumber = 4;
    private int lastTimes_;
    /// <summary>
    ///赛季剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTimes {
      get { return lastTimes_; }
      set {
        lastTimes_ = value;
      }
    }

    /// <summary>Field number for the "freeTimes" field.</summary>
    public const int FreeTimesFieldNumber = 5;
    private int freeTimes_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "challengeTimes" field.</summary>
    public const int ChallengeTimesFieldNumber = 6;
    private int challengeTimes_;
    /// <summary>
    ///挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeTimes {
      get { return challengeTimes_; }
      set {
        challengeTimes_ = value;
      }
    }

    /// <summary>Field number for the "seasonTime" field.</summary>
    public const int SeasonTimeFieldNumber = 7;
    private string seasonTime_ = "";
    /// <summary>
    ///赛季时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeasonTime {
      get { return seasonTime_; }
      set {
        seasonTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "likeTimes" field.</summary>
    public const int LikeTimesFieldNumber = 8;
    private int likeTimes_;
    /// <summary>
    ///被膜拜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeTimes {
      get { return likeTimes_; }
      set {
        likeTimes_ = value;
      }
    }

    /// <summary>Field number for the "doLikeList" field.</summary>
    public const int DoLikeListFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_doLikeList_codec
        = pb::FieldCodec.ForInt64(74);
    private readonly pbc::RepeatedField<long> doLikeList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///已经膜拜过的玩家id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DoLikeList {
      get { return doLikeList_; }
    }

    /// <summary>Field number for the "getRewardList" field.</summary>
    public const int GetRewardListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_getRewardList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> getRewardList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经领取的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GetRewardList {
      get { return getRewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (Integral != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Integral);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (LastTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastTimes);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTimes);
      }
      if (ChallengeTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChallengeTimes);
      }
      if (SeasonTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SeasonTime);
      }
      if (LikeTimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LikeTimes);
      }
      doLikeList_.WriteTo(output, _repeated_doLikeList_codec);
      getRewardList_.WriteTo(output, _repeated_getRewardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (LastTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTimes);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      if (ChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeTimes);
      }
      if (SeasonTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeasonTime);
      }
      if (LikeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LikeTimes);
      }
      size += doLikeList_.CalculateSize(_repeated_doLikeList_codec);
      size += getRewardList_.CalculateSize(_repeated_getRewardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            Integral = input.ReadInt32();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 32: {
            LastTimes = input.ReadInt32();
            break;
          }
          case 40: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 48: {
            ChallengeTimes = input.ReadInt32();
            break;
          }
          case 58: {
            SeasonTime = input.ReadString();
            break;
          }
          case 64: {
            LikeTimes = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            doLikeList_.AddEntriesFrom(input, _repeated_doLikeList_codec);
            break;
          }
          case 82:
          case 80: {
            getRewardList_.AddEntriesFrom(input, _repeated_getRewardList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求可挑战玩家列表
  /// </summary>
  public sealed class ReqArenaDefPlayer : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaDefPlayer> _parser = new pb::MessageParser<ReqArenaDefPlayer>(() => new ReqArenaDefPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaDefPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求可挑战玩家列表
  /// </summary>
  public sealed class AckArenaDefPlayer : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaDefPlayer> _parser = new pb::MessageParser<AckArenaDefPlayer>(() => new AckArenaDefPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaDefPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ArenaInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ArenaInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArenaInfo> info_ = new pbc::RepeatedField<global::Protocol.ArenaInfo>();
    /// <summary>
    ///可挑战玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArenaInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求挑战记录
  /// </summary>
  public sealed class ReqArenaLog : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaLog> _parser = new pb::MessageParser<ReqArenaLog>(() => new ReqArenaLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回挑战记录
  /// </summary>
  public sealed class AckArenaLog : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaLog> _parser = new pb::MessageParser<AckArenaLog>(() => new AckArenaLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ArenaLogInfo> _repeated_log_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ArenaLogInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArenaLogInfo> log_ = new pbc::RepeatedField<global::Protocol.ArenaLogInfo>();
    /// <summary>
    ///挑战列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArenaLogInfo> Log {
      get { return log_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      log_.WriteTo(output, _repeated_log_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += log_.CalculateSize(_repeated_log_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            log_.AddEntriesFrom(input, _repeated_log_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求竞技场战斗
  /// </summary>
  public sealed class ReqArenaBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaBattle> _parser = new pb::MessageParser<ReqArenaBattle>(() => new ReqArenaBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "otherPlayerId" field.</summary>
    public const int OtherPlayerIdFieldNumber = 1;
    private long otherPlayerId_;
    /// <summary>
    ///其他玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtherPlayerId {
      get { return otherPlayerId_; }
      set {
        otherPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherPlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OtherPlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtherPlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OtherPlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回竞技场战斗
  /// </summary>
  public sealed class AckArenaBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaBattle> _parser = new pb::MessageParser<AckArenaBattle>(() => new AckArenaBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码(挑战成功推送AckArenaDefPlayer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///已经挑战的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "freeTimes" field.</summary>
    public const int FreeTimesFieldNumber = 4;
    private int freeTimes_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            FreeTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求竞技场刷新
  /// </summary>
  public sealed class ReqArenaRefresh : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaRefresh> _parser = new pb::MessageParser<ReqArenaRefresh>(() => new ReqArenaRefresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaRefresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回竞技场刷新
  /// </summary>
  public sealed class AckArenaRefresh : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaRefresh> _parser = new pb::MessageParser<AckArenaRefresh>(() => new AckArenaRefresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaRefresh> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求挑战次数奖励
  /// </summary>
  public sealed class ReqArenaReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaReward> _parser = new pb::MessageParser<ReqArenaReward>(() => new ReqArenaReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回挑战次数奖励
  /// </summary>
  public sealed class AckqArenaReward : pb::IMessage {
    private static readonly pb::MessageParser<AckqArenaReward> _parser = new pb::MessageParser<AckqArenaReward>(() => new AckqArenaReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckqArenaReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码(0推送AckRewards)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "getRewardList" field.</summary>
    public const int GetRewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_getRewardList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> getRewardList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经领取的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GetRewardList {
      get { return getRewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      getRewardList_.WriteTo(output, _repeated_getRewardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += getRewardList_.CalculateSize(_repeated_getRewardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            getRewardList_.AddEntriesFrom(input, _repeated_getRewardList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求膜拜
  /// </summary>
  public sealed class ReqArenaLike : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaLike> _parser = new pb::MessageParser<ReqArenaLike>(() => new ReqArenaLike());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaLike> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回膜拜
  /// </summary>
  public sealed class AckArenaLike : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaLike> _parser = new pb::MessageParser<AckArenaLike>(() => new AckArenaLike());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaLike> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求排行
  /// </summary>
  public sealed class ReqArenaRank : pb::IMessage {
    private static readonly pb::MessageParser<ReqArenaRank> _parser = new pb::MessageParser<ReqArenaRank>(() => new ReqArenaRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqArenaRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回排行
  /// </summary>
  public sealed class AckArenaRank : pb::IMessage {
    private static readonly pb::MessageParser<AckArenaRank> _parser = new pb::MessageParser<AckArenaRank>(() => new AckArenaRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckArenaRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ArenaInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ArenaInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArenaInfo> info_ = new pbc::RepeatedField<global::Protocol.ArenaInfo>();
    /// <summary>
    ///竞技场排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArenaInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////冠军赛//////////
  ///玩家简易基本信息
  /// </summary>
  public sealed class SimplePlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<SimplePlayerInfo> _parser = new pb::MessageParser<SimplePlayerInfo>(() => new SimplePlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimplePlayerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "heardImage" field.</summary>
    public const int HeardImageFieldNumber = 2;
    private int heardImage_;
    /// <summary>
    ///头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeardImage {
      get { return heardImage_; }
      set {
        heardImage_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (HeardImage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeardImage);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (HeardImage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeardImage);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            HeardImage = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家发送弹幕信息
  /// </summary>
  public sealed class ChampioncChatInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChampioncChatInfo> _parser = new pb::MessageParser<ChampioncChatInfo>(() => new ChampioncChatInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChampioncChatInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 2;
    private string chat_ = "";
    /// <summary>
    ///弹幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chat {
      get { return chat_; }
      set {
        chat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Chat.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Chat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Chat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Chat = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///32强赛开始的玩家对阵信息
  /// </summary>
  public sealed class KnocKoutInfo : pb::IMessage {
    private static readonly pb::MessageParser<KnocKoutInfo> _parser = new pb::MessageParser<KnocKoutInfo>(() => new KnocKoutInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KnocKoutInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "atkName" field.</summary>
    public const int AtkNameFieldNumber = 2;
    private string atkName_ = "";
    /// <summary>
    ///攻击者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AtkName {
      get { return atkName_; }
      set {
        atkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defName" field.</summary>
    public const int DefNameFieldNumber = 3;
    private string defName_ = "";
    /// <summary>
    ///防守者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefName {
      get { return defName_; }
      set {
        defName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "atkId" field.</summary>
    public const int AtkIdFieldNumber = 4;
    private long atkId_;
    /// <summary>
    ///攻击方id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AtkId {
      get { return atkId_; }
      set {
        atkId_ = value;
      }
    }

    /// <summary>Field number for the "defId" field.</summary>
    public const int DefIdFieldNumber = 5;
    private long defId_;
    /// <summary>
    ///防守方id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefId {
      get { return defId_; }
      set {
        defId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 6;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      if (AtkName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AtkName);
      }
      if (DefName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefName);
      }
      if (AtkId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AtkId);
      }
      if (DefId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DefId);
      }
      if (Round != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (AtkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AtkName);
      }
      if (DefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefName);
      }
      if (AtkId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AtkId);
      }
      if (DefId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 18: {
            AtkName = input.ReadString();
            break;
          }
          case 26: {
            DefName = input.ReadString();
            break;
          }
          case 32: {
            AtkId = input.ReadInt64();
            break;
          }
          case 40: {
            DefId = input.ReadInt64();
            break;
          }
          case 48: {
            Round = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提示冠军赛竞猜
  /// </summary>
  public sealed class AckChampionBetTips : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionBetTips> _parser = new pb::MessageParser<AckChampionBetTips>(() => new AckChampionBetTips());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionBetTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求冠军赛首页
  /// </summary>
  public sealed class ReqChampionPage : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionPage> _parser = new pb::MessageParser<ReqChampionPage>(() => new ReqChampionPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionPage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回冠军赛首页
  /// </summary>
  public sealed class AckChampionPage : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionPage> _parser = new pb::MessageParser<AckChampionPage>(() => new AckChampionPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionPage> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    ///个人排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "historyRank" field.</summary>
    public const int HistoryRankFieldNumber = 2;
    private int historyRank_;
    /// <summary>
    ///历史最高排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryRank {
      get { return historyRank_; }
      set {
        historyRank_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.SimpleInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.SimpleInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SimpleInfo> info_ = new pbc::RepeatedField<global::Protocol.SimpleInfo>();
    /// <summary>
    ///前三玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SimpleInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "lastTimes" field.</summary>
    public const int LastTimesFieldNumber = 4;
    private int lastTimes_;
    /// <summary>
    ///赛季剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTimes {
      get { return lastTimes_; }
      set {
        lastTimes_ = value;
      }
    }

    /// <summary>Field number for the "seasonTime" field.</summary>
    public const int SeasonTimeFieldNumber = 5;
    private string seasonTime_ = "";
    /// <summary>
    ///赛季时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeasonTime {
      get { return seasonTime_; }
      set {
        seasonTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "likeTimes" field.</summary>
    public const int LikeTimesFieldNumber = 6;
    private int likeTimes_;
    /// <summary>
    ///被膜拜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeTimes {
      get { return likeTimes_; }
      set {
        likeTimes_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 7;
    private int isOpen_;
    /// <summary>
    ///是否开启冠军赛(0=未开启,1=开启)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "doLikeList" field.</summary>
    public const int DoLikeListFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_doLikeList_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> doLikeList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///已经膜拜过的玩家id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DoLikeList {
      get { return doLikeList_; }
    }

    /// <summary>Field number for the "nextOpenTime" field.</summary>
    public const int NextOpenTimeFieldNumber = 9;
    private string nextOpenTime_ = "";
    /// <summary>
    ///下次冠军赛日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextOpenTime {
      get { return nextOpenTime_; }
      set {
        nextOpenTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextLastTime" field.</summary>
    public const int NextLastTimeFieldNumber = 10;
    private int nextLastTime_;
    /// <summary>
    ///开启倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLastTime {
      get { return nextLastTime_; }
      set {
        nextLastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (HistoryRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HistoryRank);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (LastTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastTimes);
      }
      if (SeasonTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SeasonTime);
      }
      if (LikeTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LikeTimes);
      }
      if (IsOpen != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsOpen);
      }
      doLikeList_.WriteTo(output, _repeated_doLikeList_codec);
      if (NextOpenTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(NextOpenTime);
      }
      if (NextLastTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NextLastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HistoryRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryRank);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (LastTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTimes);
      }
      if (SeasonTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeasonTime);
      }
      if (LikeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LikeTimes);
      }
      if (IsOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
      }
      size += doLikeList_.CalculateSize(_repeated_doLikeList_codec);
      if (NextOpenTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextOpenTime);
      }
      if (NextLastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            HistoryRank = input.ReadInt32();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 32: {
            LastTimes = input.ReadInt32();
            break;
          }
          case 42: {
            SeasonTime = input.ReadString();
            break;
          }
          case 48: {
            LikeTimes = input.ReadInt32();
            break;
          }
          case 56: {
            IsOpen = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            doLikeList_.AddEntriesFrom(input, _repeated_doLikeList_codec);
            break;
          }
          case 74: {
            NextOpenTime = input.ReadString();
            break;
          }
          case 80: {
            NextLastTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求我的竞赛
  /// </summary>
  public sealed class ReqChampionMatch : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionMatch> _parser = new pb::MessageParser<ReqChampionMatch>(() => new ReqChampionMatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回我的竞赛
  /// </summary>
  public sealed class AckChampionMatch : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionMatch> _parser = new pb::MessageParser<AckChampionMatch>(() => new AckChampionMatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionMatch> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "otherPlayerId" field.</summary>
    public const int OtherPlayerIdFieldNumber = 2;
    private long otherPlayerId_;
    /// <summary>
    ///对手id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtherPlayerId {
      get { return otherPlayerId_; }
      set {
        otherPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "lastReadyTime" field.</summary>
    public const int LastReadyTimeFieldNumber = 3;
    private int lastReadyTime_;
    /// <summary>
    ///剩余准备时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastReadyTime {
      get { return lastReadyTime_; }
      set {
        lastReadyTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBetTime" field.</summary>
    public const int LastBetTimeFieldNumber = 4;
    private int lastBetTime_;
    /// <summary>
    ///剩余竞猜时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBetTime {
      get { return lastBetTime_; }
      set {
        lastBetTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBattleTime" field.</summary>
    public const int LastBattleTimeFieldNumber = 5;
    private int lastBattleTime_;
    /// <summary>
    ///剩余比赛时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBattleTime {
      get { return lastBattleTime_; }
      set {
        lastBattleTime_ = value;
      }
    }

    /// <summary>Field number for the "otherInfo" field.</summary>
    public const int OtherInfoFieldNumber = 6;
    private global::Protocol.SimplePlayerInfo otherInfo_;
    /// <summary>
    ///对手基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo OtherInfo {
      get { return otherInfo_; }
      set {
        otherInfo_ = value;
      }
    }

    /// <summary>Field number for the "matrixInfo" field.</summary>
    public const int MatrixInfoFieldNumber = 7;
    private global::Protocol.AckMatrixInfo matrixInfo_;
    /// <summary>
    ///对手阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckMatrixInfo MatrixInfo {
      get { return matrixInfo_; }
      set {
        matrixInfo_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 8;
    private int isOpen_;
    /// <summary>
    ///是否开启冠军赛(0=未开启,1=开启,2=未参与,3=已结束,4=已淘汰)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "battleReportResp" field.</summary>
    public const int BattleReportRespFieldNumber = 9;
    private global::Protocol.BattleReportResp battleReportResp_;
    /// <summary>
    ///战报(不在开启时间显示)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleReportResp BattleReportResp {
      get { return battleReportResp_; }
      set {
        battleReportResp_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 10;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "chats" field.</summary>
    public const int ChatsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protocol.ChampioncChatInfo> _repeated_chats_codec
        = pb::FieldCodec.ForMessage(90, global::Protocol.ChampioncChatInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChampioncChatInfo> chats_ = new pbc::RepeatedField<global::Protocol.ChampioncChatInfo>();
    /// <summary>
    ///所有的弹幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChampioncChatInfo> Chats {
      get { return chats_; }
    }

    /// <summary>Field number for the "heroInfo" field.</summary>
    public const int HeroInfoFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_heroInfo_codec
        = pb::FieldCodec.ForMessage(98, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> heroInfo_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///对手英雄简易信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> HeroInfo {
      get { return heroInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
      if (OtherPlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OtherPlayerId);
      }
      if (LastReadyTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastReadyTime);
      }
      if (LastBetTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastBetTime);
      }
      if (LastBattleTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastBattleTime);
      }
      if (otherInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OtherInfo);
      }
      if (matrixInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MatrixInfo);
      }
      if (IsOpen != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsOpen);
      }
      if (battleReportResp_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(BattleReportResp);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ReportId);
      }
      chats_.WriteTo(output, _repeated_chats_codec);
      heroInfo_.WriteTo(output, _repeated_heroInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (OtherPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtherPlayerId);
      }
      if (LastReadyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastReadyTime);
      }
      if (LastBetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBetTime);
      }
      if (LastBattleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBattleTime);
      }
      if (otherInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherInfo);
      }
      if (matrixInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatrixInfo);
      }
      if (IsOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
      }
      if (battleReportResp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleReportResp);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      size += chats_.CalculateSize(_repeated_chats_codec);
      size += heroInfo_.CalculateSize(_repeated_heroInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
          case 16: {
            OtherPlayerId = input.ReadInt64();
            break;
          }
          case 24: {
            LastReadyTime = input.ReadInt32();
            break;
          }
          case 32: {
            LastBetTime = input.ReadInt32();
            break;
          }
          case 40: {
            LastBattleTime = input.ReadInt32();
            break;
          }
          case 50: {
            if (otherInfo_ == null) {
              otherInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(otherInfo_);
            break;
          }
          case 58: {
            if (matrixInfo_ == null) {
              matrixInfo_ = new global::Protocol.AckMatrixInfo();
            }
            input.ReadMessage(matrixInfo_);
            break;
          }
          case 64: {
            IsOpen = input.ReadInt32();
            break;
          }
          case 74: {
            if (battleReportResp_ == null) {
              battleReportResp_ = new global::Protocol.BattleReportResp();
            }
            input.ReadMessage(battleReportResp_);
            break;
          }
          case 80: {
            ReportId = input.ReadInt64();
            break;
          }
          case 90: {
            chats_.AddEntriesFrom(input, _repeated_chats_codec);
            break;
          }
          case 98: {
            heroInfo_.AddEntriesFrom(input, _repeated_heroInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求竞猜页面
  /// </summary>
  public sealed class ReqChampionBetPage : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionBetPage> _parser = new pb::MessageParser<ReqChampionBetPage>(() => new ReqChampionBetPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionBetPage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回竞猜页面
  /// </summary>
  public sealed class AckChampionBetPage : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionBetPage> _parser = new pb::MessageParser<AckChampionBetPage>(() => new AckChampionBetPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionBetPage> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "lastReadyTime" field.</summary>
    public const int LastReadyTimeFieldNumber = 2;
    private int lastReadyTime_;
    /// <summary>
    ///剩余准备时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastReadyTime {
      get { return lastReadyTime_; }
      set {
        lastReadyTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBetTime" field.</summary>
    public const int LastBetTimeFieldNumber = 3;
    private int lastBetTime_;
    /// <summary>
    ///剩余竞猜时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBetTime {
      get { return lastBetTime_; }
      set {
        lastBetTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBattleTime" field.</summary>
    public const int LastBattleTimeFieldNumber = 4;
    private int lastBattleTime_;
    /// <summary>
    ///剩余比赛时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBattleTime {
      get { return lastBattleTime_; }
      set {
        lastBattleTime_ = value;
      }
    }

    /// <summary>Field number for the "battleReportResp" field.</summary>
    public const int BattleReportRespFieldNumber = 5;
    private global::Protocol.BattleReportResp battleReportResp_;
    /// <summary>
    ///战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleReportResp BattleReportResp {
      get { return battleReportResp_; }
      set {
        battleReportResp_ = value;
      }
    }

    /// <summary>Field number for the "chip" field.</summary>
    public const int ChipFieldNumber = 6;
    private int chip_;
    /// <summary>
    ///剩余筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chip {
      get { return chip_; }
      set {
        chip_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 7;
    private int isOpen_;
    /// <summary>
    ///是否开启冠军赛(0=未开启,1=开启,2=未参与,3=已结束)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 8;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
      if (LastReadyTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastReadyTime);
      }
      if (LastBetTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastBetTime);
      }
      if (LastBattleTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastBattleTime);
      }
      if (battleReportResp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BattleReportResp);
      }
      if (Chip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Chip);
      }
      if (IsOpen != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsOpen);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (LastReadyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastReadyTime);
      }
      if (LastBetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBetTime);
      }
      if (LastBattleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBattleTime);
      }
      if (battleReportResp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleReportResp);
      }
      if (Chip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chip);
      }
      if (IsOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
          case 16: {
            LastReadyTime = input.ReadInt32();
            break;
          }
          case 24: {
            LastBetTime = input.ReadInt32();
            break;
          }
          case 32: {
            LastBattleTime = input.ReadInt32();
            break;
          }
          case 42: {
            if (battleReportResp_ == null) {
              battleReportResp_ = new global::Protocol.BattleReportResp();
            }
            input.ReadMessage(battleReportResp_);
            break;
          }
          case 48: {
            Chip = input.ReadInt32();
            break;
          }
          case 56: {
            IsOpen = input.ReadInt32();
            break;
          }
          case 64: {
            ReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求下注赔率
  /// </summary>
  public sealed class ReqChampionOdds : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionOdds> _parser = new pb::MessageParser<ReqChampionOdds>(() => new ReqChampionOdds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionOdds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回下注赔率
  /// </summary>
  public sealed class AckChampionOdds : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionOdds> _parser = new pb::MessageParser<AckChampionOdds>(() => new AckChampionOdds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionOdds> Parser { get { return _parser; } }

    /// <summary>Field number for the "atkOdds" field.</summary>
    public const int AtkOddsFieldNumber = 1;
    private string atkOdds_ = "";
    /// <summary>
    ///攻击方赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AtkOdds {
      get { return atkOdds_; }
      set {
        atkOdds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defOdds" field.</summary>
    public const int DefOddsFieldNumber = 2;
    private string defOdds_ = "";
    /// <summary>
    ///防守方赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefOdds {
      get { return defOdds_; }
      set {
        defOdds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AtkOdds.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AtkOdds);
      }
      if (DefOdds.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefOdds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AtkOdds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AtkOdds);
      }
      if (DefOdds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefOdds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AtkOdds = input.ReadString();
            break;
          }
          case 18: {
            DefOdds = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求下注
  /// </summary>
  public sealed class ReqChampionBet : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionBet> _parser = new pb::MessageParser<ReqChampionBet>(() => new ReqChampionBet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionBet> Parser { get { return _parser; } }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    /// <summary>
    ///下注数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private long playerId_;
    /// <summary>
    ///下注的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 3;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerId);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 24: {
            ReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回下注
  /// </summary>
  public sealed class AckChampionBet : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionBet> _parser = new pb::MessageParser<AckChampionBet>(() => new AckChampionBet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionBet> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 2;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            ReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///冠军赛比赛记录信息
  /// </summary>
  public sealed class ChampionLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChampionLogInfo> _parser = new pb::MessageParser<ChampionLogInfo>(() => new ChampionLogInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChampionLogInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///战斗结果(1=胜利,2=失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Protocol.SimplePlayerInfo info_;
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 4;
    private int integral_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 5;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 6;
    private long videoId_;
    /// <summary>
    ///录像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (Round != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Round);
      }
      if (Integral != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Integral);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReportId);
      }
      if (VideoId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (VideoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 24: {
            Round = input.ReadInt32();
            break;
          }
          case 32: {
            Integral = input.ReadInt32();
            break;
          }
          case 40: {
            ReportId = input.ReadInt64();
            break;
          }
          case 48: {
            VideoId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冠军赛战斗记录
  /// </summary>
  public sealed class ReqChampionBattleLog : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionBattleLog> _parser = new pb::MessageParser<ReqChampionBattleLog>(() => new ReqChampionBattleLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionBattleLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回冠军赛战斗记录
  /// </summary>
  public sealed class AckChampionBattleLog : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionBattleLog> _parser = new pb::MessageParser<AckChampionBattleLog>(() => new AckChampionBattleLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionBattleLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ChampionLogInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ChampionLogInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChampionLogInfo> info_ = new pbc::RepeatedField<global::Protocol.ChampionLogInfo>();
    /// <summary>
    ///冠军赛比赛记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChampionLogInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///冠军赛下注记录信息
  /// </summary>
  public sealed class ChampionBetLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChampionBetLogInfo> _parser = new pb::MessageParser<ChampionBetLogInfo>(() => new ChampionBetLogInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChampionBetLogInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "atkInfo" field.</summary>
    public const int AtkInfoFieldNumber = 1;
    private global::Protocol.SimplePlayerInfo atkInfo_;
    /// <summary>
    ///攻击方信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo AtkInfo {
      get { return atkInfo_; }
      set {
        atkInfo_ = value;
      }
    }

    /// <summary>Field number for the "defInfo" field.</summary>
    public const int DefInfoFieldNumber = 2;
    private global::Protocol.SimplePlayerInfo defInfo_;
    /// <summary>
    ///防守方信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo DefInfo {
      get { return defInfo_; }
      set {
        defInfo_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///战斗结果(1=攻击方胜,2=防守方胜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chip" field.</summary>
    public const int ChipFieldNumber = 4;
    private int chip_;
    /// <summary>
    ///筹码变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chip {
      get { return chip_; }
      set {
        chip_ = value;
      }
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 5;
    private long reportId_;
    /// <summary>
    ///战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 6;
    private long videoId_;
    /// <summary>
    ///录像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 7;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (atkInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AtkInfo);
      }
      if (defInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DefInfo);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (Chip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Chip);
      }
      if (ReportId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReportId);
      }
      if (VideoId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(VideoId);
      }
      if (Round != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (atkInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AtkInfo);
      }
      if (defInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefInfo);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Chip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chip);
      }
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (VideoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VideoId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (atkInfo_ == null) {
              atkInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(atkInfo_);
            break;
          }
          case 18: {
            if (defInfo_ == null) {
              defInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(defInfo_);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 32: {
            Chip = input.ReadInt32();
            break;
          }
          case 40: {
            ReportId = input.ReadInt64();
            break;
          }
          case 48: {
            VideoId = input.ReadInt64();
            break;
          }
          case 56: {
            Round = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冠军赛下注记录
  /// </summary>
  public sealed class ReqChampionBetLog : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionBetLog> _parser = new pb::MessageParser<ReqChampionBetLog>(() => new ReqChampionBetLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionBetLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回冠军赛下注记录
  /// </summary>
  public sealed class AckChampionBetLog : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionBetLog> _parser = new pb::MessageParser<AckChampionBetLog>(() => new AckChampionBetLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionBetLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ChampionBetLogInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ChampionBetLogInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChampionBetLogInfo> info_ = new pbc::RepeatedField<global::Protocol.ChampionBetLogInfo>();
    /// <summary>
    ///下注记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChampionBetLogInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冠军赛排行
  /// </summary>
  public sealed class ReqChampionRank : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampionRank> _parser = new pb::MessageParser<ReqChampionRank>(() => new ReqChampionRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampionRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回冠军赛排行
  /// </summary>
  public sealed class AckChampionRank : pb::IMessage {
    private static readonly pb::MessageParser<AckChampionRank> _parser = new pb::MessageParser<AckChampionRank>(() => new AckChampionRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampionRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ArenaInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ArenaInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArenaInfo> rankInfo_ = new pbc::RepeatedField<global::Protocol.ArenaInfo>();
    /// <summary>
    ///冠军赛排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArenaInfo> RankInfo {
      get { return rankInfo_; }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 2;
    private int myRank_;
    /// <summary>
    ///个人排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "myIntegral" field.</summary>
    public const int MyIntegralFieldNumber = 3;
    private int myIntegral_;
    /// <summary>
    ///个人积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyIntegral {
      get { return myIntegral_; }
      set {
        myIntegral_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
      if (MyRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MyRank);
      }
      if (MyIntegral != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MyIntegral);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyRank);
      }
      if (MyIntegral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyIntegral);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
          case 16: {
            MyRank = input.ReadInt32();
            break;
          }
          case 24: {
            MyIntegral = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求发送弹幕
  /// </summary>
  public sealed class ReqChampioncChat : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampioncChat> _parser = new pb::MessageParser<ReqChampioncChat>(() => new ReqChampioncChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampioncChat> Parser { get { return _parser; } }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 1;
    private string chat_ = "";
    /// <summary>
    ///弹幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chat {
      get { return chat_; }
      set {
        chat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chat.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Chat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Chat = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回发送弹幕
  /// </summary>
  public sealed class AckChampioncChat : pb::IMessage {
    private static readonly pb::MessageParser<AckChampioncChat> _parser = new pb::MessageParser<AckChampioncChat>(() => new AckChampioncChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampioncChat> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送弹幕内容
  /// </summary>
  public sealed class AckChampioncChatInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckChampioncChatInfo> _parser = new pb::MessageParser<AckChampioncChatInfo>(() => new AckChampioncChatInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampioncChatInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 2;
    private global::Protocol.ChampioncChatInfo chat_;
    /// <summary>
    ///弹幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ChampioncChatInfo Chat {
      get { return chat_; }
      set {
        chat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (chat_ == null) {
              chat_ = new global::Protocol.ChampioncChatInfo();
            }
            input.ReadMessage(chat_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求32强赛
  /// </summary>
  public sealed class ReqChampioncKnocKout : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampioncKnocKout> _parser = new pb::MessageParser<ReqChampioncKnocKout>(() => new ReqChampioncKnocKout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampioncKnocKout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回32强赛
  /// </summary>
  public sealed class AckChampioncKnocKout : pb::IMessage {
    private static readonly pb::MessageParser<AckChampioncKnocKout> _parser = new pb::MessageParser<AckChampioncKnocKout>(() => new AckChampioncKnocKout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampioncKnocKout> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "lastReadyTime" field.</summary>
    public const int LastReadyTimeFieldNumber = 2;
    private int lastReadyTime_;
    /// <summary>
    ///剩余准备时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastReadyTime {
      get { return lastReadyTime_; }
      set {
        lastReadyTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBetTime" field.</summary>
    public const int LastBetTimeFieldNumber = 3;
    private int lastBetTime_;
    /// <summary>
    ///剩余竞猜时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBetTime {
      get { return lastBetTime_; }
      set {
        lastBetTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBattleTime" field.</summary>
    public const int LastBattleTimeFieldNumber = 4;
    private int lastBattleTime_;
    /// <summary>
    ///剩余比赛时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBattleTime {
      get { return lastBattleTime_; }
      set {
        lastBattleTime_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.KnocKoutInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.KnocKoutInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.KnocKoutInfo> info_ = new pbc::RepeatedField<global::Protocol.KnocKoutInfo>();
    /// <summary>
    ///32强列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.KnocKoutInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "topOneInfo" field.</summary>
    public const int TopOneInfoFieldNumber = 6;
    private global::Protocol.SimplePlayerInfo topOneInfo_;
    /// <summary>
    ///冠军信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo TopOneInfo {
      get { return topOneInfo_; }
      set {
        topOneInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
      if (LastReadyTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastReadyTime);
      }
      if (LastBetTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastBetTime);
      }
      if (LastBattleTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastBattleTime);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (topOneInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TopOneInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (LastReadyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastReadyTime);
      }
      if (LastBetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBetTime);
      }
      if (LastBattleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBattleTime);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (topOneInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopOneInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
          case 16: {
            LastReadyTime = input.ReadInt32();
            break;
          }
          case 24: {
            LastBetTime = input.ReadInt32();
            break;
          }
          case 32: {
            LastBattleTime = input.ReadInt32();
            break;
          }
          case 42: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 50: {
            if (topOneInfo_ == null) {
              topOneInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(topOneInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求32强赛赛况
  /// </summary>
  public sealed class ReqChampioncKnocKoutInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqChampioncKnocKoutInfo> _parser = new pb::MessageParser<ReqChampioncKnocKoutInfo>(() => new ReqChampioncKnocKoutInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChampioncKnocKoutInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    /// <summary>
    ///回合数(0=未开启,1=一回合,2=二回合,3=三回合,4=四回合,5=五回合,6=六回合,7=十六强,8=八强,9=四强,10=半决赛,11=决赛)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求32强赛赛况
  /// </summary>
  public sealed class AckChampioncKnocKoutInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckChampioncKnocKoutInfo> _parser = new pb::MessageParser<AckChampioncKnocKoutInfo>(() => new AckChampioncKnocKoutInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampioncKnocKoutInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "atkInfo" field.</summary>
    public const int AtkInfoFieldNumber = 1;
    private global::Protocol.SimplePlayerInfo atkInfo_;
    /// <summary>
    ///攻击基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo AtkInfo {
      get { return atkInfo_; }
      set {
        atkInfo_ = value;
      }
    }

    /// <summary>Field number for the "atkMatrixInfo" field.</summary>
    public const int AtkMatrixInfoFieldNumber = 2;
    private global::Protocol.AckMatrixInfo atkMatrixInfo_;
    /// <summary>
    ///攻击阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckMatrixInfo AtkMatrixInfo {
      get { return atkMatrixInfo_; }
      set {
        atkMatrixInfo_ = value;
      }
    }

    /// <summary>Field number for the "atkHeroInfo" field.</summary>
    public const int AtkHeroInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_atkHeroInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> atkHeroInfo_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///攻击方英雄简易信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> AtkHeroInfo {
      get { return atkHeroInfo_; }
    }

    /// <summary>Field number for the "defInfo" field.</summary>
    public const int DefInfoFieldNumber = 4;
    private global::Protocol.SimplePlayerInfo defInfo_;
    /// <summary>
    ///防守基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimplePlayerInfo DefInfo {
      get { return defInfo_; }
      set {
        defInfo_ = value;
      }
    }

    /// <summary>Field number for the "defMatrixInfo" field.</summary>
    public const int DefMatrixInfoFieldNumber = 5;
    private global::Protocol.AckMatrixInfo defMatrixInfo_;
    /// <summary>
    ///防守阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckMatrixInfo DefMatrixInfo {
      get { return defMatrixInfo_; }
      set {
        defMatrixInfo_ = value;
      }
    }

    /// <summary>Field number for the "defHeroInfo" field.</summary>
    public const int DefHeroInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_defHeroInfo_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> defHeroInfo_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///防守方英雄简易信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> DefHeroInfo {
      get { return defHeroInfo_; }
    }

    /// <summary>Field number for the "battleReportResp" field.</summary>
    public const int BattleReportRespFieldNumber = 7;
    private global::Protocol.BattleReportResp battleReportResp_;
    /// <summary>
    ///战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleReportResp BattleReportResp {
      get { return battleReportResp_; }
      set {
        battleReportResp_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 8;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (atkInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AtkInfo);
      }
      if (atkMatrixInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AtkMatrixInfo);
      }
      atkHeroInfo_.WriteTo(output, _repeated_atkHeroInfo_codec);
      if (defInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DefInfo);
      }
      if (defMatrixInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DefMatrixInfo);
      }
      defHeroInfo_.WriteTo(output, _repeated_defHeroInfo_codec);
      if (battleReportResp_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BattleReportResp);
      }
      if (Position != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (atkInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AtkInfo);
      }
      if (atkMatrixInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AtkMatrixInfo);
      }
      size += atkHeroInfo_.CalculateSize(_repeated_atkHeroInfo_codec);
      if (defInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefInfo);
      }
      if (defMatrixInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefMatrixInfo);
      }
      size += defHeroInfo_.CalculateSize(_repeated_defHeroInfo_codec);
      if (battleReportResp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleReportResp);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (atkInfo_ == null) {
              atkInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(atkInfo_);
            break;
          }
          case 18: {
            if (atkMatrixInfo_ == null) {
              atkMatrixInfo_ = new global::Protocol.AckMatrixInfo();
            }
            input.ReadMessage(atkMatrixInfo_);
            break;
          }
          case 26: {
            atkHeroInfo_.AddEntriesFrom(input, _repeated_atkHeroInfo_codec);
            break;
          }
          case 34: {
            if (defInfo_ == null) {
              defInfo_ = new global::Protocol.SimplePlayerInfo();
            }
            input.ReadMessage(defInfo_);
            break;
          }
          case 42: {
            if (defMatrixInfo_ == null) {
              defMatrixInfo_ = new global::Protocol.AckMatrixInfo();
            }
            input.ReadMessage(defMatrixInfo_);
            break;
          }
          case 50: {
            defHeroInfo_.AddEntriesFrom(input, _repeated_defHeroInfo_codec);
            break;
          }
          case 58: {
            if (battleReportResp_ == null) {
              battleReportResp_ = new global::Protocol.BattleReportResp();
            }
            input.ReadMessage(battleReportResp_);
            break;
          }
          case 64: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送冠军赛前三
  /// </summary>
  public sealed class AckChampioncTopThree : pb::IMessage {
    private static readonly pb::MessageParser<AckChampioncTopThree> _parser = new pb::MessageParser<AckChampioncTopThree>(() => new AckChampioncTopThree());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChampioncTopThree> Parser { get { return _parser; } }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 1;
    private int beginTime_;
    /// <summary>
    ///冠军赛开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "topThree" field.</summary>
    public const int TopThreeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.SimplePlayerInfo> _repeated_topThree_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.SimplePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SimplePlayerInfo> topThree_ = new pbc::RepeatedField<global::Protocol.SimplePlayerInfo>();
    /// <summary>
    ///前三信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SimplePlayerInfo> TopThree {
      get { return topThree_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BeginTime);
      }
      topThree_.WriteTo(output, _repeated_topThree_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginTime);
      }
      size += topThree_.CalculateSize(_repeated_topThree_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginTime = input.ReadInt32();
            break;
          }
          case 18: {
            topThree_.AddEntriesFrom(input, _repeated_topThree_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买挑战券
  /// </summary>
  public sealed class ReqBuyArenaTicket : pb::IMessage {
    private static readonly pb::MessageParser<ReqBuyArenaTicket> _parser = new pb::MessageParser<ReqBuyArenaTicket>(() => new ReqBuyArenaTicket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyArenaTicket> Parser { get { return _parser; } }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private int times_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Times != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回购买挑战券
  /// </summary>
  public sealed class AckBuyArenaTicket : pb::IMessage {
    private static readonly pb::MessageParser<AckBuyArenaTicket> _parser = new pb::MessageParser<AckBuyArenaTicket>(() => new AckBuyArenaTicket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBuyArenaTicket> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class NotifyOdds : pb::IMessage {
    private static readonly pb::MessageParser<NotifyOdds> _parser = new pb::MessageParser<NotifyOdds>(() => new NotifyOdds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOdds> Parser { get { return _parser; } }

    /// <summary>Field number for the "update_odds" field.</summary>
    public const int UpdateOddsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.UpdateOdds> _repeated_updateOdds_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.UpdateOdds.Parser);
    private readonly pbc::RepeatedField<global::Protocol.UpdateOdds> updateOdds_ = new pbc::RepeatedField<global::Protocol.UpdateOdds>();
    /// <summary>
    ///所有被押注玩家的赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.UpdateOdds> UpdateOdds {
      get { return updateOdds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      updateOdds_.WriteTo(output, _repeated_updateOdds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updateOdds_.CalculateSize(_repeated_updateOdds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            updateOdds_.AddEntriesFrom(input, _repeated_updateOdds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class UpdateOdds : pb::IMessage {
    private static readonly pb::MessageParser<UpdateOdds> _parser = new pb::MessageParser<UpdateOdds>(() => new UpdateOdds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOdds> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///被投注的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "odds" field.</summary>
    public const int OddsFieldNumber = 2;
    private double odds_;
    /// <summary>
    ///赔率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Odds != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Odds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Odds != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 17: {
            Odds = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class NotifyState : pb::IMessage {
    private static readonly pb::MessageParser<NotifyState> _parser = new pb::MessageParser<NotifyState>(() => new NotifyState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyState> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    ///回合数,按总回合11计算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///1准备 2押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
