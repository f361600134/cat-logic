// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBSummon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////召唤//////////////////////
  ///请求召唤界面信息
  /// </summary>
  public sealed class ReqSummonInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqSummonInfo> _parser = new pb::MessageParser<ReqSummonInfo>(() => new ReqSummonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSummonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///服务器推送召唤界面信息
  /// </summary>
  public sealed class AckSummonInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSummonInfo> _parser = new pb::MessageParser<AckSummonInfo>(() => new AckSummonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSummonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "normaTime" field.</summary>
    public const int NormaTimeFieldNumber = 1;
    private int normaTime_;
    /// <summary>
    ///普通免费抽取剩余时间(0表示可抽取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormaTime {
      get { return normaTime_; }
      set {
        normaTime_ = value;
      }
    }

    /// <summary>Field number for the "advancedTime" field.</summary>
    public const int AdvancedTimeFieldNumber = 2;
    private int advancedTime_;
    /// <summary>
    ///高级免费抽取剩余时间(0表示可抽取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdvancedTime {
      get { return advancedTime_; }
      set {
        advancedTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NormaTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NormaTime);
      }
      if (AdvancedTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AdvancedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NormaTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormaTime);
      }
      if (AdvancedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvancedTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NormaTime = input.ReadInt32();
            break;
          }
          case 16: {
            AdvancedTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求召唤
  /// </summary>
  public sealed class ReqDoSummon : pb::IMessage {
    private static readonly pb::MessageParser<ReqDoSummon> _parser = new pb::MessageParser<ReqDoSummon>(() => new ReqDoSummon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDoSummon> Parser { get { return _parser; } }

    /// <summary>Field number for the "summonType" field.</summary>
    public const int SummonTypeFieldNumber = 1;
    private int summonType_;
    /// <summary>
    ///召唤类型(1=基础,2=友情,3=高级,4=积分,5=先知,6=天命)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonType {
      get { return summonType_; }
      set {
        summonType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///召唤次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private int camp_;
    /// <summary>
    ///阵营(先知召唤用到字段,1=风,2=水,3=火,4=光暗,5=星风,6=星水,7=星火,8=星光,9=星暗) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SummonType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SummonType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Camp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SummonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SummonType = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Camp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回召唤
  /// </summary>
  public sealed class AckDoSummon : pb::IMessage {
    private static readonly pb::MessageParser<AckDoSummon> _parser = new pb::MessageParser<AckDoSummon>(() => new AckDoSummon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDoSummon> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码(0=成功,推送AckSummonInfo)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "summonType" field.</summary>
    public const int SummonTypeFieldNumber = 2;
    private int summonType_;
    /// <summary>
    ///召唤类型(1=基础,2=友情,3=高级,4=积分,5=先知)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonType {
      get { return summonType_; }
      set {
        summonType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///召唤次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 5;
    private int camp_;
    /// <summary>
    ///阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (SummonType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SummonType);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (Camp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Camp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (SummonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            SummonType = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 40: {
            Camp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄转换界面
  /// </summary>
  public sealed class ReqHeroConvertInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroConvertInfo> _parser = new pb::MessageParser<ReqHeroConvertInfo>(() => new ReqHeroConvertInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroConvertInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回英雄转换界面
  /// </summary>
  public sealed class AckHeroConvertInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroConvertInfo> _parser = new pb::MessageParser<AckHeroConvertInfo>(() => new AckHeroConvertInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroConvertInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "fromHeroId" field.</summary>
    public const int FromHeroIdFieldNumber = 1;
    private long fromHeroId_;
    /// <summary>
    ///转换的英雄id(0则不存在)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromHeroId {
      get { return fromHeroId_; }
      set {
        fromHeroId_ = value;
      }
    }

    /// <summary>Field number for the "targetHeroId" field.</summary>
    public const int TargetHeroIdFieldNumber = 2;
    private int targetHeroId_;
    /// <summary>
    ///目标的英雄id(0则不存在)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetHeroId {
      get { return targetHeroId_; }
      set {
        targetHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromHeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromHeroId);
      }
      if (TargetHeroId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetHeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromHeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromHeroId);
      }
      if (TargetHeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetHeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromHeroId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetHeroId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄转换
  /// </summary>
  public sealed class ReqHeroConvert : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroConvert> _parser = new pb::MessageParser<ReqHeroConvert>(() => new ReqHeroConvert());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroConvert> Parser { get { return _parser; } }

    /// <summary>Field number for the "hreoId" field.</summary>
    public const int HreoIdFieldNumber = 1;
    private long hreoId_;
    /// <summary>
    ///英雄唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HreoId {
      get { return hreoId_; }
      set {
        hreoId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///类型(1=请求转换,2=取消转换,3=保存转换)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HreoId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HreoId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HreoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HreoId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HreoId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回英雄转换
  /// </summary>
  public sealed class AckHeroConvert : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroConvert> _parser = new pb::MessageParser<AckHeroConvert>(() => new AckHeroConvert());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroConvert> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码(0=成功)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///类型(1=请求转换,2=取消转换,3=保存转换)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "fromHeroId" field.</summary>
    public const int FromHeroIdFieldNumber = 3;
    private long fromHeroId_;
    /// <summary>
    ///转换的英雄id(0则不存在)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromHeroId {
      get { return fromHeroId_; }
      set {
        fromHeroId_ = value;
      }
    }

    /// <summary>Field number for the "targetHeroId" field.</summary>
    public const int TargetHeroIdFieldNumber = 4;
    private int targetHeroId_;
    /// <summary>
    ///目标的英雄id(0则不存在)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetHeroId {
      get { return targetHeroId_; }
      set {
        targetHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (FromHeroId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FromHeroId);
      }
      if (TargetHeroId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetHeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (FromHeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromHeroId);
      }
      if (TargetHeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetHeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            FromHeroId = input.ReadInt64();
            break;
          }
          case 32: {
            TargetHeroId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
