// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBHero.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///英雄简要信息
  /// </summary>
  public sealed class HeroInfo : pb::IMessage {
    private static readonly pb::MessageParser<HeroInfo> _parser = new pb::MessageParser<HeroInfo>(() => new HeroInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///英雄配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 4;
    private int star_;
    /// <summary>
    ///英雄星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    ///英雄战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_matrix_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> matrix_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///上阵阵法类型列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "masterName" field.</summary>
    public const int MasterNameFieldNumber = 7;
    private string masterName_ = "";
    /// <summary>
    ///主人名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterName {
      get { return masterName_; }
      set {
        masterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 8;
    private int hp_;
    /// <summary>
    ///英雄血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 9;
    private int maxHp_;
    /// <summary>
    ///英雄最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "masterId" field.</summary>
    public const int MasterIdFieldNumber = 10;
    private long masterId_;
    /// <summary>
    ///所属玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MasterId {
      get { return masterId_; }
      set {
        masterId_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protocol.AttrTypeAndValue> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(90, global::Protocol.AttrTypeAndValue.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrTypeAndValue> attrs_ = new pbc::RepeatedField<global::Protocol.AttrTypeAndValue>();
    /// <summary>
    ///英雄属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrTypeAndValue> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "equipConfigIds" field.</summary>
    public const int EquipConfigIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_equipConfigIds_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> equipConfigIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///装备列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipConfigIds {
      get { return equipConfigIds_; }
    }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Protocol.RuneIdAndPosition> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(106, global::Protocol.RuneIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RuneIdAndPosition> runes_ = new pbc::RepeatedField<global::Protocol.RuneIdAndPosition>();
    /// <summary>
    ///符文列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RuneIdAndPosition> Runes {
      get { return runes_; }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 14;
    private int step_;
    /// <summary>
    ///英雄进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "talents" field.</summary>
    public const int TalentsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Protocol.TalentInfo> _repeated_talents_codec
        = pb::FieldCodec.ForMessage(122, global::Protocol.TalentInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TalentInfo> talents_ = new pbc::RepeatedField<global::Protocol.TalentInfo>();
    /// <summary>
    ///天赋信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TalentInfo> Talents {
      get { return talents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Star);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      matrix_.WriteTo(output, _repeated_matrix_codec);
      if (MasterName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MasterName);
      }
      if (Hp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHp);
      }
      if (MasterId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MasterId);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      equipConfigIds_.WriteTo(output, _repeated_equipConfigIds_codec);
      runes_.WriteTo(output, _repeated_runes_codec);
      if (Step != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Step);
      }
      talents_.WriteTo(output, _repeated_talents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      if (MasterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterName);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (MasterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MasterId);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += equipConfigIds_.CalculateSize(_repeated_equipConfigIds_codec);
      size += runes_.CalculateSize(_repeated_runes_codec);
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      size += talents_.CalculateSize(_repeated_talents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Star = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 58: {
            MasterName = input.ReadString();
            break;
          }
          case 64: {
            Hp = input.ReadInt32();
            break;
          }
          case 72: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 80: {
            MasterId = input.ReadInt64();
            break;
          }
          case 90: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 98:
          case 96: {
            equipConfigIds_.AddEntriesFrom(input, _repeated_equipConfigIds_codec);
            break;
          }
          case 106: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
          case 112: {
            Step = input.ReadInt32();
            break;
          }
          case 122: {
            talents_.AddEntriesFrom(input, _repeated_talents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋信息
  /// </summary>
  public sealed class TalentInfo : pb::IMessage {
    private static readonly pb::MessageParser<TalentInfo> _parser = new pb::MessageParser<TalentInfo>(() => new TalentInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalentInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    /// <summary>
    ///技能Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄战力提升消息
  /// </summary>
  public sealed class AckHeroPowerUp : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroPowerUp> _parser = new pb::MessageParser<AckHeroPowerUp>(() => new AckHeroPowerUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroPowerUp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型1总战力2单个战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "oldPower" field.</summary>
    public const int OldPowerFieldNumber = 2;
    private int oldPower_;
    /// <summary>
    ///提升前战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldPower {
      get { return oldPower_; }
      set {
        oldPower_ = value;
      }
    }

    /// <summary>Field number for the "newPower" field.</summary>
    public const int NewPowerFieldNumber = 3;
    private int newPower_;
    /// <summary>
    ///提升后战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPower {
      get { return newPower_; }
      set {
        newPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (OldPower != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OldPower);
      }
      if (NewPower != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (OldPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldPower);
      }
      if (NewPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            OldPower = input.ReadInt32();
            break;
          }
          case 24: {
            NewPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄界面信息
  /// </summary>
  public sealed class ReqHeroPanel : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroPanel> _parser = new pb::MessageParser<ReqHeroPanel>(() => new ReqHeroPanel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroPanel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应英雄界面信息
  /// </summary>
  public sealed class AckHeroPanel : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroPanel> _parser = new pb::MessageParser<AckHeroPanel>(() => new AckHeroPanel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroPanel> Parser { get { return _parser; } }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 1;
    private int maxNum_;
    /// <summary>
    ///英雄位置数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    /// <summary>
    ///拥有英雄数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> heros_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///英雄简要信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "buyTimes" field.</summary>
    public const int BuyTimesFieldNumber = 4;
    private int buyTimes_;
    /// <summary>
    ///英雄位置购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTimes {
      get { return buyTimes_; }
      set {
        buyTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxNum);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      heros_.WriteTo(output, _repeated_heros_codec);
      if (BuyTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (BuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 26: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 32: {
            BuyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄详细信息
  /// </summary>
  public sealed class ReqHeroDetails : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroDetails> _parser = new pb::MessageParser<ReqHeroDetails>(() => new ReqHeroDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroDetails> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///英雄属性类型与值
  /// </summary>
  public sealed class AttrTypeAndValue : pb::IMessage {
    private static readonly pb::MessageParser<AttrTypeAndValue> _parser = new pb::MessageParser<AttrTypeAndValue>(() => new AttrTypeAndValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrTypeAndValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///英雄属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///英雄属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///符文ID与位置
  /// </summary>
  public sealed class RuneIdAndPosition : pb::IMessage {
    private static readonly pb::MessageParser<RuneIdAndPosition> _parser = new pb::MessageParser<RuneIdAndPosition>(() => new RuneIdAndPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuneIdAndPosition> Parser { get { return _parser; } }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 1;
    private long runeId_;
    /// <summary>
    ///符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    /// <summary>
    ///符文装备位置1-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private int configId_;
    /// <summary>
    ///符文配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuneId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RuneId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuneId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RuneId = input.ReadInt64();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄详细信息
  /// </summary>
  public sealed class AckHeroDetails : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroDetails> _parser = new pb::MessageParser<AckHeroDetails>(() => new AckHeroDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroDetails> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///英雄配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 4;
    private int star_;
    /// <summary>
    ///英雄星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    ///英雄战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 6;
    private int step_;
    /// <summary>
    ///英雄进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.AttrTypeAndValue> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.AttrTypeAndValue.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrTypeAndValue> attrs_ = new pbc::RepeatedField<global::Protocol.AttrTypeAndValue>();
    /// <summary>
    ///英雄属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrTypeAndValue> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "equipConfigIds" field.</summary>
    public const int EquipConfigIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_equipConfigIds_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> equipConfigIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///装备列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipConfigIds {
      get { return equipConfigIds_; }
    }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protocol.RuneIdAndPosition> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(74, global::Protocol.RuneIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RuneIdAndPosition> runes_ = new pbc::RepeatedField<global::Protocol.RuneIdAndPosition>();
    /// <summary>
    ///符文列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RuneIdAndPosition> Runes {
      get { return runes_; }
    }

    /// <summary>Field number for the "taskIds" field.</summary>
    public const int TaskIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_taskIds_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> taskIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已完成星阶任务ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaskIds {
      get { return taskIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Star);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (Step != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Step);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      equipConfigIds_.WriteTo(output, _repeated_equipConfigIds_codec);
      runes_.WriteTo(output, _repeated_runes_codec);
      taskIds_.WriteTo(output, _repeated_taskIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += equipConfigIds_.CalculateSize(_repeated_equipConfigIds_codec);
      size += runes_.CalculateSize(_repeated_runes_codec);
      size += taskIds_.CalculateSize(_repeated_taskIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Star = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 48: {
            Step = input.ReadInt32();
            break;
          }
          case 58: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 66:
          case 64: {
            equipConfigIds_.AddEntriesFrom(input, _repeated_equipConfigIds_codec);
            break;
          }
          case 74: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
          case 82:
          case 80: {
            taskIds_.AddEntriesFrom(input, _repeated_taskIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄升级
  /// </summary>
  public sealed class ReqHeroUpLevel : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUpLevel> _parser = new pb::MessageParser<ReqHeroUpLevel>(() => new ReqHeroUpLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUpLevel> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄升级
  /// </summary>
  public sealed class AckHeroUpLevel : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUpLevel> _parser = new pb::MessageParser<AckHeroUpLevel>(() => new AckHeroUpLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUpLevel> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///消耗材料配置ID和数量
  /// </summary>
  public sealed class CostMaterialInfo : pb::IMessage {
    private static readonly pb::MessageParser<CostMaterialInfo> _parser = new pb::MessageParser<CostMaterialInfo>(() => new CostMaterialInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CostMaterialInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄升星
  /// </summary>
  public sealed class ReqHeroUpStar : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUpStar> _parser = new pb::MessageParser<ReqHeroUpStar>(() => new ReqHeroUpStar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUpStar> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> heroIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///消耗材料英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "heroSoul" field.</summary>
    public const int HeroSoulFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.CostMaterialInfo> _repeated_heroSoul_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.CostMaterialInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.CostMaterialInfo> heroSoul_ = new pbc::RepeatedField<global::Protocol.CostMaterialInfo>();
    /// <summary>
    ///消耗材料英魂列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.CostMaterialInfo> HeroSoul {
      get { return heroSoul_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      heroSoul_.WriteTo(output, _repeated_heroSoul_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      size += heroSoul_.CalculateSize(_repeated_heroSoul_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 26: {
            heroSoul_.AddEntriesFrom(input, _repeated_heroSoul_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄升星
  /// </summary>
  public sealed class AckHeroUpStar : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUpStar> _parser = new pb::MessageParser<AckHeroUpStar>(() => new AckHeroUpStar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUpStar> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 2;
    private global::Protocol.AckHeroDetails before_;
    /// <summary>
    ///融合前详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeroDetails Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private global::Protocol.AckHeroDetails details_;
    /// <summary>
    ///融合后详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeroDetails Details {
      get { return details_; }
      set {
        details_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (before_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Before);
      }
      if (details_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Details);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (before_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Before);
      }
      if (details_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (before_ == null) {
              before_ = new global::Protocol.AckHeroDetails();
            }
            input.ReadMessage(before_);
            break;
          }
          case 26: {
            if (details_ == null) {
              details_ = new global::Protocol.AckHeroDetails();
            }
            input.ReadMessage(details_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求提交英雄升星星阶任务
  /// </summary>
  public sealed class ReqHeroUpStarTask : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUpStarTask> _parser = new pb::MessageParser<ReqHeroUpStarTask>(() => new ReqHeroUpStarTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUpStarTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> heroIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///消耗材料英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 3;
    private int taskId_;
    /// <summary>
    ///星阶任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "heroSoul" field.</summary>
    public const int HeroSoulFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.CostMaterialInfo> _repeated_heroSoul_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.CostMaterialInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.CostMaterialInfo> heroSoul_ = new pbc::RepeatedField<global::Protocol.CostMaterialInfo>();
    /// <summary>
    ///消耗材料英魂列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.CostMaterialInfo> HeroSoul {
      get { return heroSoul_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      if (TaskId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TaskId);
      }
      heroSoul_.WriteTo(output, _repeated_heroSoul_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      size += heroSoul_.CalculateSize(_repeated_heroSoul_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 24: {
            TaskId = input.ReadInt32();
            break;
          }
          case 34: {
            heroSoul_.AddEntriesFrom(input, _repeated_heroSoul_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应提交英雄升星星阶任务
  /// </summary>
  public sealed class AckHeroUpStarTask : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUpStarTask> _parser = new pb::MessageParser<AckHeroUpStarTask>(() => new AckHeroUpStarTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUpStarTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄升阶
  /// </summary>
  public sealed class ReqHeroUpStep : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUpStep> _parser = new pb::MessageParser<ReqHeroUpStep>(() => new ReqHeroUpStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUpStep> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄升阶
  /// </summary>
  public sealed class AckHeroUpStep : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUpStep> _parser = new pb::MessageParser<AckHeroUpStep>(() => new AckHeroUpStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUpStep> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买英雄位置上限
  /// </summary>
  public sealed class ReqHeroAddCeil : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroAddCeil> _parser = new pb::MessageParser<ReqHeroAddCeil>(() => new ReqHeroAddCeil());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroAddCeil> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应购买英雄位置上限
  /// </summary>
  public sealed class AckHeroAddCeil : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroAddCeil> _parser = new pb::MessageParser<AckHeroAddCeil>(() => new AckHeroAddCeil());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroAddCeil> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 2;
    private int maxNum_;
    /// <summary>
    ///英雄位置数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            MaxNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄融合
  /// </summary>
  public sealed class ReqHeroMerge : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroMerge> _parser = new pb::MessageParser<ReqHeroMerge>(() => new ReqHeroMerge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroMerge> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///合成英雄配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    /// <summary>
    ///主英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> heroIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///合成材料英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroIds {
      get { return heroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄融合
  /// </summary>
  public sealed class AckHeroMerge : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroMerge> _parser = new pb::MessageParser<AckHeroMerge>(() => new AckHeroMerge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroMerge> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 2;
    private global::Protocol.AckHeroDetails before_;
    /// <summary>
    ///融合前详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeroDetails Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private global::Protocol.AckHeroDetails details_;
    /// <summary>
    ///融合后详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeroDetails Details {
      get { return details_; }
      set {
        details_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (before_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Before);
      }
      if (details_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Details);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (before_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Before);
      }
      if (details_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (before_ == null) {
              before_ = new global::Protocol.AckHeroDetails();
            }
            input.ReadMessage(before_);
            break;
          }
          case 26: {
            if (details_ == null) {
              details_ = new global::Protocol.AckHeroDetails();
            }
            input.ReadMessage(details_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄献祭获得材料
  /// </summary>
  public sealed class ReqHeroSacMaterial : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroSacMaterial> _parser = new pb::MessageParser<ReqHeroSacMaterial>(() => new ReqHeroSacMaterial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroSacMaterial> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_heroId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> heroId_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///献祭英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroId {
      get { return heroId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroId_.WriteTo(output, _repeated_heroId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroId_.CalculateSize(_repeated_heroId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            heroId_.AddEntriesFrom(input, _repeated_heroId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄献祭获得材料
  /// </summary>
  public sealed class AckHeroSacMaterial : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroSacMaterial> _parser = new pb::MessageParser<AckHeroSacMaterial>(() => new AckHeroSacMaterial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroSacMaterial> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> itemList_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///获得物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄献祭
  /// </summary>
  public sealed class ReqHeroSacrifice : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroSacrifice> _parser = new pb::MessageParser<ReqHeroSacrifice>(() => new ReqHeroSacrifice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroSacrifice> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_heroId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> heroId_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///献祭英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroId {
      get { return heroId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroId_.WriteTo(output, _repeated_heroId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroId_.CalculateSize(_repeated_heroId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            heroId_.AddEntriesFrom(input, _repeated_heroId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄献祭
  /// </summary>
  public sealed class AckHeroSacrifice : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroSacrifice> _parser = new pb::MessageParser<AckHeroSacrifice>(() => new AckHeroSacrifice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroSacrifice> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄置换
  /// </summary>
  public sealed class ReqHeroReplace : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroReplace> _parser = new pb::MessageParser<ReqHeroReplace>(() => new ReqHeroReplace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroReplace> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///置换英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///置换目标英雄配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> heroIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///置换材料英雄唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroIds {
      get { return heroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄置换
  /// </summary>
  public sealed class AckHeroReplace : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroReplace> _parser = new pb::MessageParser<AckHeroReplace>(() => new AckHeroReplace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroReplace> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄回退获得材料
  /// </summary>
  public sealed class ReqHeroBackMaterial : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroBackMaterial> _parser = new pb::MessageParser<ReqHeroBackMaterial>(() => new ReqHeroBackMaterial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroBackMaterial> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///回退英雄唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄回退获得材料
  /// </summary>
  public sealed class AckHeroBackMaterial : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroBackMaterial> _parser = new pb::MessageParser<AckHeroBackMaterial>(() => new AckHeroBackMaterial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroBackMaterial> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> itemList_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///获得物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄回退
  /// </summary>
  public sealed class ReqHeroBack : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroBack> _parser = new pb::MessageParser<ReqHeroBack>(() => new ReqHeroBack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroBack> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///回退英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应英雄回退
  /// </summary>
  public sealed class AckHeroBack : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroBack> _parser = new pb::MessageParser<AckHeroBack>(() => new AckHeroBack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroBack> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求阵法信息
  /// </summary>
  public sealed class ReqMatrixInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqMatrixInfo> _parser = new pb::MessageParser<ReqMatrixInfo>(() => new ReqMatrixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMatrixInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///阵法类型0主线1竞技场2冠军赛3天梯赛4段位赛常规
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///英雄ID与阵法位置
  /// </summary>
  public sealed class HeroIdAndPosition : pb::IMessage {
    private static readonly pb::MessageParser<HeroIdAndPosition> _parser = new pb::MessageParser<HeroIdAndPosition>(() => new HeroIdAndPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroIdAndPosition> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    /// <summary>
    ///英雄阵法位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private long playerId_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应阵法信息
  /// </summary>
  public sealed class AckMatrixInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckMatrixInfo> _parser = new pb::MessageParser<AckMatrixInfo>(() => new AckMatrixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMatrixInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///阵法类型0主线1竞技场2冠军赛3天梯赛4段位赛常规
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "matrixId" field.</summary>
    public const int MatrixIdFieldNumber = 2;
    private int matrixId_;
    /// <summary>
    ///当前阵法配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatrixId {
      get { return matrixId_; }
      set {
        matrixId_ = value;
      }
    }

    /// <summary>Field number for the "artifactId" field.</summary>
    public const int ArtifactIdFieldNumber = 3;
    private int artifactId_;
    /// <summary>
    ///当前神器配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArtifactId {
      get { return artifactId_; }
      set {
        artifactId_ = value;
      }
    }

    /// <summary>Field number for the "heroPosition" field.</summary>
    public const int HeroPositionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.HeroIdAndPosition> _repeated_heroPosition_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.HeroIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroIdAndPosition> heroPosition_ = new pbc::RepeatedField<global::Protocol.HeroIdAndPosition>();
    /// <summary>
    ///英雄阵法位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroIdAndPosition> HeroPosition {
      get { return heroPosition_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (MatrixId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatrixId);
      }
      if (ArtifactId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArtifactId);
      }
      heroPosition_.WriteTo(output, _repeated_heroPosition_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (MatrixId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatrixId);
      }
      if (ArtifactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArtifactId);
      }
      size += heroPosition_.CalculateSize(_repeated_heroPosition_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            MatrixId = input.ReadInt32();
            break;
          }
          case 24: {
            ArtifactId = input.ReadInt32();
            break;
          }
          case 34: {
            heroPosition_.AddEntriesFrom(input, _repeated_heroPosition_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求保存阵法
  ///阵法类型0主线1竞技场2冠军赛3天梯赛4段位赛常规
  ///30:无尽试炼综合试炼,31:水系试炼,32:火系试炼,33:风系试炼,34:光暗试炼
  /// </summary>
  public sealed class ReqMatrixSave : pb::IMessage {
    private static readonly pb::MessageParser<ReqMatrixSave> _parser = new pb::MessageParser<ReqMatrixSave>(() => new ReqMatrixSave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMatrixSave> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "matrixId" field.</summary>
    public const int MatrixIdFieldNumber = 2;
    private int matrixId_;
    /// <summary>
    ///当前阵法配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatrixId {
      get { return matrixId_; }
      set {
        matrixId_ = value;
      }
    }

    /// <summary>Field number for the "artifactId" field.</summary>
    public const int ArtifactIdFieldNumber = 3;
    private int artifactId_;
    /// <summary>
    ///当前神器配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArtifactId {
      get { return artifactId_; }
      set {
        artifactId_ = value;
      }
    }

    /// <summary>Field number for the "heroPosition" field.</summary>
    public const int HeroPositionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.HeroIdAndPosition> _repeated_heroPosition_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.HeroIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroIdAndPosition> heroPosition_ = new pbc::RepeatedField<global::Protocol.HeroIdAndPosition>();
    /// <summary>
    ///英雄阵法位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroIdAndPosition> HeroPosition {
      get { return heroPosition_; }
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 5;
    private int tips_;
    /// <summary>
    ///是否显示提示信息0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tips {
      get { return tips_; }
      set {
        tips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (MatrixId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatrixId);
      }
      if (ArtifactId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArtifactId);
      }
      heroPosition_.WriteTo(output, _repeated_heroPosition_codec);
      if (Tips != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Tips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (MatrixId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatrixId);
      }
      if (ArtifactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArtifactId);
      }
      size += heroPosition_.CalculateSize(_repeated_heroPosition_codec);
      if (Tips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            MatrixId = input.ReadInt32();
            break;
          }
          case 24: {
            ArtifactId = input.ReadInt32();
            break;
          }
          case 34: {
            heroPosition_.AddEntriesFrom(input, _repeated_heroPosition_codec);
            break;
          }
          case 40: {
            Tips = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应保存阵法
  /// </summary>
  public sealed class AckMatrixSave : pb::IMessage {
    private static readonly pb::MessageParser<AckMatrixSave> _parser = new pb::MessageParser<AckMatrixSave>(() => new AckMatrixSave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMatrixSave> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求穿戴装备
  /// </summary>
  public sealed class ReqHeroEquip : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroEquip> _parser = new pb::MessageParser<ReqHeroEquip>(() => new ReqHeroEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///装备配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应穿戴装备
  /// </summary>
  public sealed class AckHeroEquip : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroEquip> _parser = new pb::MessageParser<AckHeroEquip>(() => new AckHeroEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求卸下装备
  /// </summary>
  public sealed class ReqHeroUnEquip : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUnEquip> _parser = new pb::MessageParser<ReqHeroUnEquip>(() => new ReqHeroUnEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUnEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///装备配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应卸下装备
  /// </summary>
  public sealed class AckHeroUnEquip : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUnEquip> _parser = new pb::MessageParser<AckHeroUnEquip>(() => new AckHeroUnEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUnEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求一键穿戴或卸下
  /// </summary>
  public sealed class ReqHeroAutoEquip : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroAutoEquip> _parser = new pb::MessageParser<ReqHeroAutoEquip>(() => new ReqHeroAutoEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroAutoEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///1为一键穿戴2为一键卸下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应一键穿戴或卸下
  /// </summary>
  public sealed class AckHeroAutoEquip : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroAutoEquip> _parser = new pb::MessageParser<AckHeroAutoEquip>(() => new AckHeroAutoEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroAutoEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求穿戴符文
  /// </summary>
  public sealed class ReqHeroRune : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroRune> _parser = new pb::MessageParser<ReqHeroRune>(() => new ReqHeroRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private long runeId_;
    /// <summary>
    ///符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    ///符文装备位置1-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (RuneId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RuneId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (RuneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuneId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            RuneId = input.ReadInt64();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应穿戴符文
  /// </summary>
  public sealed class AckHeroRune : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroRune> _parser = new pb::MessageParser<AckHeroRune>(() => new AckHeroRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求卸下符文
  /// </summary>
  public sealed class ReqHeroUnRune : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeroUnRune> _parser = new pb::MessageParser<ReqHeroUnRune>(() => new ReqHeroUnRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeroUnRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private long runeId_;
    /// <summary>
    ///符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (RuneId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RuneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (RuneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            RuneId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应卸下符文
  /// </summary>
  public sealed class AckHeroUnRune : pb::IMessage {
    private static readonly pb::MessageParser<AckHeroUnRune> _parser = new pb::MessageParser<AckHeroUnRune>(() => new AckHeroUnRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHeroUnRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求符文重铸
  /// </summary>
  public sealed class ReqRuneRecast : pb::IMessage {
    private static readonly pb::MessageParser<ReqRuneRecast> _parser = new pb::MessageParser<ReqRuneRecast>(() => new ReqRuneRecast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRuneRecast> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///请求类型0为查询1重铸2为保存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private long runeId_;
    /// <summary>
    ///符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (RuneId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RuneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RuneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            RuneId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应符文重铸
  /// </summary>
  public sealed class AckRuneRecast : pb::IMessage {
    private static readonly pb::MessageParser<AckRuneRecast> _parser = new pb::MessageParser<AckRuneRecast>(() => new AckRuneRecast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckRuneRecast> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///请求类型0为查询1为重铸2为保存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.AttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.AttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrInfo> attrs_ = new pbc::RepeatedField<global::Protocol.AttrInfo>();
    /// <summary>
    ///属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrInfo> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 26: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 34:
          case 32: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
