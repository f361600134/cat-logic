// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBTower.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////试练塔//////////////////////
  ///试练塔排行信息
  /// </summary>
  public sealed class TowerRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<TowerRankInfo> _parser = new pb::MessageParser<TowerRankInfo>(() => new TowerRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorNum" field.</summary>
    public const int FloorNumFieldNumber = 2;
    private int floorNum_;
    /// <summary>
    ///层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloorNum {
      get { return floorNum_; }
      set {
        floorNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (FloorNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FloorNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FloorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            FloorNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TowerFloorInfo : pb::IMessage {
    private static readonly pb::MessageParser<TowerFloorInfo> _parser = new pb::MessageParser<TowerFloorInfo>(() => new TowerFloorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerFloorInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImage" field.</summary>
    public const int HeadImageFieldNumber = 2;
    private int headImage_;
    /// <summary>
    ///头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadImage {
      get { return headImage_; }
      set {
        headImage_ = value;
      }
    }

    /// <summary>Field number for the "objValue" field.</summary>
    public const int ObjValueFieldNumber = 3;
    private int objValue_;
    /// <summary>
    ///通关时间或者战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjValue {
      get { return objValue_; }
      set {
        objValue_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 4;
    private long videoId_;
    /// <summary>
    ///录像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HeadImage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeadImage);
      }
      if (ObjValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ObjValue);
      }
      if (VideoId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadImage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImage);
      }
      if (ObjValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjValue);
      }
      if (VideoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            HeadImage = input.ReadInt32();
            break;
          }
          case 24: {
            ObjValue = input.ReadInt32();
            break;
          }
          case 32: {
            VideoId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求试练塔页面
  /// </summary>
  public sealed class ReqTowerInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqTowerInfo> _parser = new pb::MessageParser<ReqTowerInfo>(() => new ReqTowerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTowerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回试练塔页面
  /// </summary>
  public sealed class AckTowerInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckTowerInfo> _parser = new pb::MessageParser<AckTowerInfo>(() => new AckTowerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTowerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "floorNum" field.</summary>
    public const int FloorNumFieldNumber = 1;
    private int floorNum_;
    /// <summary>
    ///层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloorNum {
      get { return floorNum_; }
      set {
        floorNum_ = value;
      }
    }

    /// <summary>Field number for the "lastFreeTime" field.</summary>
    public const int LastFreeTimeFieldNumber = 2;
    private int lastFreeTime_;
    /// <summary>
    ///剩余免费挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastFreeTime {
      get { return lastFreeTime_; }
      set {
        lastFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBuyTime" field.</summary>
    public const int LastBuyTimeFieldNumber = 3;
    private int lastBuyTime_;
    /// <summary>
    ///剩余购买挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBuyTime {
      get { return lastBuyTime_; }
      set {
        lastBuyTime_ = value;
      }
    }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.TowerRankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TowerRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TowerRankInfo> rankInfo_ = new pbc::RepeatedField<global::Protocol.TowerRankInfo>();
    /// <summary>
    ///排行信息(返回前三展示)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TowerRankInfo> RankInfo {
      get { return rankInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FloorNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FloorNum);
      }
      if (LastFreeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastFreeTime);
      }
      if (LastBuyTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastBuyTime);
      }
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FloorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorNum);
      }
      if (LastFreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastFreeTime);
      }
      if (LastBuyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBuyTime);
      }
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FloorNum = input.ReadInt32();
            break;
          }
          case 16: {
            LastFreeTime = input.ReadInt32();
            break;
          }
          case 24: {
            LastBuyTime = input.ReadInt32();
            break;
          }
          case 34: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求层数信息
  /// </summary>
  public sealed class ReqFloorInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqFloorInfo> _parser = new pb::MessageParser<ReqFloorInfo>(() => new ReqFloorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqFloorInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///层数配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回层数信息
  /// </summary>
  public sealed class AckFloorInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckFloorInfo> _parser = new pb::MessageParser<AckFloorInfo>(() => new AckFloorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckFloorInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "fastPass" field.</summary>
    public const int FastPassFieldNumber = 1;
    private global::Protocol.TowerFloorInfo fastPass_;
    /// <summary>
    ///最快通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TowerFloorInfo FastPass {
      get { return fastPass_; }
      set {
        fastPass_ = value;
      }
    }

    /// <summary>Field number for the "minPowerPass" field.</summary>
    public const int MinPowerPassFieldNumber = 2;
    private global::Protocol.TowerFloorInfo minPowerPass_;
    /// <summary>
    ///最低战力通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TowerFloorInfo MinPowerPass {
      get { return minPowerPass_; }
      set {
        minPowerPass_ = value;
      }
    }

    /// <summary>Field number for the "myPass" field.</summary>
    public const int MyPassFieldNumber = 3;
    private global::Protocol.TowerFloorInfo myPass_;
    /// <summary>
    ///自己通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TowerFloorInfo MyPass {
      get { return myPass_; }
      set {
        myPass_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 4;
    private int configId_;
    /// <summary>
    ///层数配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fastPass_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FastPass);
      }
      if (minPowerPass_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinPowerPass);
      }
      if (myPass_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyPass);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fastPass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FastPass);
      }
      if (minPowerPass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPowerPass);
      }
      if (myPass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyPass);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fastPass_ == null) {
              fastPass_ = new global::Protocol.TowerFloorInfo();
            }
            input.ReadMessage(fastPass_);
            break;
          }
          case 18: {
            if (minPowerPass_ == null) {
              minPowerPass_ = new global::Protocol.TowerFloorInfo();
            }
            input.ReadMessage(minPowerPass_);
            break;
          }
          case 26: {
            if (myPass_ == null) {
              myPass_ = new global::Protocol.TowerFloorInfo();
            }
            input.ReadMessage(myPass_);
            break;
          }
          case 32: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取通关奖励页面
  /// </summary>
  public sealed class ReqGetTowerPage : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetTowerPage> _parser = new pb::MessageParser<ReqGetTowerPage>(() => new ReqGetTowerPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetTowerPage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回领取通关奖励页面
  /// </summary>
  public sealed class AckGetTowerPage : pb::IMessage {
    private static readonly pb::MessageParser<AckGetTowerPage> _parser = new pb::MessageParser<AckGetTowerPage>(() => new AckGetTowerPage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetTowerPage> Parser { get { return _parser; } }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励列表		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取通关奖励
  /// </summary>
  public sealed class ReqGetTowerReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetTowerReward> _parser = new pb::MessageParser<ReqGetTowerReward>(() => new ReqGetTowerReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetTowerReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///层数配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取通关奖励
  /// </summary>
  public sealed class AckGetTowerReward : pb::IMessage {
    private static readonly pb::MessageParser<AckGetTowerReward> _parser = new pb::MessageParser<AckGetTowerReward>(() => new AckGetTowerReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetTowerReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求挑战boss
  /// </summary>
  public sealed class ReqFightTower : pb::IMessage {
    private static readonly pb::MessageParser<ReqFightTower> _parser = new pb::MessageParser<ReqFightTower>(() => new ReqFightTower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqFightTower> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///挑战类型(1=挑战,2=扫荡)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///目标关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回挑战boss
  /// </summary>
  public sealed class AckFightTower : pb::IMessage {
    private static readonly pb::MessageParser<AckFightTower> _parser = new pb::MessageParser<AckFightTower>(() => new AckFightTower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckFightTower> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///当前关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买挑战次数
  /// </summary>
  public sealed class ReqBuyTowerTimes : pb::IMessage {
    private static readonly pb::MessageParser<ReqBuyTowerTimes> _parser = new pb::MessageParser<ReqBuyTowerTimes>(() => new ReqBuyTowerTimes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyTowerTimes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///是否立即挑战(0=不挑战,1=挑战)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回购买挑战次数
  /// </summary>
  public sealed class AckBuyTowerTimes : pb::IMessage {
    private static readonly pb::MessageParser<AckBuyTowerTimes> _parser = new pb::MessageParser<AckBuyTowerTimes>(() => new AckBuyTowerTimes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBuyTowerTimes> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "freeTimes" field.</summary>
    public const int FreeTimesFieldNumber = 2;
    private int freeTimes_;
    /// <summary>
    ///剩余免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "buyTimes" field.</summary>
    public const int BuyTimesFieldNumber = 3;
    private int buyTimes_;
    /// <summary>
    ///剩余可购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTimes {
      get { return buyTimes_; }
      set {
        buyTimes_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///是否立即挑战(0=不挑战,1=挑战)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeTimes);
      }
      if (BuyTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTimes);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      if (BuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTimes);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTimes = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
