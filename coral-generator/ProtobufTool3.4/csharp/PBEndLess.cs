// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBEndless.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///无尽试炼协议体信息
  /// </summary>
  public sealed class PBEndlessInfo : pb::IMessage {
    private static readonly pb::MessageParser<PBEndlessInfo> _parser = new pb::MessageParser<PBEndlessInfo>(() => new PBEndlessInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBEndlessInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "controlConfigId" field.</summary>
    public const int ControlConfigIdFieldNumber = 1;
    private int controlConfigId_;
    /// <summary>
    ///试炼配置id,对应无尽试炼控制表配置id,表中1:综合试炼,2:风系试炼...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlConfigId {
      get { return controlConfigId_; }
      set {
        controlConfigId_ = value;
      }
    }

    /// <summary>Field number for the "maxStage" field.</summary>
    public const int MaxStageFieldNumber = 2;
    private int maxStage_;
    /// <summary>
    ///个人当前最高记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxStage {
      get { return maxStage_; }
      set {
        maxStage_ = value;
      }
    }

    /// <summary>Field number for the "todayInitStage" field.</summary>
    public const int TodayInitStageFieldNumber = 4;
    private int todayInitStage_;
    /// <summary>
    ///int32 rewardConfId = 3; //当前可领取奖励配置id,对应无尽试炼配置id,无奖励可领返回-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayInitStage {
      get { return todayInitStage_; }
      set {
        todayInitStage_ = value;
      }
    }

    /// <summary>Field number for the "resetCountdown" field.</summary>
    public const int ResetCountdownFieldNumber = 5;
    private int resetCountdown_;
    /// <summary>
    ///重置倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetCountdown {
      get { return resetCountdown_; }
      set {
        resetCountdown_ = value;
      }
    }

    /// <summary>Field number for the "passStageCount" field.</summary>
    public const int PassStageCountFieldNumber = 6;
    private long passStageCount_;
    /// <summary>
    ///今日已通关关卡数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PassStageCount {
      get { return passStageCount_; }
      set {
        passStageCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlConfigId);
      }
      if (MaxStage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxStage);
      }
      if (TodayInitStage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TodayInitStage);
      }
      if (ResetCountdown != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResetCountdown);
      }
      if (PassStageCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PassStageCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlConfigId);
      }
      if (MaxStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStage);
      }
      if (TodayInitStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayInitStage);
      }
      if (ResetCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetCountdown);
      }
      if (PassStageCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PassStageCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ControlConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            MaxStage = input.ReadInt32();
            break;
          }
          case 32: {
            TodayInitStage = input.ReadInt32();
            break;
          }
          case 40: {
            ResetCountdown = input.ReadInt32();
            break;
          }
          case 48: {
            PassStageCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///无尽试炼首通信息
  /// </summary>
  public sealed class PBEndlessFirstPassInfo : pb::IMessage {
    private static readonly pb::MessageParser<PBEndlessFirstPassInfo> _parser = new pb::MessageParser<PBEndlessFirstPassInfo>(() => new PBEndlessFirstPassInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBEndlessFirstPassInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "controlConfigId" field.</summary>
    public const int ControlConfigIdFieldNumber = 1;
    private int controlConfigId_;
    /// <summary>
    ///试炼配置id,对应无尽试炼控制表配置id,表中1:综合试炼,2:风系试炼...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlConfigId {
      get { return controlConfigId_; }
      set {
        controlConfigId_ = value;
      }
    }

    /// <summary>Field number for the "stateInfo" field.</summary>
    public const int StateInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PBRewardStateInfo> _repeated_stateInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PBRewardStateInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBRewardStateInfo> stateInfo_ = new pbc::RepeatedField<global::Protocol.PBRewardStateInfo>();
    /// <summary>
    ///首通奖励列表信息,仅发已领取状态,可领取状态.剩余表示未激活状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBRewardStateInfo> StateInfo {
      get { return stateInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlConfigId);
      }
      stateInfo_.WriteTo(output, _repeated_stateInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlConfigId);
      }
      size += stateInfo_.CalculateSize(_repeated_stateInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ControlConfigId = input.ReadInt32();
            break;
          }
          case 18: {
            stateInfo_.AddEntriesFrom(input, _repeated_stateInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽试炼信息
  /// </summary>
  public sealed class ReqEndlessInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessInfo> _parser = new pb::MessageParser<ReqEndlessInfo>(() => new ReqEndlessInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回无尽试炼信息
  /// </summary>
  public sealed class AckEndlessInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessInfo> _parser = new pb::MessageParser<AckEndlessInfo>(() => new AckEndlessInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageInfo" field.</summary>
    public const int StageInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.PBEndlessInfo> _repeated_stageInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.PBEndlessInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBEndlessInfo> stageInfo_ = new pbc::RepeatedField<global::Protocol.PBEndlessInfo>();
    /// <summary>
    ///无尽试炼信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBEndlessInfo> StageInfo {
      get { return stageInfo_; }
    }

    /// <summary>Field number for the "supportHeroId" field.</summary>
    public const int SupportHeroIdFieldNumber = 2;
    private long supportHeroId_;
    /// <summary>
    ///我选择其他玩家支援的援军
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SupportHeroId {
      get { return supportHeroId_; }
      set {
        supportHeroId_ = value;
      }
    }

    /// <summary>Field number for the "enterHeroId" field.</summary>
    public const int EnterHeroIdFieldNumber = 3;
    private long enterHeroId_;
    /// <summary>
    ///我上阵英雄支援其他玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterHeroId {
      get { return enterHeroId_; }
      set {
        enterHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stageInfo_.WriteTo(output, _repeated_stageInfo_codec);
      if (SupportHeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SupportHeroId);
      }
      if (EnterHeroId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EnterHeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stageInfo_.CalculateSize(_repeated_stageInfo_codec);
      if (SupportHeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SupportHeroId);
      }
      if (EnterHeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterHeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stageInfo_.AddEntriesFrom(input, _repeated_stageInfo_codec);
            break;
          }
          case 16: {
            SupportHeroId = input.ReadInt64();
            break;
          }
          case 24: {
            EnterHeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽试炼首通奖励
  /// </summary>
  public sealed class ReqEndlessFirstPassReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessFirstPassReward> _parser = new pb::MessageParser<ReqEndlessFirstPassReward>(() => new ReqEndlessFirstPassReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessFirstPassReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "controlConfigId" field.</summary>
    public const int ControlConfigIdFieldNumber = 1;
    private int controlConfigId_;
    /// <summary>
    ///无尽试炼控制表配置id, 表中1:综合试炼,2:风系试炼...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlConfigId {
      get { return controlConfigId_; }
      set {
        controlConfigId_ = value;
      }
    }

    /// <summary>Field number for the "stageConfigId" field.</summary>
    public const int StageConfigIdFieldNumber = 2;
    private int stageConfigId_;
    /// <summary>
    ///无尽试炼关卡id,用于服务器定位具体奖励配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageConfigId {
      get { return stageConfigId_; }
      set {
        stageConfigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlConfigId);
      }
      if (StageConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StageConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlConfigId);
      }
      if (StageConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ControlConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            StageConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回无尽试炼首通奖励
  /// </summary>
  public sealed class AckEndlessFirstPassReward : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessFirstPassReward> _parser = new pb::MessageParser<AckEndlessFirstPassReward>(() => new AckEndlessFirstPassReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessFirstPassReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽试炼支援列表
  /// </summary>
  public sealed class ReqEndlessSupportQueue : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessSupportQueue> _parser = new pb::MessageParser<ReqEndlessSupportQueue>(() => new ReqEndlessSupportQueue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessSupportQueue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///这里不需要为了状态包装武将结构
  ///如果服务器下发的支援武将id,存在于列表之中,状态显示已选择,战力超过120%显示超出状态,否则显示选择按钮
  ///返回无尽试炼支援列表
  /// </summary>
  public sealed class AckEndlessSupportQueue : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessSupportQueue> _parser = new pb::MessageParser<AckEndlessSupportQueue>(() => new AckEndlessSupportQueue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessSupportQueue> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroInfo" field.</summary>
    public const int HeroInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_heroInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> heroInfo_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///返回英雄简单信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> HeroInfo {
      get { return heroInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroInfo_.WriteTo(output, _repeated_heroInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroInfo_.CalculateSize(_repeated_heroInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            heroInfo_.AddEntriesFrom(input, _repeated_heroInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求确认选择其他玩家支援武将
  /// </summary>
  public sealed class ReqEndlessSupportConfirm : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessSupportConfirm> _parser = new pb::MessageParser<ReqEndlessSupportConfirm>(() => new ReqEndlessSupportConfirm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessSupportConfirm> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回确确认选择其他玩家支援武将, 返回玩家无尽试炼信息
  /// </summary>
  public sealed class AckEndlessSupportConfirm : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessSupportConfirm> _parser = new pb::MessageParser<AckEndlessSupportConfirm>(() => new AckEndlessSupportConfirm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessSupportConfirm> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求上阵自己的支援武将,确认后不可更改
  /// </summary>
  public sealed class ReqEndlessHeroEnter : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessHeroEnter> _parser = new pb::MessageParser<ReqEndlessHeroEnter>(() => new ReqEndlessHeroEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessHeroEnter> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///武将id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回上阵自己的支援武将
  /// </summary>
  public sealed class AckEndlessHeroEnter : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessHeroEnter> _parser = new pb::MessageParser<AckEndlessHeroEnter>(() => new AckEndlessHeroEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessHeroEnter> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///点击开战,请求buff列表,服务器记录今日挑战类型
  /// </summary>
  public sealed class ReqEndlessBuffInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessBuffInfo> _parser = new pb::MessageParser<ReqEndlessBuffInfo>(() => new ReqEndlessBuffInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessBuffInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "controlConfigId" field.</summary>
    public const int ControlConfigIdFieldNumber = 1;
    private int controlConfigId_;
    /// <summary>
    ///无尽试炼控制表配置id, 表中1:综合试炼,2:风系试炼...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlConfigId {
      get { return controlConfigId_; }
      set {
        controlConfigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ControlConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送buff列表
  /// </summary>
  public sealed class AckEndlessBuffInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessBuffInfo> _parser = new pb::MessageParser<AckEndlessBuffInfo>(() => new AckEndlessBuffInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessBuffInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_buffList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> buffList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "heroList" field.</summary>
    public const int HeroListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.HeroInfo> _repeated_heroList_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.HeroInfo> heroList_ = new pbc::RepeatedField<global::Protocol.HeroInfo>();
    /// <summary>
    ///英雄列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.HeroInfo> HeroList {
      get { return heroList_; }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private int stageId_;
    /// <summary>
    ///即将挑战的关卡id,用于显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "matrixId" field.</summary>
    public const int MatrixIdFieldNumber = 4;
    private int matrixId_;
    /// <summary>
    ///阵法配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatrixId {
      get { return matrixId_; }
      set {
        matrixId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buffList_.WriteTo(output, _repeated_buffList_codec);
      heroList_.WriteTo(output, _repeated_heroList_codec);
      if (StageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StageId);
      }
      if (MatrixId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MatrixId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      size += heroList_.CalculateSize(_repeated_heroList_codec);
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      if (MatrixId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatrixId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 18: {
            heroList_.AddEntriesFrom(input, _repeated_heroList_codec);
            break;
          }
          case 24: {
            StageId = input.ReadInt32();
            break;
          }
          case 32: {
            MatrixId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///选择buff,服务器直接进入战斗
  /// </summary>
  public sealed class ReqEndlessBuffChoose : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessBuffChoose> _parser = new pb::MessageParser<ReqEndlessBuffChoose>(() => new ReqEndlessBuffChoose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessBuffChoose> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 2;
    private int buffId_;
    /// <summary>
    ///int32 controlConfigId = 1; //无尽试炼控制表配置id, 表中1:综合试炼,2:风系试炼...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuffId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            BuffId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应返回buff
  /// </summary>
  public sealed class AckEndlessBuffChoose : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessBuffChoose> _parser = new pb::MessageParser<AckEndlessBuffChoose>(() => new AckEndlessBuffChoose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessBuffChoose> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求取消选择其他玩家支援武将
  /// </summary>
  public sealed class ReqEndlessSupportCancel : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndlessSupportCancel> _parser = new pb::MessageParser<ReqEndlessSupportCancel>(() => new ReqEndlessSupportCancel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndlessSupportCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回取消选择其他玩家支援武将, 返回玩家无尽试炼信息
  /// </summary>
  public sealed class AckEndlessSupportCancel : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessSupportCancel> _parser = new pb::MessageParser<AckEndlessSupportCancel>(() => new AckEndlessSupportCancel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessSupportCancel> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回无尽试炼首通奖励列表信息
  /// </summary>
  public sealed class AckEndlessFirstPassList : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessFirstPassList> _parser = new pb::MessageParser<AckEndlessFirstPassList>(() => new AckEndlessFirstPassList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessFirstPassList> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.PBEndlessFirstPassInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.PBEndlessFirstPassInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBEndlessFirstPassInfo> infos_ = new pbc::RepeatedField<global::Protocol.PBEndlessFirstPassInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBEndlessFirstPassInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新无尽试炼援军信息
  ///1. 进入无尽试炼模块主动推送, 2.选择支援武将信息变动时推送
  /// </summary>
  public sealed class AckEndlessSupportHeroUpdate : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessSupportHeroUpdate> _parser = new pb::MessageParser<AckEndlessSupportHeroUpdate>(() => new AckEndlessSupportHeroUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessSupportHeroUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroInfo" field.</summary>
    public const int HeroInfoFieldNumber = 1;
    private global::Protocol.HeroInfo heroInfo_;
    /// <summary>
    ///好友支援的武将信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HeroInfo HeroInfo {
      get { return heroInfo_; }
      set {
        heroInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeroInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (heroInfo_ == null) {
              heroInfo_ = new global::Protocol.HeroInfo();
            }
            input.ReadMessage(heroInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新无尽试炼战斗信息
  /// </summary>
  public sealed class AckEndlessFightInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckEndlessFightInfo> _parser = new pb::MessageParser<AckEndlessFightInfo>(() => new AckEndlessFightInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndlessFightInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "isFirstFight" field.</summary>
    public const int IsFirstFightFieldNumber = 1;
    private bool isFirstFight_;
    /// <summary>
    ///是否是第一次战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstFight {
      get { return isFirstFight_; }
      set {
        isFirstFight_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> itemList_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "selectBuffId" field.</summary>
    public const int SelectBuffIdFieldNumber = 3;
    private int selectBuffId_;
    /// <summary>
    ///选择buff的配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectBuffId {
      get { return selectBuffId_; }
      set {
        selectBuffId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFirstFight != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFirstFight);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (SelectBuffId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SelectBuffId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFirstFight != false) {
        size += 1 + 1;
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (SelectBuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectBuffId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFirstFight = input.ReadBool();
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 24: {
            SelectBuffId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
