// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBGodEquip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  public sealed class GodEquipInfo : pb::IMessage {
    private static readonly pb::MessageParser<GodEquipInfo> _parser = new pb::MessageParser<GodEquipInfo>(() => new GodEquipInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GodEquipInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "godEquipId" field.</summary>
    public const int GodEquipIdFieldNumber = 1;
    private long godEquipId_;
    /// <summary>
    ///神装Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GodEquipId {
      get { return godEquipId_; }
      set {
        godEquipId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.AttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.AttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrInfo> attrs_ = new pbc::RepeatedField<global::Protocol.AttrInfo>();
    /// <summary>
    ///随机属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrInfo> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 4;
    private string planName_ = "";
    /// <summary>
    ///所属方案名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GodEquipId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GodEquipId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (PlanName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GodEquipId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GodEquipId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GodEquipId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 34: {
            PlanName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上阵方案简要信息
  /// </summary>
  public sealed class GodEquiptMarixInfo : pb::IMessage {
    private static readonly pb::MessageParser<GodEquiptMarixInfo> _parser = new pb::MessageParser<GodEquiptMarixInfo>(() => new GodEquiptMarixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GodEquiptMarixInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "indxId" field.</summary>
    public const int IndxIdFieldNumber = 1;
    private int indxId_;
    /// <summary>
    ///方案序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndxId {
      get { return indxId_; }
      set {
        indxId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///方案名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "godEquips" field.</summary>
    public const int GodEquipsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.GodEquipInfo> _repeated_godEquips_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.GodEquipInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GodEquipInfo> godEquips_ = new pbc::RepeatedField<global::Protocol.GodEquipInfo>();
    /// <summary>
    ///神装列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GodEquipInfo> GodEquips {
      get { return godEquips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IndxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IndxId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      godEquips_.WriteTo(output, _repeated_godEquips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IndxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndxId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += godEquips_.CalculateSize(_repeated_godEquips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IndxId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            godEquips_.AddEntriesFrom(input, _repeated_godEquips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///英雄神装信息
  /// </summary>
  public sealed class ReqGodEquipInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipInfo> _parser = new pb::MessageParser<ReqGodEquipInfo>(() => new ReqGodEquipInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipInfo> _parser = new pb::MessageParser<AckGodEquipInfo>(() => new AckGodEquipInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "godEquips" field.</summary>
    public const int GodEquipsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.GodEquipInfo> _repeated_godEquips_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.GodEquipInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GodEquipInfo> godEquips_ = new pbc::RepeatedField<global::Protocol.GodEquipInfo>();
    /// <summary>
    ///英雄神装列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GodEquipInfo> GodEquips {
      get { return godEquips_; }
    }

    /// <summary>Field number for the "godEquipMarixInfos" field.</summary>
    public const int GodEquipMarixInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.GodEquiptMarixInfo> _repeated_godEquipMarixInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.GodEquiptMarixInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GodEquiptMarixInfo> godEquipMarixInfos_ = new pbc::RepeatedField<global::Protocol.GodEquiptMarixInfo>();
    /// <summary>
    ///神装管理列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GodEquiptMarixInfo> GodEquipMarixInfos {
      get { return godEquipMarixInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      godEquips_.WriteTo(output, _repeated_godEquips_codec);
      godEquipMarixInfos_.WriteTo(output, _repeated_godEquipMarixInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += godEquips_.CalculateSize(_repeated_godEquips_codec);
      size += godEquipMarixInfos_.CalculateSize(_repeated_godEquipMarixInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            godEquips_.AddEntriesFrom(input, _repeated_godEquips_codec);
            break;
          }
          case 18: {
            godEquipMarixInfos_.AddEntriesFrom(input, _repeated_godEquipMarixInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///神装洗练
  /// </summary>
  public sealed class ReqGodEquipScour : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipScour> _parser = new pb::MessageParser<ReqGodEquipScour>(() => new ReqGodEquipScour());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipScour> Parser { get { return _parser; } }

    /// <summary>Field number for the "godEquipId" field.</summary>
    public const int GodEquipIdFieldNumber = 1;
    private long godEquipId_;
    /// <summary>
    ///神装Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GodEquipId {
      get { return godEquipId_; }
      set {
        godEquipId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GodEquipId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GodEquipId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GodEquipId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GodEquipId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GodEquipId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipScour : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipScour> _parser = new pb::MessageParser<AckGodEquipScour>(() => new AckGodEquipScour());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipScour> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///神装装配
  /// </summary>
  public sealed class ReqGodEquipAssemble : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipAssemble> _parser = new pb::MessageParser<ReqGodEquipAssemble>(() => new ReqGodEquipAssemble());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipAssemble> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private int planIndex_;
    /// <summary>
    ///方案序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            PlanIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipAssemble : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipAssemble> _parser = new pb::MessageParser<AckGodEquipAssemble>(() => new AckGodEquipAssemble());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipAssemble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///神装方案改名
  /// </summary>
  public sealed class ReqGodEquipMarixNameChange : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipMarixNameChange> _parser = new pb::MessageParser<ReqGodEquipMarixNameChange>(() => new ReqGodEquipMarixNameChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipMarixNameChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private int planId_;
    /// <summary>
    ///方案id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanId {
      get { return planId_; }
      set {
        planId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///方案名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipMarixNameChange : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipMarixNameChange> _parser = new pb::MessageParser<AckGodEquipMarixNameChange>(() => new AckGodEquipMarixNameChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipMarixNameChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///神装穿戴  单件穿戴 如果选择方案管理中的套装成一套则自动显示使用该方案
  /// </summary>
  public sealed class ReqGodEquipWear : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipWear> _parser = new pb::MessageParser<ReqGodEquipWear>(() => new ReqGodEquipWear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipWear> Parser { get { return _parser; } }

    /// <summary>Field number for the "godEquipId" field.</summary>
    public const int GodEquipIdFieldNumber = 1;
    private long godEquipId_;
    /// <summary>
    ///神装Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GodEquipId {
      get { return godEquipId_; }
      set {
        godEquipId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GodEquipId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GodEquipId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GodEquipId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GodEquipId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GodEquipId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回装备列表
  /// </summary>
  public sealed class AckGodEquipWear : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipWear> _parser = new pb::MessageParser<AckGodEquipWear>(() => new AckGodEquipWear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipWear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///神装卸下(套装管理一键卸下)
  /// </summary>
  public sealed class ReqGodEquipTakeOff : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipTakeOff> _parser = new pb::MessageParser<ReqGodEquipTakeOff>(() => new ReqGodEquipTakeOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipTakeOff> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///单件卸下1，一键卸下2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "godEquipId" field.</summary>
    public const int GodEquipIdFieldNumber = 2;
    private long godEquipId_;
    /// <summary>
    ///神装Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GodEquipId {
      get { return godEquipId_; }
      set {
        godEquipId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (GodEquipId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GodEquipId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (GodEquipId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GodEquipId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            GodEquipId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipTakeOff : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipTakeOff> _parser = new pb::MessageParser<AckGodEquipTakeOff>(() => new AckGodEquipTakeOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipTakeOff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///祈福神装
  /// </summary>
  public sealed class ReqGodEquipPray : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipPray> _parser = new pb::MessageParser<ReqGodEquipPray>(() => new ReqGodEquipPray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipPray> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///祈福类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///祈福次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipPray : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipPray> _parser = new pb::MessageParser<AckGodEquipPray>(() => new AckGodEquipPray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipPray> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///祈福列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///选择心愿单
  /// </summary>
  public sealed class ReqGodEquipPrayWish : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipPrayWish> _parser = new pb::MessageParser<ReqGodEquipPrayWish>(() => new ReqGodEquipPrayWish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipPrayWish> Parser { get { return _parser; } }

    /// <summary>Field number for the "configIds" field.</summary>
    public const int ConfigIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_configIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> configIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///心愿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ConfigIds {
      get { return configIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configIds_.WriteTo(output, _repeated_configIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configIds_.CalculateSize(_repeated_configIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            configIds_.AddEntriesFrom(input, _repeated_configIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipPrayWish : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipPrayWish> _parser = new pb::MessageParser<AckGodEquipPrayWish>(() => new AckGodEquipPrayWish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipPrayWish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///祈福积分领取奖励
  /// </summary>
  public sealed class ReqGodEquipPrayIntegral : pb::IMessage {
    private static readonly pb::MessageParser<ReqGodEquipPrayIntegral> _parser = new pb::MessageParser<ReqGodEquipPrayIntegral>(() => new ReqGodEquipPrayIntegral());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGodEquipPrayIntegral> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGodEquipPrayIntegral : pb::IMessage {
    private static readonly pb::MessageParser<AckGodEquipPrayIntegral> _parser = new pb::MessageParser<AckGodEquipPrayIntegral>(() => new AckGodEquipPrayIntegral());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGodEquipPrayIntegral> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
