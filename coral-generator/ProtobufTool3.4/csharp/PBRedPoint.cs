// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBRedPoint.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Enums
  /// <summary>
  ///红点模块枚举定义
  /// </summary>
  public enum RedPointConstant {
    /// <summary>
    ///占一个0的位置
    /// </summary>
    RedNone = 0,
    /// <summary>
    ///	精灵商点	免费刷新次数全满
    /// </summary>
    RedPointFairyStore = 11,
    /// <summary>
    ///	英雄召唤	有免费召唤次数
    /// </summary>
    RedPointHeroCall = 7,
    /// <summary>
    ///	锻造屋(装备锻造）	有可合成的装备
    /// </summary>
    RedPointForgeHouse = 901,
    /// <summary>
    ///竞技场	有免费挑战次数
    /// </summary>
    RedPointArenaFree = 140101,
    /// <summary>
    ///竞技场	挑战记录有新消息
    /// </summary>
    RedPointAranaRecord = 140102,
    /// <summary>
    ///试炼塔	有免费挑战次数
    /// </summary>
    RedPointTrialTower = 15,
    /// <summary>
    ///英雄神殿	（可合成的英雄）合成的英雄材料满足时
    /// </summary>
    RedPointTempleHeroes = 601,
    /// <summary>
    ///神界冒险	未选择英雄进入神界冒险
    /// </summary>
    RedPointDivineAdventure = 200101,
    /// <summary>
    ///神界冒险	神界冒险有宝箱可以领取
    /// </summary>
    RedPointDivineAdventureBox = 200102,
    /// <summary>
    ///元素圣殿	有可挑战的次数
    /// </summary>
    RedPointTempleElements = 2002,
    /// <summary>
    ///勇者之路	当今日有剩余挑战次
    /// </summary>
    RedPointWayBrave = 2004,
    /// <summary>
    ///天界副本	当每日奖励未领取
    /// </summary>
    RedPointCelestialcopyReward = 200301,
    /// <summary>
    ///天界副本	目标奖励未领取
    /// </summary>
    RedPointCelestialcopyTarget = 200302,
    /// <summary>
    ///天界副本	天界祈祷有免费次数
    /// </summary>
    RedPointCelestialcopyFree = 200303,
    /// <summary>
    ///任务	当有奖励可以领取（宝箱、任务）
    /// </summary>
    RedPointTaskReward = 13,
    /// <summary>
    ///排行榜	当有奖励可以领取
    /// </summary>
    RedPointRanklistReward = 24,
    /// <summary>
    ///穿戴装备	英雄有可穿戴的装备或可替换的高阶装备
    /// </summary>
    RedPointOnEquip = 10101,
    /// <summary>
    ///穿戴符文	英雄有可穿戴的符文
    /// </summary>
    RedPointOnSymbol = 10102,
    /// <summary>
    ///天赋领悟	英雄有可升级的天赋技能
    /// </summary>
    RedPointTalent = 10104,
    /// <summary>
    ///升星	英雄有可升星、升星格的（材料、英雄材料）
    /// </summary>
    RedPointUpStar = 10103,
    /// <summary>
    ///上阵的英雄	上阵的英雄有可“穿戴、替换的装备，穿戴的符文，升级的天赋技能，升星
    /// </summary>
    RedPointOnHeros = 10105,
    /// <summary>
    ///图书馆	收集到未拥有的新英雄
    /// </summary>
    RedPointLibrary = 105,
    /// <summary>
    ///精灵孵化	精灵蛋孵化完成
    /// </summary>
    RedPointElveshatchCompleted = 1030101,
    /// <summary>
    ///精灵孵化	灵窝可放入精灵蛋
    /// </summary>
    RedPointElveshatchEgg = 1030102,
    /// <summary>
    ///精灵复苏	有精灵可以上阵
    /// </summary>
    RedPointElveshatchRelive = 1030201,
    /// <summary>
    ///精灵复苏	材料满足条件可以升级
    /// </summary>
    RedPointElveshatchUpElements = 1030202,
    /// <summary>
    ///精灵召唤	有免费召唤次数
    /// </summary>
    RedPointElfSummonFree = 1030301,
    /// <summary>
    ///精灵召唤	有可领取的积分奖励
    /// </summary>
    RedPointElfSummonScores = 1030302,
    /// <summary>
    ///背包--碎片	有英雄碎片可以合成
    /// </summary>
    RedPointElfSummonMerged = 203,
    /// <summary>
    ///日常副本	有免费挑战次数
    /// </summary>
    RedPointElfSummonChallenge = 301,
    /// <summary>
    ///无尽试炼	有免费挑战次数
    /// </summary>
    RedPointEndlesstrial = 302,
    /// <summary>
    ///位面征站	有可挑战的关卡
    /// </summary>
    RedPointPlaneSignStation = 303,
    /// <summary>
    ///公会捐献	公会捐献有捐献次数
    /// </summary>
    RedPointGuilddonationCounts = 40401,
    /// <summary>
    ///公会捐献	捐献活跃度奖励可以领取
    /// </summary>
    RedPointGuilddonationReward = 40402,
    /// <summary>
    ///公会副本	有免费挑战次数
    /// </summary>
    RedPointGuildCopy = 403,
    /// <summary>
    ///公会战	有可挑战次数
    /// </summary>
    RedPointGuildFightChallengeCounts = 4081,
    /// <summary>
    ///公会战	可领取战果宝箱
    /// </summary>
    RedPointGuildFightBox = 4082,
    /// <summary>
    ///公会技能	有技能可升级
    /// </summary>
    RedPointGuildSkillUp = 406,
    /// <summary>
    ///公会活跃	有升级奖励可领取
    /// </summary>
    RedPointGuildActiveReward = 401,
    /// <summary>
    ///公会红包	有可抢的红包
    /// </summary>
    RedPointGuildRedPackage = 407,
    /// <summary>
    ///神器升级	材料足够满足升级
    /// </summary>
    RedPointArtifactUp = 501,
    /// <summary>
    ///神器技能	材料足够满足升级
    /// </summary>
    RedPointArtifactSkillUp = 502,
    /// <summary>
    ///神器精炼	材料足够满足升级
    /// </summary>
    RedPointArtifactRefine = 503,
    /// <summary>
    ///神器圣印	有材料可以使用
    /// </summary>
    RedPointArtifactSacredseal = 504,
    /// <summary>
    ///vip	vip特权奖励满足购买条件
    /// </summary>
    RedPointVipPay = 2502,
    /// <summary>
    ///每日礼包	免费每日礼包可领取
    /// </summary>
    RedPointDailyGift = 2503,
    /// <summary>
    ///每日签到	有可领取的每日奖励
    /// </summary>
    RedPointDailySign = 2601,
    /// <summary>
    ///好友礼物红点
    /// </summary>
    RedPointFriendGift = 2202,
    /// <summary>
    ///好友申请红点
    /// </summary>
    RedPointFriendApply = 2203,
    /// <summary>
    ///主线副本通关
    /// </summary>
    RedPointDungeonFight = 2103,
    /// <summary>
    ///邮件红点
    /// </summary>
    RedPointMail = 2701,
    /// <summary>
    ///聊天红点
    /// </summary>
    RedPointChat = 2801,
  }

  #endregion

  #region Messages
  /// <summary>
  ///红点消息推送事件,给前端的
  /// </summary>
  public sealed class RedPointEvent : pb::IMessage {
    private static readonly pb::MessageParser<RedPointEvent> _parser = new pb::MessageParser<RedPointEvent>(() => new RedPointEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedPointEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "red_points" field.</summary>
    public const int RedPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.RedPoint> _repeated_redPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.RedPoint.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RedPoint> redPoints_ = new pbc::RepeatedField<global::Protocol.RedPoint>();
    /// <summary>
    ///所有的红点集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RedPoint> RedPoints {
      get { return redPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      redPoints_.WriteTo(output, _repeated_redPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += redPoints_.CalculateSize(_repeated_redPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            redPoints_.AddEntriesFrom(input, _repeated_redPoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///红点消息结构
  /// </summary>
  public sealed class RedPoint : pb::IMessage {
    private static readonly pb::MessageParser<RedPoint> _parser = new pb::MessageParser<RedPoint>(() => new RedPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedPoint> Parser { get { return _parser; } }

    /// <summary>Field number for the "module_type" field.</summary>
    public const int ModuleTypeFieldNumber = 1;
    private global::Protocol.RedPointConstant moduleType_ = 0;
    /// <summary>
    ///模块,见RedPointConstant枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RedPointConstant ModuleType {
      get { return moduleType_; }
      set {
        moduleType_ = value;
      }
    }

    /// <summary>Field number for the "red_point_count" field.</summary>
    public const int RedPointCountFieldNumber = 2;
    private int redPointCount_;
    /// <summary>
    ///红点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedPointCount {
      get { return redPointCount_; }
      set {
        redPointCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModuleType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ModuleType);
      }
      if (RedPointCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RedPointCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModuleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModuleType);
      }
      if (RedPointCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedPointCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            moduleType_ = (global::Protocol.RedPointConstant) input.ReadEnum();
            break;
          }
          case 16: {
            RedPointCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
