// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBBag.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///属性信息
  /// </summary>
  public sealed class AttrInfo : pb::IMessage {
    private static readonly pb::MessageParser<AttrInfo> _parser = new pb::MessageParser<AttrInfo>(() => new AttrInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///属性,攻击,防御等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "attrValue" field.</summary>
    public const int AttrValueFieldNumber = 2;
    private int attrValue_;
    /// <summary>
    ///属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrValue {
      get { return attrValue_; }
      set {
        attrValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (AttrValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttrValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (AttrValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            AttrValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///普通物品详细信息
  /// </summary>
  public sealed class ItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private long guid_;
    /// <summary>
    ///普通道具唯一id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///普通道具配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///普通道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.AttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.AttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrInfo> attrs_ = new pbc::RepeatedField<global::Protocol.AttrInfo>();
    /// <summary>
    ///属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrInfo> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "equipped" field.</summary>
    public const int EquippedFieldNumber = 6;
    private int equipped_;
    /// <summary>
    ///是否已被穿戴0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Equipped {
      get { return equipped_; }
      set {
        equipped_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
      if (Equipped != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Equipped);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (Equipped != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Equipped);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 42:
          case 40: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 48: {
            Equipped = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器推送背包所有道具信息
  /// </summary>
  public sealed class AckBagList : pb::IMessage {
    private static readonly pb::MessageParser<AckBagList> _parser = new pb::MessageParser<AckBagList>(() => new AckBagList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBagList> Parser { get { return _parser; } }

    /// <summary>Field number for the "bags" field.</summary>
    public const int BagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_bags_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> bags_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Bags {
      get { return bags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bags_.WriteTo(output, _repeated_bags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bags_.CalculateSize(_repeated_bags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bags_.AddEntriesFrom(input, _repeated_bags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器推送更细指定道具信息
  /// </summary>
  public sealed class AckUpdateBagList : pb::IMessage {
    private static readonly pb::MessageParser<AckUpdateBagList> _parser = new pb::MessageParser<AckUpdateBagList>(() => new AckUpdateBagList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckUpdateBagList> Parser { get { return _parser; } }

    /// <summary>Field number for the "bags" field.</summary>
    public const int BagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_bags_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> bags_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Bags {
      get { return bags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bags_.WriteTo(output, _repeated_bags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bags_.CalculateSize(_repeated_bags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bags_.AddEntriesFrom(input, _repeated_bags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器删除道具
  /// </summary>
  public sealed class AckDeleteBagList : pb::IMessage {
    private static readonly pb::MessageParser<AckDeleteBagList> _parser = new pb::MessageParser<AckDeleteBagList>(() => new AckDeleteBagList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDeleteBagList> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_itemIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> itemIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///物品id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ItemIds {
      get { return itemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求操作物品
  /// </summary>
  public sealed class ReqOperateItem : pb::IMessage {
    private static readonly pb::MessageParser<ReqOperateItem> _parser = new pb::MessageParser<ReqOperateItem>(() => new ReqOperateItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOperateItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private long itemId_;
    /// <summary>
    ///操作物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private int opType_;
    /// <summary>
    ///操作类型,1：使用,2：来源;3:合成,4:分解(出售)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ItemId);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt64();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回操作物品
  /// </summary>
  public sealed class AckOperateItem : pb::IMessage {
    private static readonly pb::MessageParser<AckOperateItem> _parser = new pb::MessageParser<AckOperateItem>(() => new AckOperateItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckOperateItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求背包使用礼包,专用
  /// </summary>
  public sealed class ReqBagUsePackage : pb::IMessage {
    private static readonly pb::MessageParser<ReqBagUsePackage> _parser = new pb::MessageParser<ReqBagUsePackage>(() => new ReqBagUsePackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBagUsePackage> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///操作物品id,配置id,如果操作类型是1,表示随机.操作类型为2,表示选择物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "materialId" field.</summary>
    public const int MaterialIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_materialId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> materialId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///选择的材料id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MaterialId {
      get { return materialId_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      materialId_.WriteTo(output, _repeated_materialId_codec);
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      size += materialId_.CalculateSize(_repeated_materialId_codec);
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            materialId_.AddEntriesFrom(input, _repeated_materialId_codec);
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求背包使用礼包,专用
  /// </summary>
  public sealed class AckBagUsePackage : pb::IMessage {
    private static readonly pb::MessageParser<AckBagUsePackage> _parser = new pb::MessageParser<AckBagUsePackage>(() => new AckBagUsePackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBagUsePackage> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckRewards : pb::IMessage {
    private static readonly pb::MessageParser<AckRewards> _parser = new pb::MessageParser<AckRewards>(() => new AckRewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckRewards> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1:显示物品,2:显示文字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求一键出售装备,此功能仅用于装备
  /// </summary>
  public sealed class ReqQuickSellItemEquip : pb::IMessage {
    private static readonly pb::MessageParser<ReqQuickSellItemEquip> _parser = new pb::MessageParser<ReqQuickSellItemEquip>(() => new ReqQuickSellItemEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqQuickSellItemEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "qualitys" field.</summary>
    public const int QualitysFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_qualitys_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> qualitys_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Qualitys {
      get { return qualitys_; }
    }

    /// <summary>Field number for the "stars" field.</summary>
    public const int StarsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_stars_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> stars_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Stars {
      get { return stars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      qualitys_.WriteTo(output, _repeated_qualitys_codec);
      stars_.WriteTo(output, _repeated_stars_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += qualitys_.CalculateSize(_repeated_qualitys_codec);
      size += stars_.CalculateSize(_repeated_stars_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            qualitys_.AddEntriesFrom(input, _repeated_qualitys_codec);
            break;
          }
          case 18:
          case 16: {
            stars_.AddEntriesFrom(input, _repeated_stars_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回一键出售物品
  /// </summary>
  public sealed class AckQuickSellItemEquip : pb::IMessage {
    private static readonly pb::MessageParser<AckQuickSellItemEquip> _parser = new pb::MessageParser<AckQuickSellItemEquip>(() => new AckQuickSellItemEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckQuickSellItemEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买次数
  /// </summary>
  public sealed class ReqBuyCount : pb::IMessage {
    private static readonly pb::MessageParser<ReqBuyCount> _parser = new pb::MessageParser<ReqBuyCount>(() => new ReqBuyCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///购买类型,客户端不能选择购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckBuyCount : pb::IMessage {
    private static readonly pb::MessageParser<AckBuyCount> _parser = new pb::MessageParser<AckBuyCount>(() => new AckBuyCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBuyCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///购买类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///奖励状态信息
  /// </summary>
  public sealed class PBRewardStateInfo : pb::IMessage {
    private static readonly pb::MessageParser<PBRewardStateInfo> _parser = new pb::MessageParser<PBRewardStateInfo>(() => new PBRewardStateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBRewardStateInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态,0:未领取,1:可领取,2:已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务信息
  /// </summary>
  public sealed class PBMissionInfo : pb::IMessage {
    private static readonly pb::MessageParser<PBMissionInfo> _parser = new pb::MessageParser<PBMissionInfo>(() => new PBMissionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBMissionInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///神将任务配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///当前任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///状态,是否完成,0:未完成，1：已完成未领取，2：已完成已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
