// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBLuckyTreasure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  //////////////////////幸运探宝//////////////////////
  ///探宝奖励
  /// </summary>
  public sealed class TreasureInfo : pb::IMessage {
    private static readonly pb::MessageParser<TreasureInfo> _parser = new pb::MessageParser<TreasureInfo>(() => new TreasureInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 1;
    private int place_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private long configId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "receive" field.</summary>
    public const int ReceiveFieldNumber = 3;
    private int receive_;
    /// <summary>
    ///是否抽取(0=没有,1=领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Receive {
      get { return receive_; }
      set {
        receive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Place != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Place);
      }
      if (ConfigId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfigId);
      }
      if (Receive != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Receive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
      }
      if (ConfigId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfigId);
      }
      if (Receive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Receive);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Place = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt64();
            break;
          }
          case 24: {
            Receive = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///探宝记录
  /// </summary>
  public sealed class TreasureLog : pb::IMessage {
    private static readonly pb::MessageParser<TreasureLog> _parser = new pb::MessageParser<TreasureLog>(() => new TreasureLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private string reward_ = "";
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Reward = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求幸运探宝页面
  /// </summary>
  public sealed class ReqLuckyTreasurePage : pb::IMessage {
    private static readonly pb::MessageParser<ReqLuckyTreasurePage> _parser = new pb::MessageParser<ReqLuckyTreasurePage>(() => new ReqLuckyTreasurePage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLuckyTreasurePage> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回幸运探宝页面
  /// </summary>
  public sealed class AckLuckyTreasurePage : pb::IMessage {
    private static readonly pb::MessageParser<AckLuckyTreasurePage> _parser = new pb::MessageParser<AckLuckyTreasurePage>(() => new AckLuckyTreasurePage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLuckyTreasurePage> Parser { get { return _parser; } }

    /// <summary>Field number for the "luckyValue" field.</summary>
    public const int LuckyValueFieldNumber = 1;
    private int luckyValue_;
    /// <summary>
    ///幸运值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyValue {
      get { return luckyValue_; }
      set {
        luckyValue_ = value;
      }
    }

    /// <summary>Field number for the "nextTime" field.</summary>
    public const int NextTimeFieldNumber = 2;
    private int nextTime_;
    /// <summary>
    ///剩余免费刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextTime {
      get { return nextTime_; }
      set {
        nextTime_ = value;
      }
    }

    /// <summary>Field number for the "treasureLog" field.</summary>
    public const int TreasureLogFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.TreasureLog> _repeated_treasureLog_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.TreasureLog.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TreasureLog> treasureLog_ = new pbc::RepeatedField<global::Protocol.TreasureLog>();
    /// <summary>
    ///探宝记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TreasureLog> TreasureLog {
      get { return treasureLog_; }
    }

    /// <summary>Field number for the "treasureInfo" field.</summary>
    public const int TreasureInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.TreasureInfo> _repeated_treasureInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TreasureInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TreasureInfo> treasureInfo_ = new pbc::RepeatedField<global::Protocol.TreasureInfo>();
    /// <summary>
    ///探宝奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TreasureInfo> TreasureInfo {
      get { return treasureInfo_; }
    }

    /// <summary>Field number for the "luckValueReward" field.</summary>
    public const int LuckValueRewardFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_luckValueReward_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> luckValueReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经领取的幸运值奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckValueReward {
      get { return luckValueReward_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LuckyValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LuckyValue);
      }
      if (NextTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextTime);
      }
      treasureLog_.WriteTo(output, _repeated_treasureLog_codec);
      treasureInfo_.WriteTo(output, _repeated_treasureInfo_codec);
      luckValueReward_.WriteTo(output, _repeated_luckValueReward_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LuckyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyValue);
      }
      if (NextTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextTime);
      }
      size += treasureLog_.CalculateSize(_repeated_treasureLog_codec);
      size += treasureInfo_.CalculateSize(_repeated_treasureInfo_codec);
      size += luckValueReward_.CalculateSize(_repeated_luckValueReward_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LuckyValue = input.ReadInt32();
            break;
          }
          case 16: {
            NextTime = input.ReadInt32();
            break;
          }
          case 26: {
            treasureLog_.AddEntriesFrom(input, _repeated_treasureLog_codec);
            break;
          }
          case 34: {
            treasureInfo_.AddEntriesFrom(input, _repeated_treasureInfo_codec);
            break;
          }
          case 42:
          case 40: {
            luckValueReward_.AddEntriesFrom(input, _repeated_luckValueReward_codec);
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求抽奖
  /// </summary>
  public sealed class ReqExtract : pb::IMessage {
    private static readonly pb::MessageParser<ReqExtract> _parser = new pb::MessageParser<ReqExtract>(() => new ReqExtract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqExtract> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回抽奖
  /// </summary>
  public sealed class AckExtract : pb::IMessage {
    private static readonly pb::MessageParser<AckExtract> _parser = new pb::MessageParser<AckExtract>(() => new AckExtract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckExtract> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 2;
    private int place_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "luckyValue" field.</summary>
    public const int LuckyValueFieldNumber = 4;
    private int luckyValue_;
    /// <summary>
    ///幸运值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyValue {
      get { return luckyValue_; }
      set {
        luckyValue_ = value;
      }
    }

    /// <summary>Field number for the "treasureLog" field.</summary>
    public const int TreasureLogFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.TreasureLog> _repeated_treasureLog_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.TreasureLog.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TreasureLog> treasureLog_ = new pbc::RepeatedField<global::Protocol.TreasureLog>();
    /// <summary>
    ///探宝记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TreasureLog> TreasureLog {
      get { return treasureLog_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 7;
    private int times_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Place != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Place);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (LuckyValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckyValue);
      }
      treasureLog_.WriteTo(output, _repeated_treasureLog_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Times != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (LuckyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyValue);
      }
      size += treasureLog_.CalculateSize(_repeated_treasureLog_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Place = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 32: {
            LuckyValue = input.ReadInt32();
            break;
          }
          case 42: {
            treasureLog_.AddEntriesFrom(input, _repeated_treasureLog_codec);
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求刷新
  /// </summary>
  public sealed class ReqLuckRefresh : pb::IMessage {
    private static readonly pb::MessageParser<ReqLuckRefresh> _parser = new pb::MessageParser<ReqLuckRefresh>(() => new ReqLuckRefresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLuckRefresh> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回刷新
  /// </summary>
  public sealed class AckLuckRefresh : pb::IMessage {
    private static readonly pb::MessageParser<AckLuckRefresh> _parser = new pb::MessageParser<AckLuckRefresh>(() => new AckLuckRefresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLuckRefresh> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取积分奖励
  /// </summary>
  public sealed class ReqIntegralReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqIntegralReward> _parser = new pb::MessageParser<ReqIntegralReward>(() => new ReqIntegralReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqIntegralReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型(1=幸运,2=高级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取积分奖励
  /// </summary>
  public sealed class AckIntegralReward : pb::IMessage {
    private static readonly pb::MessageParser<AckIntegralReward> _parser = new pb::MessageParser<AckIntegralReward>(() => new AckIntegralReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckIntegralReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
