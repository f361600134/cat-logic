// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBBattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///请求战报列表
  /// </summary>
  public sealed class ReqBattleReports : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattleReports> _parser = new pb::MessageParser<ReqBattleReports>(() => new ReqBattleReports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleReports> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    /// <summary>
    ///页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战报简要信息
  /// </summary>
  public sealed class BattleReportInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattleReportInfo> _parser = new pb::MessageParser<BattleReportInfo>(() => new BattleReportInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReportInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "attackerId" field.</summary>
    public const int AttackerIdFieldNumber = 2;
    private long attackerId_;
    /// <summary>
    ///攻击方Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "defenderId" field.</summary>
    public const int DefenderIdFieldNumber = 3;
    private long defenderId_;
    /// <summary>
    ///防御方Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefenderId {
      get { return defenderId_; }
      set {
        defenderId_ = value;
      }
    }

    /// <summary>Field number for the "synDbTime" field.</summary>
    public const int SynDbTimeFieldNumber = 4;
    private int synDbTime_;
    /// <summary>
    ///入库时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SynDbTime {
      get { return synDbTime_; }
      set {
        synDbTime_ = value;
      }
    }

    /// <summary>Field number for the "battleTime" field.</summary>
    public const int BattleTimeFieldNumber = 5;
    private int battleTime_;
    /// <summary>
    ///战斗开启时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleTime {
      get { return battleTime_; }
      set {
        battleTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 7;
    private int round_;
    /// <summary>
    ///回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 8;
    private int frame_;
    /// <summary>
    ///动作帧数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 9;
    private int winner_;
    /// <summary>
    ///相对于攻击方战斗结果0失败1胜利 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (AttackerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AttackerId);
      }
      if (DefenderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DefenderId);
      }
      if (SynDbTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SynDbTime);
      }
      if (BattleTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BattleTime);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Round != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Round);
      }
      if (Frame != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Frame);
      }
      if (Winner != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Winner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (AttackerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackerId);
      }
      if (DefenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefenderId);
      }
      if (SynDbTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SynDbTime);
      }
      if (BattleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleTime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Winner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
          case 16: {
            AttackerId = input.ReadInt64();
            break;
          }
          case 24: {
            DefenderId = input.ReadInt64();
            break;
          }
          case 32: {
            SynDbTime = input.ReadInt32();
            break;
          }
          case 40: {
            BattleTime = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            Round = input.ReadInt32();
            break;
          }
          case 64: {
            Frame = input.ReadInt32();
            break;
          }
          case 72: {
            Winner = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应战报列表
  /// </summary>
  public sealed class AckBattleReports : pb::IMessage {
    private static readonly pb::MessageParser<AckBattleReports> _parser = new pb::MessageParser<AckBattleReports>(() => new AckBattleReports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattleReports> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.BattleReportInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.BattleReportInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleReportInfo> infos_ = new pbc::RepeatedField<global::Protocol.BattleReportInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleReportInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求同步已播放战斗回合
  /// </summary>
  public sealed class ReqBattleRound : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattleRound> _parser = new pb::MessageParser<ReqBattleRound>(() => new ReqBattleRound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleRound> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 1;
    private long battleReportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    /// <summary>
    ///已播放战斗回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "frameIndex" field.</summary>
    public const int FrameIndexFieldNumber = 3;
    private int frameIndex_;
    /// <summary>
    ///战斗帧序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameIndex {
      get { return frameIndex_; }
      set {
        frameIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleReportId);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
      if (FrameIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (FrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleReportId = input.ReadInt64();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
          case 24: {
            FrameIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求播放战斗录像
  /// </summary>
  public sealed class ReqBattlePlay : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattlePlay> _parser = new pb::MessageParser<ReqBattlePlay>(() => new ReqBattlePlay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattlePlay> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 1;
    private long battleReportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应播放战斗录像
  /// </summary>
  public sealed class AckBattlePlay : pb::IMessage {
    private static readonly pb::MessageParser<AckBattlePlay> _parser = new pb::MessageParser<AckBattlePlay>(() => new AckBattlePlay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattlePlay> Parser { get { return _parser; } }

    /// <summary>Field number for the "ackBattle" field.</summary>
    public const int AckBattleFieldNumber = 1;
    private global::Protocol.AckBattle ackBattle_;
    /// <summary>
    ///战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckBattle AckBattle {
      get { return ackBattle_; }
      set {
        ackBattle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ackBattle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AckBattle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ackBattle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AckBattle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ackBattle_ == null) {
              ackBattle_ = new global::Protocol.AckBattle();
            }
            input.ReadMessage(ackBattle_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求设置战斗播放速度
  /// </summary>
  public sealed class ReqBattlePlayRate : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattlePlayRate> _parser = new pb::MessageParser<ReqBattlePlayRate>(() => new ReqBattlePlayRate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattlePlayRate> Parser { get { return _parser; } }

    /// <summary>Field number for the "playRate" field.</summary>
    public const int PlayRateFieldNumber = 1;
    private int playRate_;
    /// <summary>
    ///播放倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayRate {
      get { return playRate_; }
      set {
        playRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayRate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayRate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应设置战斗播放速度
  /// </summary>
  public sealed class AckBattlePlayRate : pb::IMessage {
    private static readonly pb::MessageParser<AckBattlePlayRate> _parser = new pb::MessageParser<AckBattlePlayRate>(() => new AckBattlePlayRate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattlePlayRate> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///播放速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应战斗错误码
  /// </summary>
  public sealed class AckBattleCode : pb::IMessage {
    private static readonly pb::MessageParser<AckBattleCode> _parser = new pb::MessageParser<AckBattleCode>(() => new AckBattleCode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattleCode> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///提示信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求PVE战斗
  /// </summary>
  public sealed class ReqBattlePVE : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattlePVE> _parser = new pb::MessageParser<ReqBattlePVE>(() => new ReqBattlePVE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattlePVE> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleType" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private int battleType_;
    /// <summary>
    ///战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "battleParam" field.</summary>
    public const int BattleParamFieldNumber = 2;
    private int battleParam_;
    /// <summary>
    ///每个战斗类型所需参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleParam {
      get { return battleParam_; }
      set {
        battleParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (BattleParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (BattleParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 16: {
            BattleParam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求PVP战斗
  /// </summary>
  public sealed class ReqBattlePVP : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattlePVP> _parser = new pb::MessageParser<ReqBattlePVP>(() => new ReqBattlePVP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattlePVP> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleType" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private int battleType_;
    /// <summary>
    ///战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "defenderId" field.</summary>
    public const int DefenderIdFieldNumber = 2;
    private long defenderId_;
    /// <summary>
    ///敌方玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefenderId {
      get { return defenderId_; }
      set {
        defenderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (DefenderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DefenderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (DefenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefenderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 16: {
            DefenderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应战斗结果
  /// </summary>
  public sealed class AckBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckBattle> _parser = new pb::MessageParser<AckBattle>(() => new AckBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "reportType" field.</summary>
    public const int ReportTypeFieldNumber = 1;
    private int reportType_;
    /// <summary>
    ///战报类型0PVP测试1主线副本2试炼塔3日常副本4无尽试炼5位面征战6星河神殿7神界冒险8元素神殿9天界副本10竞技场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "battleResult" field.</summary>
    public const int BattleResultFieldNumber = 2;
    private global::Protocol.AckBattleResult battleResult_;
    /// <summary>
    ///战斗结算结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckBattleResult BattleResult {
      get { return battleResult_; }
      set {
        battleResult_ = value;
      }
    }

    /// <summary>Field number for the "battleReport" field.</summary>
    public const int BattleReportFieldNumber = 3;
    private global::Protocol.BattleReportVO battleReport_;
    /// <summary>
    ///战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleReportVO BattleReport {
      get { return battleReport_; }
      set {
        battleReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReportType);
      }
      if (battleResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleResult);
      }
      if (battleReport_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleReport);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReportType);
      }
      if (battleResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleResult);
      }
      if (battleReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleReport);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReportType = input.ReadInt32();
            break;
          }
          case 18: {
            if (battleResult_ == null) {
              battleResult_ = new global::Protocol.AckBattleResult();
            }
            input.ReadMessage(battleResult_);
            break;
          }
          case 26: {
            if (battleReport_ == null) {
              battleReport_ = new global::Protocol.BattleReportVO();
            }
            input.ReadMessage(battleReport_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求战斗结算结果
  /// </summary>
  public sealed class ReqBattleResult : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattleResult> _parser = new pb::MessageParser<ReqBattleResult>(() => new ReqBattleResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 1;
    private long battleReportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗结算结果
  /// </summary>
  public sealed class AckBattleResult : pb::IMessage {
    private static readonly pb::MessageParser<AckBattleResult> _parser = new pb::MessageParser<AckBattleResult>(() => new AckBattleResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBattleResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private int winner_;
    /// <summary>
    ///相对于攻击方战斗结果0失败1胜利 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "tims" field.</summary>
    public const int TimsFieldNumber = 2;
    private int tims_;
    /// <summary>
    ///战斗持续时间s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tims {
      get { return tims_; }
      set {
        tims_ = value;
      }
    }

    /// <summary>Field number for the "attackerInfo" field.</summary>
    public const int AttackerInfoFieldNumber = 3;
    private global::Protocol.BattleRoleInfo attackerInfo_;
    /// <summary>
    ///攻击者对战角色信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleRoleInfo AttackerInfo {
      get { return attackerInfo_; }
      set {
        attackerInfo_ = value;
      }
    }

    /// <summary>Field number for the "defenderInfo" field.</summary>
    public const int DefenderInfoFieldNumber = 4;
    private global::Protocol.BattleRoleInfo defenderInfo_;
    /// <summary>
    ///防御者对战角色信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleRoleInfo DefenderInfo {
      get { return defenderInfo_; }
      set {
        defenderInfo_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> itemList_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///获得物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.BattlerInfo> _repeated_attacker_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.BattlerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattlerInfo> attacker_ = new pbc::RepeatedField<global::Protocol.BattlerInfo>();
    /// <summary>
    ///攻击者战斗数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattlerInfo> Attacker {
      get { return attacker_; }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.BattlerInfo> _repeated_defender_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.BattlerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattlerInfo> defender_ = new pbc::RepeatedField<global::Protocol.BattlerInfo>();
    /// <summary>
    ///防御者战斗数值    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattlerInfo> Defender {
      get { return defender_; }
    }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 8;
    private long battleReportId_;
    /// <summary>
    ///战报Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Winner != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Winner);
      }
      if (Tims != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tims);
      }
      if (attackerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AttackerInfo);
      }
      if (defenderInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DefenderInfo);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      attacker_.WriteTo(output, _repeated_attacker_codec);
      defender_.WriteTo(output, _repeated_defender_codec);
      if (BattleReportId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(BattleReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Winner);
      }
      if (Tims != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tims);
      }
      if (attackerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackerInfo);
      }
      if (defenderInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefenderInfo);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += attacker_.CalculateSize(_repeated_attacker_codec);
      size += defender_.CalculateSize(_repeated_defender_codec);
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Winner = input.ReadInt32();
            break;
          }
          case 16: {
            Tims = input.ReadInt32();
            break;
          }
          case 26: {
            if (attackerInfo_ == null) {
              attackerInfo_ = new global::Protocol.BattleRoleInfo();
            }
            input.ReadMessage(attackerInfo_);
            break;
          }
          case 34: {
            if (defenderInfo_ == null) {
              defenderInfo_ = new global::Protocol.BattleRoleInfo();
            }
            input.ReadMessage(defenderInfo_);
            break;
          }
          case 42: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 50: {
            attacker_.AddEntriesFrom(input, _repeated_attacker_codec);
            break;
          }
          case 58: {
            defender_.AddEntriesFrom(input, _repeated_defender_codec);
            break;
          }
          case 64: {
            BattleReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///对战角色信息类型与值
  /// </summary>
  public sealed class BattleRoleTypeValue : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleTypeValue> _parser = new pb::MessageParser<BattleRoleTypeValue>(() => new BattleRoleTypeValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleTypeValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///属性类型1竞技场积分2积分变化值3角色当前经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    ///属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///对战角色信息
  /// </summary>
  public sealed class BattleRoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleInfo> _parser = new pb::MessageParser<BattleRoleInfo>(() => new BattleRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "skinId" field.</summary>
    public const int SkinIdFieldNumber = 4;
    private int skinId_;
    /// <summary>
    ///头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.BattleRoleTypeValue> _repeated_params_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.BattleRoleTypeValue.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleRoleTypeValue> params_ = new pbc::RepeatedField<global::Protocol.BattleRoleTypeValue>();
    /// <summary>
    ///额外参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleRoleTypeValue> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (SkinId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkinId);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            SkinId = input.ReadInt32();
            break;
          }
          case 42: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///各个英雄的战斗数值
  /// </summary>
  public sealed class BattlerInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattlerInfo> _parser = new pb::MessageParser<BattlerInfo>(() => new BattlerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private long damage_;
    /// <summary>
    ///伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "sufferDamage" field.</summary>
    public const int SufferDamageFieldNumber = 2;
    private long sufferDamage_;
    /// <summary>
    ///承受伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SufferDamage {
      get { return sufferDamage_; }
      set {
        sufferDamage_ = value;
      }
    }

    /// <summary>Field number for the "treatment" field.</summary>
    public const int TreatmentFieldNumber = 3;
    private long treatment_;
    /// <summary>
    ///治疗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Treatment {
      get { return treatment_; }
      set {
        treatment_ = value;
      }
    }

    /// <summary>Field number for the "isMvp" field.</summary>
    public const int IsMvpFieldNumber = 4;
    private bool isMvp_;
    /// <summary>
    ///是否mvp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMvp {
      get { return isMvp_; }
      set {
        isMvp_ = value;
      }
    }

    /// <summary>Field number for the "battlerId" field.</summary>
    public const int BattlerIdFieldNumber = 5;
    private long battlerId_;
    /// <summary>
    ///战斗者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattlerId {
      get { return battlerId_; }
      set {
        battlerId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 7;
    private int modelId_;
    /// <summary>
    ///模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    /// <summary>
    ///战斗者类型1英雄2怪物3神器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Damage);
      }
      if (SufferDamage != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SufferDamage);
      }
      if (Treatment != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Treatment);
      }
      if (IsMvp != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMvp);
      }
      if (BattlerId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BattlerId);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (ModelId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ModelId);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Damage);
      }
      if (SufferDamage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SufferDamage);
      }
      if (Treatment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Treatment);
      }
      if (IsMvp != false) {
        size += 1 + 1;
      }
      if (BattlerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattlerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Damage = input.ReadInt64();
            break;
          }
          case 16: {
            SufferDamage = input.ReadInt64();
            break;
          }
          case 24: {
            Treatment = input.ReadInt64();
            break;
          }
          case 32: {
            IsMvp = input.ReadBool();
            break;
          }
          case 40: {
            BattlerId = input.ReadInt64();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            ModelId = input.ReadInt32();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求战斗结果
  /// </summary>
  public sealed class ReqBattleEnd : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattleEnd> _parser = new pb::MessageParser<ReqBattleEnd>(() => new ReqBattleEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleType" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private int battleType_;
    /// <summary>
    ///战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 2;
    private long battleReportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (BattleReportId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BattleReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 16: {
            BattleReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出战斗
  /// </summary>
  public sealed class ReqBattleExit : pb::IMessage {
    private static readonly pb::MessageParser<ReqBattleExit> _parser = new pb::MessageParser<ReqBattleExit>(() => new ReqBattleExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleExit> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleType" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private int battleType_;
    /// <summary>
    ///战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "battleReportId" field.</summary>
    public const int BattleReportIdFieldNumber = 2;
    private long battleReportId_;
    /// <summary>
    ///战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleReportId {
      get { return battleReportId_; }
      set {
        battleReportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (BattleReportId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BattleReportId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (BattleReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleReportId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 16: {
            BattleReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战报
  /// </summary>
  public sealed class BattleReportVO : pb::IMessage {
    private static readonly pb::MessageParser<BattleReportVO> _parser = new pb::MessageParser<BattleReportVO>(() => new BattleReportVO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReportVO> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///战报ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///战报时间戳s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "attackerId" field.</summary>
    public const int AttackerIdFieldNumber = 3;
    private long attackerId_;
    /// <summary>
    ///攻击者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "defenderId" field.</summary>
    public const int DefenderIdFieldNumber = 4;
    private long defenderId_;
    /// <summary>
    ///防御者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefenderId {
      get { return defenderId_; }
      set {
        defenderId_ = value;
      }
    }

    /// <summary>Field number for the "attackerName" field.</summary>
    public const int AttackerNameFieldNumber = 5;
    private string attackerName_ = "";
    /// <summary>
    ///攻击者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defenderName" field.</summary>
    public const int DefenderNameFieldNumber = 6;
    private string defenderName_ = "";
    /// <summary>
    ///防御者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefenderName {
      get { return defenderName_; }
      set {
        defenderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 7;
    private int winner_;
    /// <summary>
    ///相对于攻击方战斗结果0失败1胜利 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "roundNum" field.</summary>
    public const int RoundNumFieldNumber = 8;
    private int roundNum_;
    /// <summary>
    ///回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protocol.BattlerVO> _repeated_attacker_codec
        = pb::FieldCodec.ForMessage(74, global::Protocol.BattlerVO.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattlerVO> attacker_ = new pbc::RepeatedField<global::Protocol.BattlerVO>();
    /// <summary>
    ///攻击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattlerVO> Attacker {
      get { return attacker_; }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.BattlerVO> _repeated_defender_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.BattlerVO.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattlerVO> defender_ = new pbc::RepeatedField<global::Protocol.BattlerVO>();
    /// <summary>
    ///防御者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattlerVO> Defender {
      get { return defender_; }
    }

    /// <summary>Field number for the "battleFrames" field.</summary>
    public const int BattleFramesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protocol.BattleFrameVO> _repeated_battleFrames_codec
        = pb::FieldCodec.ForMessage(90, global::Protocol.BattleFrameVO.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleFrameVO> battleFrames_ = new pbc::RepeatedField<global::Protocol.BattleFrameVO>();
    /// <summary>
    ///战斗帧动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleFrameVO> BattleFrames {
      get { return battleFrames_; }
    }

    /// <summary>Field number for the "battleRoundInfos" field.</summary>
    public const int BattleRoundInfosFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Protocol.BattleRoundInfo> _repeated_battleRoundInfos_codec
        = pb::FieldCodec.ForMessage(98, global::Protocol.BattleRoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleRoundInfo> battleRoundInfos_ = new pbc::RepeatedField<global::Protocol.BattleRoundInfo>();
    /// <summary>
    ///回合血量信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleRoundInfo> BattleRoundInfos {
      get { return battleRoundInfos_; }
    }

    /// <summary>Field number for the "attackerArtInfo" field.</summary>
    public const int AttackerArtInfoFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Protocol.ArtifactSpiritInfo> _repeated_attackerArtInfo_codec
        = pb::FieldCodec.ForMessage(106, global::Protocol.ArtifactSpiritInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo> attackerArtInfo_ = new pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo>();
    /// <summary>
    ///攻击者神器精灵信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo> AttackerArtInfo {
      get { return attackerArtInfo_; }
    }

    /// <summary>Field number for the "defenderArtInfo" field.</summary>
    public const int DefenderArtInfoFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Protocol.ArtifactSpiritInfo> _repeated_defenderArtInfo_codec
        = pb::FieldCodec.ForMessage(114, global::Protocol.ArtifactSpiritInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo> defenderArtInfo_ = new pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo>();
    /// <summary>
    ///防御者神器精灵信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ArtifactSpiritInfo> DefenderArtInfo {
      get { return defenderArtInfo_; }
    }

    /// <summary>Field number for the "attackerMatrixId" field.</summary>
    public const int AttackerMatrixIdFieldNumber = 15;
    private int attackerMatrixId_;
    /// <summary>
    ///攻击者阵形模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerMatrixId {
      get { return attackerMatrixId_; }
      set {
        attackerMatrixId_ = value;
      }
    }

    /// <summary>Field number for the "defenderMatrixId" field.</summary>
    public const int DefenderMatrixIdFieldNumber = 16;
    private int defenderMatrixId_;
    /// <summary>
    ///防御者阵形模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenderMatrixId {
      get { return defenderMatrixId_; }
      set {
        defenderMatrixId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (AttackerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AttackerId);
      }
      if (DefenderId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DefenderId);
      }
      if (AttackerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AttackerName);
      }
      if (DefenderName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DefenderName);
      }
      if (Winner != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Winner);
      }
      if (RoundNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoundNum);
      }
      attacker_.WriteTo(output, _repeated_attacker_codec);
      defender_.WriteTo(output, _repeated_defender_codec);
      battleFrames_.WriteTo(output, _repeated_battleFrames_codec);
      battleRoundInfos_.WriteTo(output, _repeated_battleRoundInfos_codec);
      attackerArtInfo_.WriteTo(output, _repeated_attackerArtInfo_codec);
      defenderArtInfo_.WriteTo(output, _repeated_defenderArtInfo_codec);
      if (AttackerMatrixId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AttackerMatrixId);
      }
      if (DefenderMatrixId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(DefenderMatrixId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (AttackerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackerId);
      }
      if (DefenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefenderId);
      }
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
      }
      if (DefenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefenderName);
      }
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Winner);
      }
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundNum);
      }
      size += attacker_.CalculateSize(_repeated_attacker_codec);
      size += defender_.CalculateSize(_repeated_defender_codec);
      size += battleFrames_.CalculateSize(_repeated_battleFrames_codec);
      size += battleRoundInfos_.CalculateSize(_repeated_battleRoundInfos_codec);
      size += attackerArtInfo_.CalculateSize(_repeated_attackerArtInfo_codec);
      size += defenderArtInfo_.CalculateSize(_repeated_defenderArtInfo_codec);
      if (AttackerMatrixId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerMatrixId);
      }
      if (DefenderMatrixId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefenderMatrixId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 24: {
            AttackerId = input.ReadInt64();
            break;
          }
          case 32: {
            DefenderId = input.ReadInt64();
            break;
          }
          case 42: {
            AttackerName = input.ReadString();
            break;
          }
          case 50: {
            DefenderName = input.ReadString();
            break;
          }
          case 56: {
            Winner = input.ReadInt32();
            break;
          }
          case 64: {
            RoundNum = input.ReadInt32();
            break;
          }
          case 74: {
            attacker_.AddEntriesFrom(input, _repeated_attacker_codec);
            break;
          }
          case 82: {
            defender_.AddEntriesFrom(input, _repeated_defender_codec);
            break;
          }
          case 90: {
            battleFrames_.AddEntriesFrom(input, _repeated_battleFrames_codec);
            break;
          }
          case 98: {
            battleRoundInfos_.AddEntriesFrom(input, _repeated_battleRoundInfos_codec);
            break;
          }
          case 106: {
            attackerArtInfo_.AddEntriesFrom(input, _repeated_attackerArtInfo_codec);
            break;
          }
          case 114: {
            defenderArtInfo_.AddEntriesFrom(input, _repeated_defenderArtInfo_codec);
            break;
          }
          case 120: {
            AttackerMatrixId = input.ReadInt32();
            break;
          }
          case 128: {
            DefenderMatrixId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///神器精灵信息
  /// </summary>
  public sealed class ArtifactSpiritInfo : pb::IMessage {
    private static readonly pb::MessageParser<ArtifactSpiritInfo> _parser = new pb::MessageParser<ArtifactSpiritInfo>(() => new ArtifactSpiritInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactSpiritInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "artifactId" field.</summary>
    public const int ArtifactIdFieldNumber = 1;
    private int artifactId_;
    /// <summary>
    ///神器配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArtifactId {
      get { return artifactId_; }
      set {
        artifactId_ = value;
      }
    }

    /// <summary>Field number for the "artifactSkillId" field.</summary>
    public const int ArtifactSkillIdFieldNumber = 2;
    private int artifactSkillId_;
    /// <summary>
    ///神器技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArtifactSkillId {
      get { return artifactSkillId_; }
      set {
        artifactSkillId_ = value;
      }
    }

    /// <summary>Field number for the "spiritSkills" field.</summary>
    public const int SpiritSkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_spiritSkills_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> spiritSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///精灵技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpiritSkills {
      get { return spiritSkills_; }
    }

    /// <summary>Field number for the "spiritLevel" field.</summary>
    public const int SpiritLevelFieldNumber = 4;
    private int spiritLevel_;
    /// <summary>
    ///精灵神树等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpiritLevel {
      get { return spiritLevel_; }
      set {
        spiritLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArtifactId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArtifactId);
      }
      if (ArtifactSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArtifactSkillId);
      }
      spiritSkills_.WriteTo(output, _repeated_spiritSkills_codec);
      if (SpiritLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpiritLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArtifactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArtifactId);
      }
      if (ArtifactSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArtifactSkillId);
      }
      size += spiritSkills_.CalculateSize(_repeated_spiritSkills_codec);
      if (SpiritLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiritLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArtifactId = input.ReadInt32();
            break;
          }
          case 16: {
            ArtifactSkillId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            spiritSkills_.AddEntriesFrom(input, _repeated_spiritSkills_codec);
            break;
          }
          case 32: {
            SpiritLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回合血量信息
  /// </summary>
  public sealed class BattleRoundInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoundInfo> _parser = new pb::MessageParser<BattleRoundInfo>(() => new BattleRoundInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoundInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    ///战斗回合号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "bloods" field.</summary>
    public const int BloodsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.BattlerBloodInfo> _repeated_bloods_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.BattlerBloodInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattlerBloodInfo> bloods_ = new pbc::RepeatedField<global::Protocol.BattlerBloodInfo>();
    /// <summary>
    ///回合血量信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattlerBloodInfo> Bloods {
      get { return bloods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
      bloods_.WriteTo(output, _repeated_bloods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      size += bloods_.CalculateSize(_repeated_bloods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
          case 82: {
            bloods_.AddEntriesFrom(input, _repeated_bloods_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回合血量信息
  /// </summary>
  public sealed class BattlerBloodInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattlerBloodInfo> _parser = new pb::MessageParser<BattlerBloodInfo>(() => new BattlerBloodInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlerBloodInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "battlerId" field.</summary>
    public const int BattlerIdFieldNumber = 1;
    private long battlerId_;
    /// <summary>
    ///战斗者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattlerId {
      get { return battlerId_; }
      set {
        battlerId_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 2;
    private long blood_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 3;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattlerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattlerId);
      }
      if (Blood != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BloodLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattlerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattlerId);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattlerId = input.ReadInt64();
            break;
          }
          case 16: {
            Blood = input.ReadInt64();
            break;
          }
          case 24: {
            BloodLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗对象
  /// </summary>
  public sealed class BattlerVO : pb::IMessage {
    private static readonly pb::MessageParser<BattlerVO> _parser = new pb::MessageParser<BattlerVO>(() => new BattlerVO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlerVO> Parser { get { return _parser; } }

    /// <summary>Field number for the "battlerId" field.</summary>
    public const int BattlerIdFieldNumber = 1;
    private long battlerId_;
    /// <summary>
    ///战斗者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattlerId {
      get { return battlerId_; }
      set {
        battlerId_ = value;
      }
    }

    /// <summary>Field number for the "battlerName" field.</summary>
    public const int BattlerNameFieldNumber = 2;
    private string battlerName_ = "";
    /// <summary>
    ///战斗者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattlerName {
      get { return battlerName_; }
      set {
        battlerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///战斗者类型1英雄2怪物3神器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "battlePosition" field.</summary>
    public const int BattlePositionFieldNumber = 4;
    private int battlePosition_;
    /// <summary>
    ///战斗九宫格位置1-9
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlePosition {
      get { return battlePosition_; }
      set {
        battlePosition_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 5;
    private long blood_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 6;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 7;
    private int modelId_;
    /// <summary>
    ///模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private int level_;
    /// <summary>
    ///等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "skillIds" field.</summary>
    public const int SkillIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_skillIds_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> skillIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkillIds {
      get { return skillIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattlerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattlerId);
      }
      if (BattlerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BattlerName);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (BattlePosition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattlePosition);
      }
      if (Blood != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BloodLimit);
      }
      if (ModelId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ModelId);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Level);
      }
      skillIds_.WriteTo(output, _repeated_skillIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattlerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattlerId);
      }
      if (BattlerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattlerName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (BattlePosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePosition);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += skillIds_.CalculateSize(_repeated_skillIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattlerId = input.ReadInt64();
            break;
          }
          case 18: {
            BattlerName = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            BattlePosition = input.ReadInt32();
            break;
          }
          case 40: {
            Blood = input.ReadInt64();
            break;
          }
          case 48: {
            BloodLimit = input.ReadInt64();
            break;
          }
          case 56: {
            ModelId = input.ReadInt32();
            break;
          }
          case 64: {
            Level = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            skillIds_.AddEntriesFrom(input, _repeated_skillIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗帧
  /// </summary>
  public sealed class BattleFrameVO : pb::IMessage {
    private static readonly pb::MessageParser<BattleFrameVO> _parser = new pb::MessageParser<BattleFrameVO>(() => new BattleFrameVO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleFrameVO> Parser { get { return _parser; } }

    /// <summary>Field number for the "battleSeq" field.</summary>
    public const int BattleSeqFieldNumber = 1;
    private int battleSeq_;
    /// <summary>
    ///战斗帧序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleSeq {
      get { return battleSeq_; }
      set {
        battleSeq_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    /// <summary>
    ///战斗回合号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    /// <summary>
    ///发起的攻击技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 4;
    private global::Protocol.BattleFrameObjectVO attacker_;
    /// <summary>
    ///攻击方 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleFrameObjectVO Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "defenders" field.</summary>
    public const int DefendersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.BattleFrameObjectVO> _repeated_defenders_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.BattleFrameObjectVO.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleFrameObjectVO> defenders_ = new pbc::RepeatedField<global::Protocol.BattleFrameObjectVO>();
    /// <summary>
    ///防御方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleFrameObjectVO> Defenders {
      get { return defenders_; }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.BattleBuffVO> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.BattleBuffVO.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BattleBuffVO> buffs_ = new pbc::RepeatedField<global::Protocol.BattleBuffVO>();
    /// <summary>
    ///BUFF集合 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BattleBuffVO> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "offensive" field.</summary>
    public const int OffensiveFieldNumber = 7;
    private int offensive_;
    /// <summary>
    ///攻防类型1攻击方2防御方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offensive {
      get { return offensive_; }
      set {
        offensive_ = value;
      }
    }

    /// <summary>Field number for the "slideshowFrame" field.</summary>
    public const int SlideshowFrameFieldNumber = 8;
    private int slideshowFrame_;
    /// <summary>
    ///连续播放帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlideshowFrame {
      get { return slideshowFrame_; }
      set {
        slideshowFrame_ = value;
      }
    }

    /// <summary>Field number for the "skillFireType" field.</summary>
    public const int SkillFireTypeFieldNumber = 9;
    private int skillFireType_;
    /// <summary>
    ///技能释放的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillFireType {
      get { return skillFireType_; }
      set {
        skillFireType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleSeq != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleSeq);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (attacker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Attacker);
      }
      defenders_.WriteTo(output, _repeated_defenders_codec);
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (Offensive != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Offensive);
      }
      if (SlideshowFrame != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SlideshowFrame);
      }
      if (SkillFireType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkillFireType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleSeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleSeq);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      size += defenders_.CalculateSize(_repeated_defenders_codec);
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (Offensive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offensive);
      }
      if (SlideshowFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlideshowFrame);
      }
      if (SkillFireType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillFireType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleSeq = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 34: {
            if (attacker_ == null) {
              attacker_ = new global::Protocol.BattleFrameObjectVO();
            }
            input.ReadMessage(attacker_);
            break;
          }
          case 42: {
            defenders_.AddEntriesFrom(input, _repeated_defenders_codec);
            break;
          }
          case 50: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 56: {
            Offensive = input.ReadInt32();
            break;
          }
          case 64: {
            SlideshowFrame = input.ReadInt32();
            break;
          }
          case 72: {
            SkillFireType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗帧目标对象
  /// </summary>
  public sealed class BattleFrameObjectVO : pb::IMessage {
    private static readonly pb::MessageParser<BattleFrameObjectVO> _parser = new pb::MessageParser<BattleFrameObjectVO>(() => new BattleFrameObjectVO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleFrameObjectVO> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private long targetId_;
    /// <summary>
    ///目标ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 2;
    private int targetType_;
    /// <summary>
    ///目标类型1英雄2怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 3;
    private long blood_;
    /// <summary>
    ///血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 4;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    /// <summary>Field number for the "bloodLost" field.</summary>
    public const int BloodLostFieldNumber = 5;
    private long bloodLost_;
    /// <summary>
    ///掉血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLost {
      get { return bloodLost_; }
      set {
        bloodLost_ = value;
      }
    }

    /// <summary>Field number for the "lost" field.</summary>
    public const int LostFieldNumber = 6;
    private bool lost_;
    /// <summary>
    ///是否挂掉0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lost {
      get { return lost_; }
      set {
        lost_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 7;
    private int position_;
    /// <summary>
    ///站位，从1-9，共9个位置,0为异兽位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "attackPath" field.</summary>
    public const int AttackPathFieldNumber = 8;
    private int attackPath_;
    /// <summary>
    ///攻击路径: 0攻击方1闪避2暴击3格挡4静态BUFF5治疗播放敌方技能特效6治疗不播放7复活8仅加buff9被动技能触发10分摊伤害；详细依据BattleAttackPath定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackPath {
      get { return attackPath_; }
      set {
        attackPath_ = value;
      }
    }

    /// <summary>Field number for the "otherSkillId" field.</summary>
    public const int OtherSkillIdFieldNumber = 9;
    private int otherSkillId_;
    /// <summary>
    ///被动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherSkillId {
      get { return otherSkillId_; }
      set {
        otherSkillId_ = value;
      }
    }

    /// <summary>Field number for the "muldamageSeq" field.</summary>
    public const int MuldamageSeqFieldNumber = 10;
    private int muldamageSeq_;
    /// <summary>
    ///多次伤害标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MuldamageSeq {
      get { return muldamageSeq_; }
      set {
        muldamageSeq_ = value;
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 11;
    private int damageType_;
    /// <summary>
    ///伤害类型1物理2法术3暴击4治疗5吸收6真实伤害7反弹伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "damageAbsorb" field.</summary>
    public const int DamageAbsorbFieldNumber = 12;
    private int damageAbsorb_;
    /// <summary>
    ///吸收伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageAbsorb {
      get { return damageAbsorb_; }
      set {
        damageAbsorb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (TargetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetType);
      }
      if (Blood != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BloodLimit);
      }
      if (BloodLost != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BloodLost);
      }
      if (Lost != false) {
        output.WriteRawTag(48);
        output.WriteBool(Lost);
      }
      if (Position != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Position);
      }
      if (AttackPath != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AttackPath);
      }
      if (OtherSkillId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OtherSkillId);
      }
      if (MuldamageSeq != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MuldamageSeq);
      }
      if (DamageType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DamageType);
      }
      if (DamageAbsorb != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageAbsorb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      if (BloodLost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLost);
      }
      if (Lost != false) {
        size += 1 + 1;
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (AttackPath != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackPath);
      }
      if (OtherSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherSkillId);
      }
      if (MuldamageSeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MuldamageSeq);
      }
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageType);
      }
      if (DamageAbsorb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageAbsorb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetType = input.ReadInt32();
            break;
          }
          case 24: {
            Blood = input.ReadInt64();
            break;
          }
          case 32: {
            BloodLimit = input.ReadInt64();
            break;
          }
          case 40: {
            BloodLost = input.ReadInt64();
            break;
          }
          case 48: {
            Lost = input.ReadBool();
            break;
          }
          case 56: {
            Position = input.ReadInt32();
            break;
          }
          case 64: {
            AttackPath = input.ReadInt32();
            break;
          }
          case 72: {
            OtherSkillId = input.ReadInt32();
            break;
          }
          case 80: {
            MuldamageSeq = input.ReadInt32();
            break;
          }
          case 88: {
            DamageType = input.ReadInt32();
            break;
          }
          case 96: {
            DamageAbsorb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗buff信息
  /// </summary>
  public sealed class BattleBuffVO : pb::IMessage {
    private static readonly pb::MessageParser<BattleBuffVO> _parser = new pb::MessageParser<BattleBuffVO>(() => new BattleBuffVO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleBuffVO> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private long skillId_;
    /// <summary>
    ///BUFF技能唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    /// <summary>
    ///目标ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 3;
    private int targetType_;
    /// <summary>
    ///目标类型1英雄2怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "buffModelId" field.</summary>
    public const int BuffModelIdFieldNumber = 4;
    private int buffModelId_;
    /// <summary>
    ///BUFF模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffModelId {
      get { return buffModelId_; }
      set {
        buffModelId_ = value;
      }
    }

    /// <summary>Field number for the "remainRoundNum" field.</summary>
    public const int RemainRoundNumFieldNumber = 5;
    private int remainRoundNum_;
    /// <summary>
    ///BUFF剩余回合数, 只限战斗类型有效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainRoundNum {
      get { return remainRoundNum_; }
      set {
        remainRoundNum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///处理类型: 0,新增; 1,修改; 2,删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 7;
    private int stack_;
    /// <summary>
    ///buff叠加层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stack {
      get { return stack_; }
      set {
        stack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SkillId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
      if (TargetType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetType);
      }
      if (BuffModelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuffModelId);
      }
      if (RemainRoundNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainRoundNum);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Stack != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Stack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (BuffModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffModelId);
      }
      if (RemainRoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainRoundNum);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Stack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stack);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
          case 24: {
            TargetType = input.ReadInt32();
            break;
          }
          case 32: {
            BuffModelId = input.ReadInt32();
            break;
          }
          case 40: {
            RemainRoundNum = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            Stack = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
