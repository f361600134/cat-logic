// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBDaily.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///活跃度信息
  /// </summary>
  public sealed class ActiveInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActiveInfo> _parser = new pb::MessageParser<ActiveInfo>(() => new ActiveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private int active_;
    /// <summary>
    ///活跃度值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "receivedList" field.</summary>
    public const int ReceivedListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_receivedList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> receivedList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ReceivedList {
      get { return receivedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Active);
      }
      receivedList_.WriteTo(output, _repeated_receivedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Active);
      }
      size += receivedList_.CalculateSize(_repeated_receivedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            receivedList_.AddEntriesFrom(input, _repeated_receivedList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务信息
  /// </summary>
  public sealed class TaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///任务条件完成度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///任务状态0未完成1已完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求日常面板信息
  /// </summary>
  public sealed class ReqDailyTasks : pb::IMessage {
    private static readonly pb::MessageParser<ReqDailyTasks> _parser = new pb::MessageParser<ReqDailyTasks>(() => new ReqDailyTasks());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDailyTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应日常面板信息
  /// </summary>
  public sealed class AckDailyTasks : pb::IMessage {
    private static readonly pb::MessageParser<AckDailyTasks> _parser = new pb::MessageParser<AckDailyTasks>(() => new AckDailyTasks());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDailyTasks> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeDay" field.</summary>
    public const int ActiveDayFieldNumber = 1;
    private global::Protocol.ActiveInfo activeDay_;
    /// <summary>
    ///日活跃度信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ActiveInfo ActiveDay {
      get { return activeDay_; }
      set {
        activeDay_ = value;
      }
    }

    /// <summary>Field number for the "activeWeek" field.</summary>
    public const int ActiveWeekFieldNumber = 2;
    private global::Protocol.ActiveInfo activeWeek_;
    /// <summary>
    ///周活跃度信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ActiveInfo ActiveWeek {
      get { return activeWeek_; }
      set {
        activeWeek_ = value;
      }
    }

    /// <summary>Field number for the "taskDay" field.</summary>
    public const int TaskDayFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.TaskInfo> _repeated_taskDay_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskInfo> taskDay_ = new pbc::RepeatedField<global::Protocol.TaskInfo>();
    /// <summary>
    ///日常任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskInfo> TaskDay {
      get { return taskDay_; }
    }

    /// <summary>Field number for the "taskWeek" field.</summary>
    public const int TaskWeekFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.TaskInfo> _repeated_taskWeek_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskInfo> taskWeek_ = new pbc::RepeatedField<global::Protocol.TaskInfo>();
    /// <summary>
    ///周常任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskInfo> TaskWeek {
      get { return taskWeek_; }
    }

    /// <summary>Field number for the "taskMain" field.</summary>
    public const int TaskMainFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.TaskInfo> _repeated_taskMain_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskInfo> taskMain_ = new pbc::RepeatedField<global::Protocol.TaskInfo>();
    /// <summary>
    ///主线任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskInfo> TaskMain {
      get { return taskMain_; }
    }

    /// <summary>Field number for the "taskSpecial" field.</summary>
    public const int TaskSpecialFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.TaskInfo> _repeated_taskSpecial_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskInfo> taskSpecial_ = new pbc::RepeatedField<global::Protocol.TaskInfo>();
    /// <summary>
    ///进阶历练任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskInfo> TaskSpecial {
      get { return taskSpecial_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (activeDay_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActiveDay);
      }
      if (activeWeek_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActiveWeek);
      }
      taskDay_.WriteTo(output, _repeated_taskDay_codec);
      taskWeek_.WriteTo(output, _repeated_taskWeek_codec);
      taskMain_.WriteTo(output, _repeated_taskMain_codec);
      taskSpecial_.WriteTo(output, _repeated_taskSpecial_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (activeDay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveDay);
      }
      if (activeWeek_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveWeek);
      }
      size += taskDay_.CalculateSize(_repeated_taskDay_codec);
      size += taskWeek_.CalculateSize(_repeated_taskWeek_codec);
      size += taskMain_.CalculateSize(_repeated_taskMain_codec);
      size += taskSpecial_.CalculateSize(_repeated_taskSpecial_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (activeDay_ == null) {
              activeDay_ = new global::Protocol.ActiveInfo();
            }
            input.ReadMessage(activeDay_);
            break;
          }
          case 18: {
            if (activeWeek_ == null) {
              activeWeek_ = new global::Protocol.ActiveInfo();
            }
            input.ReadMessage(activeWeek_);
            break;
          }
          case 26: {
            taskDay_.AddEntriesFrom(input, _repeated_taskDay_codec);
            break;
          }
          case 34: {
            taskWeek_.AddEntriesFrom(input, _repeated_taskWeek_codec);
            break;
          }
          case 42: {
            taskMain_.AddEntriesFrom(input, _repeated_taskMain_codec);
            break;
          }
          case 50: {
            taskSpecial_.AddEntriesFrom(input, _repeated_taskSpecial_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求任务提交
  /// </summary>
  public sealed class ReqDailyTaskSubmit : pb::IMessage {
    private static readonly pb::MessageParser<ReqDailyTaskSubmit> _parser = new pb::MessageParser<ReqDailyTaskSubmit>(() => new ReqDailyTaskSubmit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDailyTaskSubmit> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应任务提交
  /// </summary>
  public sealed class AckDailyTaskSubmit : pb::IMessage {
    private static readonly pb::MessageParser<AckDailyTaskSubmit> _parser = new pb::MessageParser<AckDailyTaskSubmit>(() => new AckDailyTaskSubmit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDailyTaskSubmit> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求活跃度奖励领取
  /// </summary>
  public sealed class ReqDailyTaskActive : pb::IMessage {
    private static readonly pb::MessageParser<ReqDailyTaskActive> _parser = new pb::MessageParser<ReqDailyTaskActive>(() => new ReqDailyTaskActive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDailyTaskActive> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///类型1日常2周常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 2;
    private int activeId_;
    /// <summary>
    ///活跃度奖励ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ActiveId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应活跃度奖励领取
  /// </summary>
  public sealed class AckDailyTaskActive : pb::IMessage {
    private static readonly pb::MessageParser<AckDailyTaskActive> _parser = new pb::MessageParser<AckDailyTaskActive>(() => new AckDailyTaskActive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDailyTaskActive> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///日常副本通关信息
  /// </summary>
  public sealed class DungeonInfo : pb::IMessage {
    private static readonly pb::MessageParser<DungeonInfo> _parser = new pb::MessageParser<DungeonInfo>(() => new DungeonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "cofigId" field.</summary>
    public const int CofigIdFieldNumber = 1;
    private int cofigId_;
    /// <summary>
    ///副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CofigId {
      get { return cofigId_; }
      set {
        cofigId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///副本状态0未开启1可挑战2可扫荡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CofigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CofigId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CofigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CofigId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CofigId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DailyDungeonInfo : pb::IMessage {
    private static readonly pb::MessageParser<DailyDungeonInfo> _parser = new pb::MessageParser<DailyDungeonInfo>(() => new DailyDungeonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyDungeonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///副本类型1金币2经验3英雄4神器5符文
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "freeTimes" field.</summary>
    public const int FreeTimesFieldNumber = 2;
    private int freeTimes_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "remainTimes" field.</summary>
    public const int RemainTimesFieldNumber = 3;
    private int remainTimes_;
    /// <summary>
    ///剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTimes {
      get { return remainTimes_; }
      set {
        remainTimes_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.DungeonInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.DungeonInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DungeonInfo> info_ = new pbc::RepeatedField<global::Protocol.DungeonInfo>();
    /// <summary>
    ///通关信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DungeonInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeTimes);
      }
      if (RemainTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTimes);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      if (RemainTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTimes);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 24: {
            RemainTimes = input.ReadInt32();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求日常副本信息
  /// </summary>
  public sealed class ReqDailyDungeon : pb::IMessage {
    private static readonly pb::MessageParser<ReqDailyDungeon> _parser = new pb::MessageParser<ReqDailyDungeon>(() => new ReqDailyDungeon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDailyDungeon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应日常副本信息
  /// </summary>
  public sealed class AckDailyDungeon : pb::IMessage {
    private static readonly pb::MessageParser<AckDailyDungeon> _parser = new pb::MessageParser<AckDailyDungeon>(() => new AckDailyDungeon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDailyDungeon> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.DailyDungeonInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.DailyDungeonInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DailyDungeonInfo> info_ = new pbc::RepeatedField<global::Protocol.DailyDungeonInfo>();
    /// <summary>
    ///副本信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DailyDungeonInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求挑战或扫荡日常副本信息
  /// </summary>
  public sealed class ReqDailyDungeonBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqDailyDungeonBattle> _parser = new pb::MessageParser<ReqDailyDungeonBattle>(() => new ReqDailyDungeonBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDailyDungeonBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///副本类型1金币2经验3英雄4神器5符文
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cofigId" field.</summary>
    public const int CofigIdFieldNumber = 2;
    private int cofigId_;
    /// <summary>
    ///副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CofigId {
      get { return cofigId_; }
      set {
        cofigId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (CofigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CofigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CofigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CofigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            CofigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应挑战或扫荡日常副本信息
  /// </summary>
  public sealed class AckDailyDungeonBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckDailyDungeonBattle> _parser = new pb::MessageParser<AckDailyDungeonBattle>(() => new AckDailyDungeonBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDailyDungeonBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
