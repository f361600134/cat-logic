// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBHalidom.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///圣物实体
  /// </summary>
  public sealed class PBHalidomInfo : pb::IMessage {
    private static readonly pb::MessageParser<PBHalidomInfo> _parser = new pb::MessageParser<PBHalidomInfo>(() => new PBHalidomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBHalidomInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///圣物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态0:未解锁, 1:已解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///圣物等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///圣物当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 5;
    private int step_;
    /// <summary>
    ///圣物阶级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.AttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.AttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AttrInfo> attrs_ = new pbc::RepeatedField<global::Protocol.AttrInfo>();
    /// <summary>
    ///圣物增益总属性(基础属性+注能属性)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AttrInfo> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Step != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Step);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Step = input.ReadInt32();
            break;
          }
          case 82: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求圣物列表
  /// </summary>
  public sealed class ReqHalidomList : pb::IMessage {
    private static readonly pb::MessageParser<ReqHalidomList> _parser = new pb::MessageParser<ReqHalidomList>(() => new ReqHalidomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHalidomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回圣物列表
  /// </summary>
  public sealed class AckHalidomList : pb::IMessage {
    private static readonly pb::MessageParser<AckHalidomList> _parser = new pb::MessageParser<AckHalidomList>(() => new AckHalidomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHalidomList> Parser { get { return _parser; } }

    /// <summary>Field number for the "halidomList" field.</summary>
    public const int HalidomListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.PBHalidomInfo> _repeated_halidomList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.PBHalidomInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PBHalidomInfo> halidomList_ = new pbc::RepeatedField<global::Protocol.PBHalidomInfo>();
    /// <summary>
    ///圣物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PBHalidomInfo> HalidomList {
      get { return halidomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      halidomList_.WriteTo(output, _repeated_halidomList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += halidomList_.CalculateSize(_repeated_halidomList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            halidomList_.AddEntriesFrom(input, _repeated_halidomList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求圣物操作
  /// </summary>
  public sealed class ReqHalidomOpt : pb::IMessage {
    private static readonly pb::MessageParser<ReqHalidomOpt> _parser = new pb::MessageParser<ReqHalidomOpt>(() => new ReqHalidomOpt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHalidomOpt> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///圣物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "optType" field.</summary>
    public const int OptTypeFieldNumber = 2;
    private int optType_;
    /// <summary>
    ///操作类型,1:解锁,2:升级,3:升阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptType {
      get { return optType_; }
      set {
        optType_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_heroId_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> heroId_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///消耗英雄唯一id,无则空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroId {
      get { return heroId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (OptType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OptType);
      }
      heroId_.WriteTo(output, _repeated_heroId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (OptType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptType);
      }
      size += heroId_.CalculateSize(_repeated_heroId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            OptType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            heroId_.AddEntriesFrom(input, _repeated_heroId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回圣物操作
  /// </summary>
  public sealed class AckHalidomOpt : pb::IMessage {
    private static readonly pb::MessageParser<AckHalidomOpt> _parser = new pb::MessageParser<AckHalidomOpt>(() => new AckHalidomOpt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHalidomOpt> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "optType" field.</summary>
    public const int OptTypeFieldNumber = 2;
    private int optType_;
    /// <summary>
    ///操作类型,1:解锁,2:升级,3:升阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptType {
      get { return optType_; }
      set {
        optType_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private int configId_;
    /// <summary>
    ///圣物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (OptType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OptType);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (OptType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptType);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            OptType = input.ReadInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
