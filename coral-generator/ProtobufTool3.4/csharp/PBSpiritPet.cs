// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBSpiritPet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///精灵窝简要信息
  /// </summary>
  public sealed class SpiritPetNestInfo : pb::IMessage {
    private static readonly pb::MessageParser<SpiritPetNestInfo> _parser = new pb::MessageParser<SpiritPetNestInfo>(() => new SpiritPetNestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpiritPetNestInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///精灵窝状态0未开启，1可开启，2空闲，3正孵化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "eggConfigId" field.</summary>
    public const int EggConfigIdFieldNumber = 2;
    private int eggConfigId_;
    /// <summary>
    ///正在孵化精灵蛋配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EggConfigId {
      get { return eggConfigId_; }
      set {
        eggConfigId_ = value;
      }
    }

    /// <summary>Field number for the "hatchTime" field.</summary>
    public const int HatchTimeFieldNumber = 3;
    private int hatchTime_;
    /// <summary>
    ///剩余孵化时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HatchTime {
      get { return hatchTime_; }
      set {
        hatchTime_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (EggConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EggConfigId);
      }
      if (HatchTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HatchTime);
      }
      if (Position != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (EggConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggConfigId);
      }
      if (HatchTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HatchTime);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            EggConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            HatchTime = input.ReadInt32();
            break;
          }
          case 32: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///精灵Id和阵法位置
  /// </summary>
  public sealed class SpiritIdAndPosition : pb::IMessage {
    private static readonly pb::MessageParser<SpiritIdAndPosition> _parser = new pb::MessageParser<SpiritIdAndPosition>(() => new SpiritIdAndPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpiritIdAndPosition> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///精灵配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///当前位置状态0可上阵1已上阵2未开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上阵方案简要信息
  /// </summary>
  public sealed class SpiritPetMarixInfo : pb::IMessage {
    private static readonly pb::MessageParser<SpiritPetMarixInfo> _parser = new pb::MessageParser<SpiritPetMarixInfo>(() => new SpiritPetMarixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpiritPetMarixInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "indxId" field.</summary>
    public const int IndxIdFieldNumber = 1;
    private int indxId_;
    /// <summary>
    ///方案序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndxId {
      get { return indxId_; }
      set {
        indxId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///方案名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spiritPosition" field.</summary>
    public const int SpiritPositionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.SpiritIdAndPosition> _repeated_spiritPosition_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.SpiritIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> spiritPosition_ = new pbc::RepeatedField<global::Protocol.SpiritIdAndPosition>();
    /// <summary>
    ///精灵位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> SpiritPosition {
      get { return spiritPosition_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IndxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IndxId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      spiritPosition_.WriteTo(output, _repeated_spiritPosition_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IndxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndxId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += spiritPosition_.CalculateSize(_repeated_spiritPosition_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IndxId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            spiritPosition_.AddEntriesFrom(input, _repeated_spiritPosition_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵羽化
  /// </summary>
  public sealed class ReqSpiritPetResolve : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetResolve> _parser = new pb::MessageParser<ReqSpiritPetResolve>(() => new ReqSpiritPetResolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetResolve> Parser { get { return _parser; } }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    /// <summary>
    ///精灵模型Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///羽化数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵羽化
  /// </summary>
  public sealed class AckSpiritPetResolve : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetResolve> _parser = new pb::MessageParser<AckSpiritPetResolve>(() => new AckSpiritPetResolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetResolve> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵灵合
  /// </summary>
  public sealed class ReqSpiritPetUpstar : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetUpstar> _parser = new pb::MessageParser<ReqSpiritPetUpstar>(() => new ReqSpiritPetUpstar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetUpstar> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///精灵配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///请求方式1上阵精灵，2背包灵合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵灵合
  /// </summary>
  public sealed class AckSpiritPetUpstar : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetUpstar> _parser = new pb::MessageParser<AckSpiritPetUpstar>(() => new AckSpiritPetUpstar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetUpstar> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵蛋合成
  /// </summary>
  public sealed class ReqSpiritPetEggCompose : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetEggCompose> _parser = new pb::MessageParser<ReqSpiritPetEggCompose>(() => new ReqSpiritPetEggCompose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetEggCompose> Parser { get { return _parser; } }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    /// <summary>
    ///精灵模型Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///合成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵蛋合成
  /// </summary>
  public sealed class AckSpiritPetEggCompose : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetEggCompose> _parser = new pb::MessageParser<AckSpiritPetEggCompose>(() => new AckSpiritPetEggCompose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetEggCompose> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵蛋购买
  /// </summary>
  public sealed class ReqSpiritPetEggBuy : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetEggBuy> _parser = new pb::MessageParser<ReqSpiritPetEggBuy>(() => new ReqSpiritPetEggBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetEggBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    /// <summary>
    ///精灵蛋模型Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵蛋购买
  /// </summary>
  public sealed class AckSpiritPetEggBuy : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetEggBuy> _parser = new pb::MessageParser<AckSpiritPetEggBuy>(() => new AckSpiritPetEggBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetEggBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵窝信息
  /// </summary>
  public sealed class ReqSpiritPetNestInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetNestInfo> _parser = new pb::MessageParser<ReqSpiritPetNestInfo>(() => new ReqSpiritPetNestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetNestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应精灵窝信息
  /// </summary>
  public sealed class AckSpiritPetNestInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetNestInfo> _parser = new pb::MessageParser<AckSpiritPetNestInfo>(() => new AckSpiritPetNestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetNestInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "nestInfo" field.</summary>
    public const int NestInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.SpiritPetNestInfo> _repeated_nestInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.SpiritPetNestInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SpiritPetNestInfo> nestInfo_ = new pbc::RepeatedField<global::Protocol.SpiritPetNestInfo>();
    /// <summary>
    ///精灵窝列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SpiritPetNestInfo> NestInfo {
      get { return nestInfo_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///孵化列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    ///精灵总评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "blueEggNum" field.</summary>
    public const int BlueEggNumFieldNumber = 4;
    private int blueEggNum_;
    /// <summary>
    ///蓝蛋剩余购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlueEggNum {
      get { return blueEggNum_; }
      set {
        blueEggNum_ = value;
      }
    }

    /// <summary>Field number for the "purpleEggNum" field.</summary>
    public const int PurpleEggNumFieldNumber = 5;
    private int purpleEggNum_;
    /// <summary>
    ///紫蛋剩余购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PurpleEggNum {
      get { return purpleEggNum_; }
      set {
        purpleEggNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nestInfo_.WriteTo(output, _repeated_nestInfo_codec);
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (BlueEggNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BlueEggNum);
      }
      if (PurpleEggNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PurpleEggNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nestInfo_.CalculateSize(_repeated_nestInfo_codec);
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (BlueEggNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlueEggNum);
      }
      if (PurpleEggNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurpleEggNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nestInfo_.AddEntriesFrom(input, _repeated_nestInfo_codec);
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            BlueEggNum = input.ReadInt32();
            break;
          }
          case 40: {
            PurpleEggNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵窝开启
  /// </summary>
  public sealed class ReqSpiritPetNestOpen : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetNestOpen> _parser = new pb::MessageParser<ReqSpiritPetNestOpen>(() => new ReqSpiritPetNestOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetNestOpen> Parser { get { return _parser; } }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    /// <summary>
    ///精灵窝配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵窝开启
  /// </summary>
  public sealed class AckSpiritPetNestOpen : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetNestOpen> _parser = new pb::MessageParser<AckSpiritPetNestOpen>(() => new AckSpiritPetNestOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetNestOpen> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵孵化
  /// </summary>
  public sealed class ReqSpiritPetHatch : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetHatch> _parser = new pb::MessageParser<ReqSpiritPetHatch>(() => new ReqSpiritPetHatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetHatch> Parser { get { return _parser; } }

    /// <summary>Field number for the "spiritPetEggModelId" field.</summary>
    public const int SpiritPetEggModelIdFieldNumber = 1;
    private int spiritPetEggModelId_;
    /// <summary>
    ///精灵蛋模型Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpiritPetEggModelId {
      get { return spiritPetEggModelId_; }
      set {
        spiritPetEggModelId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpiritPetEggModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpiritPetEggModelId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpiritPetEggModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiritPetEggModelId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpiritPetEggModelId = input.ReadInt32();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵孵化
  /// </summary>
  public sealed class AckSpiritPetHatch : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetHatch> _parser = new pb::MessageParser<AckSpiritPetHatch>(() => new AckSpiritPetHatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetHatch> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求古树信息
  /// </summary>
  public sealed class ReqSpiritPetTreeInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetTreeInfo> _parser = new pb::MessageParser<ReqSpiritPetTreeInfo>(() => new ReqSpiritPetTreeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetTreeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应古树信息
  /// </summary>
  public sealed class AckSpiritPetTreeInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetTreeInfo> _parser = new pb::MessageParser<AckSpiritPetTreeInfo>(() => new AckSpiritPetTreeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetTreeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///复苏等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private int order_;
    /// <summary>
    ///阶数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "spiritPosition" field.</summary>
    public const int SpiritPositionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.SpiritIdAndPosition> _repeated_spiritPosition_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.SpiritIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> spiritPosition_ = new pbc::RepeatedField<global::Protocol.SpiritIdAndPosition>();
    /// <summary>
    ///精灵位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> SpiritPosition {
      get { return spiritPosition_; }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 4;
    private int grade_;
    /// <summary>
    ///评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Order != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Order);
      }
      spiritPosition_.WriteTo(output, _repeated_spiritPosition_codec);
      if (Grade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Grade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      size += spiritPosition_.CalculateSize(_repeated_spiritPosition_codec);
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Order = input.ReadInt32();
            break;
          }
          case 26: {
            spiritPosition_.AddEntriesFrom(input, _repeated_spiritPosition_codec);
            break;
          }
          case 32: {
            Grade = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求古树复苏
  /// </summary>
  public sealed class ReqSpiritPetTreeRevive : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetTreeRevive> _parser = new pb::MessageParser<ReqSpiritPetTreeRevive>(() => new ReqSpiritPetTreeRevive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetTreeRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应古树复苏
  /// </summary>
  public sealed class AckSpiritPetTreeRevive : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetTreeRevive> _parser = new pb::MessageParser<AckSpiritPetTreeRevive>(() => new AckSpiritPetTreeRevive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetTreeRevive> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求古树唤醒
  /// </summary>
  public sealed class ReqSpiritPetTreeWakeUp : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetTreeWakeUp> _parser = new pb::MessageParser<ReqSpiritPetTreeWakeUp>(() => new ReqSpiritPetTreeWakeUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetTreeWakeUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应古树唤醒
  /// </summary>
  public sealed class AckSpiritPetTreeWakeUp : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetTreeWakeUp> _parser = new pb::MessageParser<AckSpiritPetTreeWakeUp>(() => new AckSpiritPetTreeWakeUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetTreeWakeUp> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵上阵方案信息
  /// </summary>
  public sealed class ReqSpiritPetMarixInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetMarixInfo> _parser = new pb::MessageParser<ReqSpiritPetMarixInfo>(() => new ReqSpiritPetMarixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetMarixInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应精灵上阵方案信息
  /// </summary>
  public sealed class AckSpiritPetMarixInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetMarixInfo> _parser = new pb::MessageParser<AckSpiritPetMarixInfo>(() => new AckSpiritPetMarixInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetMarixInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "marixInfo" field.</summary>
    public const int MarixInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.SpiritPetMarixInfo> _repeated_marixInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.SpiritPetMarixInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SpiritPetMarixInfo> marixInfo_ = new pbc::RepeatedField<global::Protocol.SpiritPetMarixInfo>();
    /// <summary>
    ///方案列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SpiritPetMarixInfo> MarixInfo {
      get { return marixInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      marixInfo_.WriteTo(output, _repeated_marixInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marixInfo_.CalculateSize(_repeated_marixInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            marixInfo_.AddEntriesFrom(input, _repeated_marixInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵方案改名
  /// </summary>
  public sealed class ReqSpiritPetMarixNameChange : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetMarixNameChange> _parser = new pb::MessageParser<ReqSpiritPetMarixNameChange>(() => new ReqSpiritPetMarixNameChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetMarixNameChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private int planId_;
    /// <summary>
    ///方案id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanId {
      get { return planId_; }
      set {
        planId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///方案名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵方案改名
  /// </summary>
  public sealed class AckSpiritPetMarixNameChange : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetMarixNameChange> _parser = new pb::MessageParser<AckSpiritPetMarixNameChange>(() => new AckSpiritPetMarixNameChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetMarixNameChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵方案装配
  /// </summary>
  public sealed class ReqSpiritPetMarixBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetMarixBattle> _parser = new pb::MessageParser<ReqSpiritPetMarixBattle>(() => new ReqSpiritPetMarixBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetMarixBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private int planId_;
    /// <summary>
    ///选择的方案Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanId {
      get { return planId_; }
      set {
        planId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵方案装配
  /// </summary>
  public sealed class AckSpiritPetMarixBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetMarixBattle> _parser = new pb::MessageParser<AckSpiritPetMarixBattle>(() => new AckSpiritPetMarixBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetMarixBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵上阵方案开启
  /// </summary>
  public sealed class ReqSpiritPetMarixOpen : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetMarixOpen> _parser = new pb::MessageParser<ReqSpiritPetMarixOpen>(() => new ReqSpiritPetMarixOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetMarixOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应精灵上阵方案开启
  /// </summary>
  public sealed class AckSpiritPetMarixOpen : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetMarixOpen> _parser = new pb::MessageParser<AckSpiritPetMarixOpen>(() => new AckSpiritPetMarixOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetMarixOpen> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵上阵方案修改
  /// </summary>
  public sealed class ReqSpiritPetMarixChange : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetMarixChange> _parser = new pb::MessageParser<ReqSpiritPetMarixChange>(() => new ReqSpiritPetMarixChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetMarixChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private int planId_;
    /// <summary>
    ///修改的方案Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanId {
      get { return planId_; }
      set {
        planId_ = value;
      }
    }

    /// <summary>Field number for the "spiritPosition" field.</summary>
    public const int SpiritPositionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.SpiritIdAndPosition> _repeated_spiritPosition_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.SpiritIdAndPosition.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> spiritPosition_ = new pbc::RepeatedField<global::Protocol.SpiritIdAndPosition>();
    /// <summary>
    ///精灵位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SpiritIdAndPosition> SpiritPosition {
      get { return spiritPosition_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanId);
      }
      spiritPosition_.WriteTo(output, _repeated_spiritPosition_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanId);
      }
      size += spiritPosition_.CalculateSize(_repeated_spiritPosition_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanId = input.ReadInt32();
            break;
          }
          case 26: {
            spiritPosition_.AddEntriesFrom(input, _repeated_spiritPosition_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵上阵方案修改
  /// </summary>
  public sealed class AckSpiritPetMarixChange : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetMarixChange> _parser = new pb::MessageParser<AckSpiritPetMarixChange>(() => new AckSpiritPetMarixChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetMarixChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵召唤界面信息
  /// </summary>
  public sealed class ReqSpiritPetSummonInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetSummonInfo> _parser = new pb::MessageParser<ReqSpiritPetSummonInfo>(() => new ReqSpiritPetSummonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetSummonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应精灵召唤界面信息
  /// </summary>
  public sealed class AckSpiritPetSummonInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetSummonInfo> _parser = new pb::MessageParser<AckSpiritPetSummonInfo>(() => new AckSpiritPetSummonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetSummonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 1;
    private int integral_;
    /// <summary>
    ///累积积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "wishConfigId" field.</summary>
    public const int WishConfigIdFieldNumber = 2;
    private int wishConfigId_;
    /// <summary>
    ///许愿池配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WishConfigId {
      get { return wishConfigId_; }
      set {
        wishConfigId_ = value;
      }
    }

    /// <summary>Field number for the "summonNum" field.</summary>
    public const int SummonNumFieldNumber = 3;
    private int summonNum_;
    /// <summary>
    ///钻石召唤次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonNum {
      get { return summonNum_; }
      set {
        summonNum_ = value;
      }
    }

    /// <summary>Field number for the "summonTime" field.</summary>
    public const int SummonTimeFieldNumber = 4;
    private long summonTime_;
    /// <summary>
    ///刷新倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SummonTime {
      get { return summonTime_; }
      set {
        summonTime_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_rewards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> rewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取过的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Integral != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Integral);
      }
      if (WishConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WishConfigId);
      }
      if (SummonNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SummonNum);
      }
      if (SummonTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SummonTime);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      if (WishConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WishConfigId);
      }
      if (SummonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonNum);
      }
      if (SummonTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SummonTime);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Integral = input.ReadInt32();
            break;
          }
          case 16: {
            WishConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            SummonNum = input.ReadInt32();
            break;
          }
          case 32: {
            SummonTime = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵召唤
  /// </summary>
  public sealed class ReqSpiritPetSummon : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetSummon> _parser = new pb::MessageParser<ReqSpiritPetSummon>(() => new ReqSpiritPetSummon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetSummon> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///召唤次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵召唤
  /// </summary>
  public sealed class AckSpiritPetSummon : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetSummon> _parser = new pb::MessageParser<AckSpiritPetSummon>(() => new AckSpiritPetSummon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetSummon> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> rewards_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///召唤列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "summonNum" field.</summary>
    public const int SummonNumFieldNumber = 3;
    private int summonNum_;
    /// <summary>
    ///召唤次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonNum {
      get { return summonNum_; }
      set {
        summonNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (SummonNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SummonNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (SummonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 24: {
            SummonNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵许愿池选择
  /// </summary>
  public sealed class ReqSpiritPetWish : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetWish> _parser = new pb::MessageParser<ReqSpiritPetWish>(() => new ReqSpiritPetWish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetWish> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///精灵配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵许愿池选择
  /// </summary>
  public sealed class AckSpiritPetWish : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetWish> _parser = new pb::MessageParser<AckSpiritPetWish>(() => new AckSpiritPetWish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetWish> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精灵召唤积分领取奖励
  /// </summary>
  public sealed class ReqSpiritPetIntegralAward : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpiritPetIntegralAward> _parser = new pb::MessageParser<ReqSpiritPetIntegralAward>(() => new ReqSpiritPetIntegralAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSpiritPetIntegralAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应精灵召唤积分领取奖励
  /// </summary>
  public sealed class AckSpiritPetIntegralAward : pb::IMessage {
    private static readonly pb::MessageParser<AckSpiritPetIntegralAward> _parser = new pb::MessageParser<AckSpiritPetIntegralAward>(() => new AckSpiritPetIntegralAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSpiritPetIntegralAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///响应状态0为成功1为失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
