// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBGuild.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///公会成员信息
  /// </summary>
  public sealed class GuildMember : pb::IMessage {
    private static readonly pb::MessageParser<GuildMember> _parser = new pb::MessageParser<GuildMember>(() => new GuildMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Protocol.PlayerProfile playerInfo_;
    /// <summary>
    ///玩家基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerProfile PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 2;
    private int job_;
    /// <summary>
    ///职位id(3会长2副会长1成员)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private int point_;
    /// <summary>
    ///公会贡献点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "todayPoint" field.</summary>
    public const int TodayPointFieldNumber = 4;
    private int todayPoint_;
    /// <summary>
    ///今日贡献点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayPoint {
      get { return todayPoint_; }
      set {
        todayPoint_ = value;
      }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 5;
    private int activeLevel_;
    /// <summary>
    ///活跃等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (Job != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Job);
      }
      if (Point != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Point);
      }
      if (TodayPoint != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TodayPoint);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Job);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (TodayPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayPoint);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Protocol.PlayerProfile();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            Job = input.ReadInt32();
            break;
          }
          case 24: {
            Point = input.ReadInt32();
            break;
          }
          case 32: {
            TodayPoint = input.ReadInt32();
            break;
          }
          case 40: {
            ActiveLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会加入限制条件
  /// </summary>
  public sealed class GuildLimitCondition : pb::IMessage {
    private static readonly pb::MessageParser<GuildLimitCondition> _parser = new pb::MessageParser<GuildLimitCondition>(() => new GuildLimitCondition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildLimitCondition> Parser { get { return _parser; } }

    /// <summary>Field number for the "checking" field.</summary>
    public const int CheckingFieldNumber = 1;
    private bool checking_;
    /// <summary>
    ///是否需要验证（0:申请直接通过，1：需要验证通过）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Checking {
      get { return checking_; }
      set {
        checking_ = value;
      }
    }

    /// <summary>Field number for the "playerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 2;
    private int playerLevel_;
    /// <summary>
    ///玩家等级要求（>=）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "playerPower" field.</summary>
    public const int PlayerPowerFieldNumber = 3;
    private int playerPower_;
    /// <summary>
    ///玩家战力要求（>=）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPower {
      get { return playerPower_; }
      set {
        playerPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Checking != false) {
        output.WriteRawTag(8);
        output.WriteBool(Checking);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerLevel);
      }
      if (PlayerPower != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Checking != false) {
        size += 1 + 1;
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (PlayerPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Checking = input.ReadBool();
            break;
          }
          case 16: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会基础信息
  /// </summary>
  public sealed class GuildInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildInfo> _parser = new pb::MessageParser<GuildInfo>(() => new GuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private long guildId_;
    /// <summary>
    ///家族ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private string guildName_ = "";
    /// <summary>
    ///家族名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "masterName" field.</summary>
    public const int MasterNameFieldNumber = 3;
    private string masterName_ = "";
    /// <summary>
    ///会长名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterName {
      get { return masterName_; }
      set {
        masterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildLevel" field.</summary>
    public const int GuildLevelFieldNumber = 4;
    private int guildLevel_;
    /// <summary>
    ///家族等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLevel {
      get { return guildLevel_; }
      set {
        guildLevel_ = value;
      }
    }

    /// <summary>Field number for the "guildExp" field.</summary>
    public const int GuildExpFieldNumber = 5;
    private int guildExp_;
    /// <summary>
    ///家族经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildExp {
      get { return guildExp_; }
      set {
        guildExp_ = value;
      }
    }

    /// <summary>Field number for the "playerNum" field.</summary>
    public const int PlayerNumFieldNumber = 6;
    private int playerNum_;
    /// <summary>
    ///现有公会成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerNum {
      get { return playerNum_; }
      set {
        playerNum_ = value;
      }
    }

    /// <summary>Field number for the "playerMaxNum" field.</summary>
    public const int PlayerMaxNumFieldNumber = 7;
    private int playerMaxNum_;
    /// <summary>
    ///公会成员最大容量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerMaxNum {
      get { return playerMaxNum_; }
      set {
        playerMaxNum_ = value;
      }
    }

    /// <summary>Field number for the "guildNotice" field.</summary>
    public const int GuildNoticeFieldNumber = 8;
    private string guildNotice_ = "";
    /// <summary>
    ///家族公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildNotice {
      get { return guildNotice_; }
      set {
        guildNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 9;
    private global::Protocol.GuildLimitCondition condition_;
    /// <summary>
    ///限制条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuildLimitCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "recruitTimes" field.</summary>
    public const int RecruitTimesFieldNumber = 10;
    private int recruitTimes_;
    /// <summary>
    ///招募次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecruitTimes {
      get { return recruitTimes_; }
      set {
        recruitTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GuildName);
      }
      if (MasterName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MasterName);
      }
      if (GuildLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GuildLevel);
      }
      if (GuildExp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GuildExp);
      }
      if (PlayerNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerNum);
      }
      if (PlayerMaxNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PlayerMaxNum);
      }
      if (GuildNotice.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GuildNotice);
      }
      if (condition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Condition);
      }
      if (RecruitTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RecruitTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (MasterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterName);
      }
      if (GuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildLevel);
      }
      if (GuildExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildExp);
      }
      if (PlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
      }
      if (PlayerMaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerMaxNum);
      }
      if (GuildNotice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildNotice);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (RecruitTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecruitTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadString();
            break;
          }
          case 26: {
            MasterName = input.ReadString();
            break;
          }
          case 32: {
            GuildLevel = input.ReadInt32();
            break;
          }
          case 40: {
            GuildExp = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerNum = input.ReadInt32();
            break;
          }
          case 56: {
            PlayerMaxNum = input.ReadInt32();
            break;
          }
          case 66: {
            GuildNotice = input.ReadString();
            break;
          }
          case 74: {
            if (condition_ == null) {
              condition_ = new global::Protocol.GuildLimitCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 80: {
            RecruitTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新公会基础信息
  /// </summary>
  public sealed class AckGuildInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildInfo> _parser = new pb::MessageParser<AckGuildInfo>(() => new AckGuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "guild" field.</summary>
    public const int GuildFieldNumber = 1;
    private global::Protocol.GuildInfo guild_;
    /// <summary>
    ///公会基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuildInfo Guild {
      get { return guild_; }
      set {
        guild_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guild_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guild);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guild_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guild_ == null) {
              guild_ = new global::Protocol.GuildInfo();
            }
            input.ReadMessage(guild_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求公会成员列表
  /// </summary>
  public sealed class ReqGuildPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildPlayerInfo> _parser = new pb::MessageParser<ReqGuildPlayerInfo>(() => new ReqGuildPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回公会成员列表
  /// </summary>
  public sealed class AckGuildPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildPlayerInfo> _parser = new pb::MessageParser<AckGuildPlayerInfo>(() => new AckGuildPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildPlayerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.GuildMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.GuildMember.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildMember> members_ = new pbc::RepeatedField<global::Protocol.GuildMember>();
    /// <summary>
    ///成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新公会成员信息
  /// </summary>
  public sealed class AckUpdateGuildPlayer : pb::IMessage {
    private static readonly pb::MessageParser<AckUpdateGuildPlayer> _parser = new pb::MessageParser<AckUpdateGuildPlayer>(() => new AckUpdateGuildPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckUpdateGuildPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 1;
    private global::Protocol.GuildMember member_;
    /// <summary>
    ///成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuildMember Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///操作类型(1任命会长2任命副公会3解除任命4逐出公会)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (member_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Member);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (member_ == null) {
              member_ = new global::Protocol.GuildMember();
            }
            input.ReadMessage(member_);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求搜索公会列表
  /// </summary>
  public sealed class ReqSearchGuildList : pb::IMessage {
    private static readonly pb::MessageParser<ReqSearchGuildList> _parser = new pb::MessageParser<ReqSearchGuildList>(() => new ReqSearchGuildList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchGuildList> Parser { get { return _parser; } }

    /// <summary>Field number for the "inputString" field.</summary>
    public const int InputStringFieldNumber = 1;
    private string inputString_ = "";
    /// <summary>
    ///要搜索的家族的名字,不填表示正常获取列表,不搜索
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputString {
      get { return inputString_; }
      set {
        inputString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InputString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InputString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回搜索列表
  /// </summary>
  public sealed class AckSearchGuildList : pb::IMessage {
    private static readonly pb::MessageParser<AckSearchGuildList> _parser = new pb::MessageParser<AckSearchGuildList>(() => new AckSearchGuildList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchGuildList> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "guildList" field.</summary>
    public const int GuildListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.GuildInfo> _repeated_guildList_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.GuildInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildInfo> guildList_ = new pbc::RepeatedField<global::Protocol.GuildInfo>();
    /// <summary>
    ///返回搜索出来的公会列表  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildInfo> GuildList {
      get { return guildList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      guildList_.WriteTo(output, _repeated_guildList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += guildList_.CalculateSize(_repeated_guildList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 26: {
            guildList_.AddEntriesFrom(input, _repeated_guildList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建公会
  /// </summary>
  public sealed class ReqCreateGuild : pb::IMessage {
    private static readonly pb::MessageParser<ReqCreateGuild> _parser = new pb::MessageParser<ReqCreateGuild>(() => new ReqCreateGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCreateGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private string guildName_ = "";
    /// <summary>
    ///家族名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildNotice" field.</summary>
    public const int GuildNoticeFieldNumber = 2;
    private string guildNotice_ = "";
    /// <summary>
    ///家族公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildNotice {
      get { return guildNotice_; }
      set {
        guildNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private global::Protocol.GuildLimitCondition condition_;
    /// <summary>
    ///限制条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuildLimitCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GuildName);
      }
      if (GuildNotice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GuildNotice);
      }
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (GuildNotice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildNotice);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GuildName = input.ReadString();
            break;
          }
          case 18: {
            GuildNotice = input.ReadString();
            break;
          }
          case 26: {
            if (condition_ == null) {
              condition_ = new global::Protocol.GuildLimitCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回创建公会
  /// </summary>
  public sealed class AckCreateGuild : pb::IMessage {
    private static readonly pb::MessageParser<AckCreateGuild> _parser = new pb::MessageParser<AckCreateGuild>(() => new AckCreateGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckCreateGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///创建公会返回码（0成功，1失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入公会
  /// </summary>
  public sealed class ReqJoinGuild : pb::IMessage {
    private static readonly pb::MessageParser<ReqJoinGuild> _parser = new pb::MessageParser<ReqJoinGuild>(() => new ReqJoinGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqJoinGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private long guildId_;
    /// <summary>
    ///申请的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回申请加入公会
  /// </summary>
  public sealed class AckJoinGuild : pb::IMessage {
    private static readonly pb::MessageParser<AckJoinGuild> _parser = new pb::MessageParser<AckJoinGuild>(() => new AckJoinGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckJoinGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///申请公会返回码（0成功，1失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改公会公告
  /// </summary>
  public sealed class ReqChangeNotice : pb::IMessage {
    private static readonly pb::MessageParser<ReqChangeNotice> _parser = new pb::MessageParser<ReqChangeNotice>(() => new ReqChangeNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChangeNotice> Parser { get { return _parser; } }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    ///输入的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回修改公会公告
  /// </summary>
  public sealed class AckChangeNotice : pb::IMessage {
    private static readonly pb::MessageParser<AckChangeNotice> _parser = new pb::MessageParser<AckChangeNotice>(() => new AckChangeNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChangeNotice> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///返回错误码(0成功，1失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求公会申请人员列表
  /// </summary>
  public sealed class ReqApplyPlayerList : pb::IMessage {
    private static readonly pb::MessageParser<ReqApplyPlayerList> _parser = new pb::MessageParser<ReqApplyPlayerList>(() => new ReqApplyPlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqApplyPlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回公会申请人员列表
  /// </summary>
  public sealed class AckApplyPlayerList : pb::IMessage {
    private static readonly pb::MessageParser<AckApplyPlayerList> _parser = new pb::MessageParser<AckApplyPlayerList>(() => new AckApplyPlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckApplyPlayerList> Parser { get { return _parser; } }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.PlayerProfile> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.PlayerProfile.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PlayerProfile> players_ = new pbc::RepeatedField<global::Protocol.PlayerProfile>();
    /// <summary>
    ///申请者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PlayerProfile> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///对申请人员的操作
  /// </summary>
  public sealed class ReqPlayerApply : pb::IMessage {
    private static readonly pb::MessageParser<ReqPlayerApply> _parser = new pb::MessageParser<ReqPlayerApply>(() => new ReqPlayerApply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPlayerApply> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///(0同意，1拒绝)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回操作
  /// </summary>
  public sealed class AckPlayerApply : pb::IMessage {
    private static readonly pb::MessageParser<AckPlayerApply> _parser = new pb::MessageParser<AckPlayerApply>(() => new AckPlayerApply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerApply> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///返回错误码(0成功，1失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "delPlayerId" field.</summary>
    public const int DelPlayerIdFieldNumber = 2;
    private long delPlayerId_;
    /// <summary>
    ///无论成功或失败，均删除该申请人员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DelPlayerId {
      get { return delPlayerId_; }
      set {
        delPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (DelPlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DelPlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (DelPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DelPlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            DelPlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求对公会成员的管理
  /// </summary>
  public sealed class ReqManagerPlayer : pb::IMessage {
    private static readonly pb::MessageParser<ReqManagerPlayer> _parser = new pb::MessageParser<ReqManagerPlayer>(() => new ReqManagerPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqManagerPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///(1任命会长2任命副公会3解除任命4逐出公会)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回管理操作
  /// </summary>
  public sealed class AckManagerPlayer : pb::IMessage {
    private static readonly pb::MessageParser<AckManagerPlayer> _parser = new pb::MessageParser<AckManagerPlayer>(() => new AckManagerPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckManagerPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///返回错误码(0成功，1失败)，无论成功失败，均返回成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请退出公会
  /// </summary>
  public sealed class ReqExitGuild : pb::IMessage {
    private static readonly pb::MessageParser<ReqExitGuild> _parser = new pb::MessageParser<ReqExitGuild>(() => new ReqExitGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqExitGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回退出公会
  /// </summary>
  public sealed class AckExitGuild : pb::IMessage {
    private static readonly pb::MessageParser<AckExitGuild> _parser = new pb::MessageParser<AckExitGuild>(() => new AckExitGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckExitGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///返回错误码(0成功，1失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求修改公会名
  /// </summary>
  public sealed class ReqChangeGuildName : pb::IMessage {
    private static readonly pb::MessageParser<ReqChangeGuildName> _parser = new pb::MessageParser<ReqChangeGuildName>(() => new ReqChangeGuildName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChangeGuildName> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///新名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回修改公会名
  /// </summary>
  public sealed class AckChangeGuildName : pb::IMessage {
    private static readonly pb::MessageParser<AckChangeGuildName> _parser = new pb::MessageParser<AckChangeGuildName>(() => new AckChangeGuildName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChangeGuildName> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求修改公会入会规则
  /// </summary>
  public sealed class ReqChangeJoinGuildSet : pb::IMessage {
    private static readonly pb::MessageParser<ReqChangeJoinGuildSet> _parser = new pb::MessageParser<ReqChangeJoinGuildSet>(() => new ReqChangeJoinGuildSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqChangeJoinGuildSet> Parser { get { return _parser; } }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private global::Protocol.GuildLimitCondition condition_;
    /// <summary>
    ///限制条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuildLimitCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (condition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (condition_ == null) {
              condition_ = new global::Protocol.GuildLimitCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回修改公会入会规则
  /// </summary>
  public sealed class AckChangeJoinGuildSet : pb::IMessage {
    private static readonly pb::MessageParser<AckChangeJoinGuildSet> _parser = new pb::MessageParser<AckChangeJoinGuildSet>(() => new AckChangeJoinGuildSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckChangeJoinGuildSet> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求解散公会
  /// </summary>
  public sealed class ReqDismissGuild : pb::IMessage {
    private static readonly pb::MessageParser<ReqDismissGuild> _parser = new pb::MessageParser<ReqDismissGuild>(() => new ReqDismissGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDismissGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回解散公会
  /// </summary>
  public sealed class AckDismissGuild : pb::IMessage {
    private static readonly pb::MessageParser<AckDismissGuild> _parser = new pb::MessageParser<AckDismissGuild>(() => new AckDismissGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDismissGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求招募
  /// </summary>
  public sealed class ReqGuildRecruit : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildRecruit> _parser = new pb::MessageParser<ReqGuildRecruit>(() => new ReqGuildRecruit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildRecruit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回招募
  /// </summary>
  public sealed class AckGuildRecruit : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildRecruit> _parser = new pb::MessageParser<AckGuildRecruit>(() => new AckGuildRecruit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildRecruit> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会捐献信息
  /// </summary>
  public sealed class ReqGuildDonateInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDonateInfo> _parser = new pb::MessageParser<ReqGuildDonateInfo>(() => new ReqGuildDonateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDonateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildDonateInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDonateInfo> _parser = new pb::MessageParser<AckGuildDonateInfo>(() => new AckGuildDonateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDonateInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///今日捐献0未捐献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 2;
    private int integral_;
    /// <summary>
    ///今日捐献总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_rewards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> rewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取过的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Integral != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Integral);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Integral = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会捐献
  /// </summary>
  public sealed class ReqGuildDonate : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDonate> _parser = new pb::MessageParser<ReqGuildDonate>(() => new ReqGuildDonate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDonate> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///捐献类型1金币，2钻石，3至尊钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildDonate : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDonate> _parser = new pb::MessageParser<AckGuildDonate>(() => new AckGuildDonate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDonate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///公会捐献奖励领取
  /// </summary>
  public sealed class ReqGuildDonateReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDonateReward> _parser = new pb::MessageParser<ReqGuildDonateReward>(() => new ReqGuildDonateReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDonateReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildDonateReward : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDonateReward> _parser = new pb::MessageParser<AckGuildDonateReward>(() => new AckGuildDonateReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDonateReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///公会活跃度信息
  /// </summary>
  public sealed class ReqGuildActiveInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildActiveInfo> _parser = new pb::MessageParser<ReqGuildActiveInfo>(() => new ReqGuildActiveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildActiveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildActiveInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildActiveInfo> _parser = new pb::MessageParser<AckGuildActiveInfo>(() => new AckGuildActiveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildActiveInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildActive" field.</summary>
    public const int GuildActiveFieldNumber = 1;
    private int guildActive_;
    /// <summary>
    ///公会活跃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildActive {
      get { return guildActive_; }
      set {
        guildActive_ = value;
      }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 2;
    private int activeLevel_;
    /// <summary>
    ///个人活跃等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    /// <summary>Field number for the "activeExp" field.</summary>
    public const int ActiveExpFieldNumber = 3;
    private int activeExp_;
    /// <summary>
    ///个人活跃经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveExp {
      get { return activeExp_; }
      set {
        activeExp_ = value;
      }
    }

    /// <summary>Field number for the "activeTask" field.</summary>
    public const int ActiveTaskFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.TaskInfo> _repeated_activeTask_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskInfo> activeTask_ = new pbc::RepeatedField<global::Protocol.TaskInfo>();
    /// <summary>
    ///活跃任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskInfo> ActiveTask {
      get { return activeTask_; }
    }

    /// <summary>Field number for the "activeHaloId" field.</summary>
    public const int ActiveHaloIdFieldNumber = 5;
    private int activeHaloId_;
    /// <summary>
    ///活跃光环Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveHaloId {
      get { return activeHaloId_; }
      set {
        activeHaloId_ = value;
      }
    }

    /// <summary>Field number for the "activeToday" field.</summary>
    public const int ActiveTodayFieldNumber = 6;
    private int activeToday_;
    /// <summary>
    ///今日已获活跃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveToday {
      get { return activeToday_; }
      set {
        activeToday_ = value;
      }
    }

    /// <summary>Field number for the "activeWeek" field.</summary>
    public const int ActiveWeekFieldNumber = 7;
    private int activeWeek_;
    /// <summary>
    ///本周已获活跃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveWeek {
      get { return activeWeek_; }
      set {
        activeWeek_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildActive != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuildActive);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLevel);
      }
      if (ActiveExp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveExp);
      }
      activeTask_.WriteTo(output, _repeated_activeTask_codec);
      if (ActiveHaloId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveHaloId);
      }
      if (ActiveToday != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ActiveToday);
      }
      if (ActiveWeek != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ActiveWeek);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildActive);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      if (ActiveExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveExp);
      }
      size += activeTask_.CalculateSize(_repeated_activeTask_codec);
      if (ActiveHaloId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveHaloId);
      }
      if (ActiveToday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveToday);
      }
      if (ActiveWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveWeek);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildActive = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveExp = input.ReadInt32();
            break;
          }
          case 34: {
            activeTask_.AddEntriesFrom(input, _repeated_activeTask_codec);
            break;
          }
          case 40: {
            ActiveHaloId = input.ReadInt32();
            break;
          }
          case 48: {
            ActiveToday = input.ReadInt32();
            break;
          }
          case 56: {
            ActiveWeek = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会活跃升级领取奖励
  /// </summary>
  public sealed class ReqGuildActiveReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildActiveReward> _parser = new pb::MessageParser<ReqGuildActiveReward>(() => new ReqGuildActiveReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildActiveReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildActiveReward : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildActiveReward> _parser = new pb::MessageParser<AckGuildActiveReward>(() => new AckGuildActiveReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildActiveReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///公会活跃光环选择
  /// </summary>
  public sealed class ReqGuildActiveHalo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildActiveHalo> _parser = new pb::MessageParser<ReqGuildActiveHalo>(() => new ReqGuildActiveHalo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildActiveHalo> Parser { get { return _parser; } }

    /// <summary>Field number for the "haloId" field.</summary>
    public const int HaloIdFieldNumber = 1;
    private int haloId_;
    /// <summary>
    ///光环Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HaloId {
      get { return haloId_; }
      set {
        haloId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HaloId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HaloId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HaloId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HaloId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HaloId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildActiveHalo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildActiveHalo> _parser = new pb::MessageParser<AckGuildActiveHalo>(() => new AckGuildActiveHalo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildActiveHalo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///活跃任务完成
  /// </summary>
  public sealed class ReqGuildActiveTask : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildActiveTask> _parser = new pb::MessageParser<ReqGuildActiveTask>(() => new ReqGuildActiveTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildActiveTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildActiveTask : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildActiveTask> _parser = new pb::MessageParser<AckGuildActiveTask>(() => new AckGuildActiveTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildActiveTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////
  ///技能信息
  /// </summary>
  public sealed class GuildSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildSkillInfo> _parser = new pb::MessageParser<GuildSkillInfo>(() => new GuildSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildSkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "jobType" field.</summary>
    public const int JobTypeFieldNumber = 1;
    private int jobType_;
    /// <summary>
    ///种族类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    /// <summary>Field number for the "skillConfigId" field.</summary>
    public const int SkillConfigIdFieldNumber = 2;
    private int skillConfigId_;
    /// <summary>
    ///技能配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillConfigId {
      get { return skillConfigId_; }
      set {
        skillConfigId_ = value;
      }
    }

    /// <summary>Field number for the "skillResetNum" field.</summary>
    public const int SkillResetNumFieldNumber = 3;
    private int skillResetNum_;
    /// <summary>
    ///技能重置次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillResetNum {
      get { return skillResetNum_; }
      set {
        skillResetNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JobType);
      }
      if (SkillConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillConfigId);
      }
      if (SkillResetNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillResetNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobType);
      }
      if (SkillConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillConfigId);
      }
      if (SkillResetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillResetNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JobType = input.ReadInt32();
            break;
          }
          case 16: {
            SkillConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillResetNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会常规技能信息
  /// </summary>
  public sealed class ReqGuildNormalSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildNormalSkillInfo> _parser = new pb::MessageParser<ReqGuildNormalSkillInfo>(() => new ReqGuildNormalSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildNormalSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildNormalSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildNormalSkillInfo> _parser = new pb::MessageParser<AckGuildNormalSkillInfo>(() => new AckGuildNormalSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildNormalSkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillInfo" field.</summary>
    public const int SkillInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.GuildSkillInfo> _repeated_skillInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.GuildSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildSkillInfo> skillInfo_ = new pbc::RepeatedField<global::Protocol.GuildSkillInfo>();
    /// <summary>
    ///技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildSkillInfo> SkillInfo {
      get { return skillInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillInfo_.WriteTo(output, _repeated_skillInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillInfo_.CalculateSize(_repeated_skillInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillInfo_.AddEntriesFrom(input, _repeated_skillInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会PVP技能信息
  /// </summary>
  public sealed class ReqGuildPVPSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildPVPSkillInfo> _parser = new pb::MessageParser<ReqGuildPVPSkillInfo>(() => new ReqGuildPVPSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildPVPSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildPVPSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildPVPSkillInfo> _parser = new pb::MessageParser<AckGuildPVPSkillInfo>(() => new AckGuildPVPSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildPVPSkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillInfo" field.</summary>
    public const int SkillInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.GuildSkillInfo> _repeated_skillInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.GuildSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildSkillInfo> skillInfo_ = new pbc::RepeatedField<global::Protocol.GuildSkillInfo>();
    /// <summary>
    ///技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildSkillInfo> SkillInfo {
      get { return skillInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillInfo_.WriteTo(output, _repeated_skillInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillInfo_.CalculateSize(_repeated_skillInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillInfo_.AddEntriesFrom(input, _repeated_skillInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会技能升级
  /// </summary>
  public sealed class ReqGuildSkillUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildSkillUpgrade> _parser = new pb::MessageParser<ReqGuildSkillUpgrade>(() => new ReqGuildSkillUpgrade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildSkillUpgrade> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private int skillType_;
    /// <summary>
    ///技能类型 1常规，2pvp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "jobType" field.</summary>
    public const int JobTypeFieldNumber = 2;
    private int jobType_;
    /// <summary>
    ///职业类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillType);
      }
      if (JobType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JobType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillType);
      }
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillType = input.ReadInt32();
            break;
          }
          case 16: {
            JobType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildSkillUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildSkillUpgrade> _parser = new pb::MessageParser<AckGuildSkillUpgrade>(() => new AckGuildSkillUpgrade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildSkillUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///公会技能重置
  /// </summary>
  public sealed class ReqGuildSkillReset : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildSkillReset> _parser = new pb::MessageParser<ReqGuildSkillReset>(() => new ReqGuildSkillReset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildSkillReset> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private int skillType_;
    /// <summary>
    ///技能类型 1常规，2pvp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "jobType" field.</summary>
    public const int JobTypeFieldNumber = 2;
    private int jobType_;
    /// <summary>
    ///职业类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillType);
      }
      if (JobType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JobType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillType);
      }
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillType = input.ReadInt32();
            break;
          }
          case 16: {
            JobType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildSkillReset : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildSkillReset> _parser = new pb::MessageParser<AckGuildSkillReset>(() => new AckGuildSkillReset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildSkillReset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////////////////
  ///工会宝库物品信息
  /// </summary>
  public sealed class GuildTreasuryInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildTreasuryInfo> _parser = new pb::MessageParser<GuildTreasuryInfo>(() => new GuildTreasuryInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildTreasuryInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///物品配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///总数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "overdueNum" field.</summary>
    public const int OverdueNumFieldNumber = 3;
    private int overdueNum_;
    /// <summary>
    ///将要过期的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverdueNum {
      get { return overdueNum_; }
      set {
        overdueNum_ = value;
      }
    }

    /// <summary>Field number for the "overdueTime" field.</summary>
    public const int OverdueTimeFieldNumber = 4;
    private int overdueTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverdueTime {
      get { return overdueTime_; }
      set {
        overdueTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (OverdueNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OverdueNum);
      }
      if (OverdueTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OverdueTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (OverdueNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverdueNum);
      }
      if (OverdueTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverdueTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            OverdueNum = input.ReadInt32();
            break;
          }
          case 32: {
            OverdueTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///日志记录
  /// </summary>
  public sealed class GuildTreasureRecordInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildTreasureRecordInfo> _parser = new pb::MessageParser<GuildTreasureRecordInfo>(() => new GuildTreasureRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildTreasureRecordInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///1=取出，2=放入，3=下架
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 5;
    private string date_ = "";
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private string time_ = "";
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Date = input.ReadString();
            break;
          }
          case 50: {
            Time = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求公会宝库
  /// </summary>
  public sealed class ReqGuildTreasuryInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildTreasuryInfo> _parser = new pb::MessageParser<ReqGuildTreasuryInfo>(() => new ReqGuildTreasuryInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildTreasuryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回工会宝库物品
  /// </summary>
  public sealed class AckGuildTreasuryInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildTreasuryInfo> _parser = new pb::MessageParser<AckGuildTreasuryInfo>(() => new AckGuildTreasuryInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildTreasuryInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemInfos" field.</summary>
    public const int ItemInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.GuildTreasuryInfo> _repeated_itemInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.GuildTreasuryInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildTreasuryInfo> itemInfos_ = new pbc::RepeatedField<global::Protocol.GuildTreasuryInfo>();
    /// <summary>
    ///物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildTreasuryInfo> ItemInfos {
      get { return itemInfos_; }
    }

    /// <summary>Field number for the "recordInfos" field.</summary>
    public const int RecordInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.GuildTreasureRecordInfo> _repeated_recordInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.GuildTreasureRecordInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GuildTreasureRecordInfo> recordInfos_ = new pbc::RepeatedField<global::Protocol.GuildTreasureRecordInfo>();
    /// <summary>
    ///记录信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GuildTreasureRecordInfo> RecordInfos {
      get { return recordInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemInfos_.WriteTo(output, _repeated_itemInfos_codec);
      recordInfos_.WriteTo(output, _repeated_recordInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemInfos_.CalculateSize(_repeated_itemInfos_codec);
      size += recordInfos_.CalculateSize(_repeated_recordInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemInfos_.AddEntriesFrom(input, _repeated_itemInfos_codec);
            break;
          }
          case 18: {
            recordInfos_.AddEntriesFrom(input, _repeated_recordInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会宝库放入物品
  /// </summary>
  public sealed class ReqGuildTreasuryPut : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildTreasuryPut> _parser = new pb::MessageParser<ReqGuildTreasuryPut>(() => new ReqGuildTreasuryPut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildTreasuryPut> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回放入物品
  /// </summary>
  public sealed class AckGuildTreasuryPut : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildTreasuryPut> _parser = new pb::MessageParser<AckGuildTreasuryPut>(() => new AckGuildTreasuryPut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildTreasuryPut> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会宝库取出物品
  /// </summary>
  public sealed class ReqGuildTreasuryGet : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildTreasuryGet> _parser = new pb::MessageParser<ReqGuildTreasuryGet>(() => new ReqGuildTreasuryGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildTreasuryGet> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回取出物品
  /// </summary>
  public sealed class AckGuildTreasuryGet : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildTreasuryGet> _parser = new pb::MessageParser<AckGuildTreasuryGet>(() => new AckGuildTreasuryGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildTreasuryGet> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///秘境宝箱
  /// </summary>
  public sealed class SecretPlaceBox : pb::IMessage {
    private static readonly pb::MessageParser<SecretPlaceBox> _parser = new pb::MessageParser<SecretPlaceBox>(() => new SecretPlaceBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecretPlaceBox> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态0=未领取，1=已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求工会秘境
  /// </summary>
  public sealed class ReqGuildSecretPlace : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildSecretPlace> _parser = new pb::MessageParser<ReqGuildSecretPlace>(() => new ReqGuildSecretPlace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildSecretPlace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///返回秘境
  /// </summary>
  public sealed class AckGuildSecretPlace : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildSecretPlace> _parser = new pb::MessageParser<AckGuildSecretPlace>(() => new AckGuildSecretPlace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildSecretPlace> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///当前秘境配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "bossHP" field.</summary>
    public const int BossHPFieldNumber = 2;
    private int bossHP_;
    /// <summary>
    ///boss血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossHP {
      get { return bossHP_; }
      set {
        bossHP_ = value;
      }
    }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 3;
    private int resetTime_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "attType" field.</summary>
    public const int AttTypeFieldNumber = 4;
    private int attType_;
    /// <summary>
    ///1=讨伐重置，2=讨伐进行中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttType {
      get { return attType_; }
      set {
        attType_ = value;
      }
    }

    /// <summary>Field number for the "ranks" field.</summary>
    public const int RanksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.RankInfo> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RankInfo> ranks_ = new pbc::RepeatedField<global::Protocol.RankInfo>();
    /// <summary>
    ///前三名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RankInfo> Ranks {
      get { return ranks_; }
    }

    /// <summary>Field number for the "boxList" field.</summary>
    public const int BoxListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.SecretPlaceBox> _repeated_boxList_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.SecretPlaceBox.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SecretPlaceBox> boxList_ = new pbc::RepeatedField<global::Protocol.SecretPlaceBox>();
    /// <summary>
    ///秘境箱子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SecretPlaceBox> BoxList {
      get { return boxList_; }
    }

    /// <summary>Field number for the "canSweep" field.</summary>
    public const int CanSweepFieldNumber = 7;
    private int canSweep_;
    /// <summary>
    ///是否可以扫荡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanSweep {
      get { return canSweep_; }
      set {
        canSweep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (BossHP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossHP);
      }
      if (ResetTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResetTime);
      }
      if (AttType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttType);
      }
      ranks_.WriteTo(output, _repeated_ranks_codec);
      boxList_.WriteTo(output, _repeated_boxList_codec);
      if (CanSweep != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanSweep);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (BossHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHP);
      }
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetTime);
      }
      if (AttType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttType);
      }
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      size += boxList_.CalculateSize(_repeated_boxList_codec);
      if (CanSweep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanSweep);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            BossHP = input.ReadInt32();
            break;
          }
          case 24: {
            ResetTime = input.ReadInt32();
            break;
          }
          case 32: {
            AttType = input.ReadInt32();
            break;
          }
          case 42: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 50: {
            boxList_.AddEntriesFrom(input, _repeated_boxList_codec);
            break;
          }
          case 56: {
            CanSweep = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取箱子
  /// </summary>
  public sealed class ReqSecretPlaceBox : pb::IMessage {
    private static readonly pb::MessageParser<ReqSecretPlaceBox> _parser = new pb::MessageParser<ReqSecretPlaceBox>(() => new ReqSecretPlaceBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSecretPlaceBox> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取箱子
  /// </summary>
  public sealed class AckSecretPlaceBox : pb::IMessage {
    private static readonly pb::MessageParser<AckSecretPlaceBox> _parser = new pb::MessageParser<AckSecretPlaceBox>(() => new AckSecretPlaceBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSecretPlaceBox> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求开启秘境
  /// </summary>
  public sealed class ReqOpenSecret : pb::IMessage {
    private static readonly pb::MessageParser<ReqOpenSecret> _parser = new pb::MessageParser<ReqOpenSecret>(() => new ReqOpenSecret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOpenSecret> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回开启秘境
  /// </summary>
  public sealed class AckOpenSecret : pb::IMessage {
    private static readonly pb::MessageParser<AckOpenSecret> _parser = new pb::MessageParser<AckOpenSecret>(() => new AckOpenSecret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckOpenSecret> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求攻打秘境
  /// </summary>
  public sealed class ReqAttSecret : pb::IMessage {
    private static readonly pb::MessageParser<ReqAttSecret> _parser = new pb::MessageParser<ReqAttSecret>(() => new ReqAttSecret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAttSecret> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///1=挑战，2=扫荡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回攻打秘境
  /// </summary>
  public sealed class AckAttSecret : pb::IMessage {
    private static readonly pb::MessageParser<AckAttSecret> _parser = new pb::MessageParser<AckAttSecret>(() => new AckAttSecret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckAttSecret> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////
  ///红包信息
  /// </summary>
  public sealed class ReqGuildRedenvelopesInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildRedenvelopesInfo> _parser = new pb::MessageParser<ReqGuildRedenvelopesInfo>(() => new ReqGuildRedenvelopesInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildRedenvelopesInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildRedenvelopesInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildRedenvelopesInfo> _parser = new pb::MessageParser<AckGuildRedenvelopesInfo>(() => new AckGuildRedenvelopesInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildRedenvelopesInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///红包发送
  /// </summary>
  public sealed class ReqGuildRedenvelopesSend : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildRedenvelopesSend> _parser = new pb::MessageParser<ReqGuildRedenvelopesSend>(() => new ReqGuildRedenvelopesSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildRedenvelopesSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildRedenvelopesSend : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildRedenvelopesSend> _parser = new pb::MessageParser<AckGuildRedenvelopesSend>(() => new AckGuildRedenvelopesSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildRedenvelopesSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///抢红包
  /// </summary>
  public sealed class ReqGuildRedenvelopesGrab : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildRedenvelopesGrab> _parser = new pb::MessageParser<ReqGuildRedenvelopesGrab>(() => new ReqGuildRedenvelopesGrab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildRedenvelopesGrab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildRedenvelopesGrab : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildRedenvelopesGrab> _parser = new pb::MessageParser<AckGuildRedenvelopesGrab>(() => new AckGuildRedenvelopesGrab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildRedenvelopesGrab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///////////////////////////////////////////
  ///公会副本信息
  /// </summary>
  public sealed class ReqGuildDungeonInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonInfo> _parser = new pb::MessageParser<ReqGuildDungeonInfo>(() => new ReqGuildDungeonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildDungeonInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonInfo> _parser = new pb::MessageParser<AckGuildDungeonInfo>(() => new AckGuildDungeonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 1;
    private int chapter_;
    /// <summary>
    ///章节	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    /// <summary>Field number for the "battleCount" field.</summary>
    public const int BattleCountFieldNumber = 2;
    private int battleCount_;
    /// <summary>
    ///剩余挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleCount {
      get { return battleCount_; }
      set {
        battleCount_ = value;
      }
    }

    /// <summary>Field number for the "battleBuyCount" field.</summary>
    public const int BattleBuyCountFieldNumber = 3;
    private int battleBuyCount_;
    /// <summary>
    ///剩余购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleBuyCount {
      get { return battleBuyCount_; }
      set {
        battleBuyCount_ = value;
      }
    }

    /// <summary>Field number for the "bossHp" field.</summary>
    public const int BossHpFieldNumber = 4;
    private int bossHp_;
    /// <summary>
    ///boss血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossHp {
      get { return bossHp_; }
      set {
        bossHp_ = value;
      }
    }

    /// <summary>Field number for the "bossMaxHp" field.</summary>
    public const int BossMaxHpFieldNumber = 5;
    private int bossMaxHp_;
    /// <summary>
    ///boss总血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossMaxHp {
      get { return bossMaxHp_; }
      set {
        bossMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "activeBuffCount" field.</summary>
    public const int ActiveBuffCountFieldNumber = 6;
    private int activeBuffCount_;
    /// <summary>
    ///buff激活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveBuffCount {
      get { return activeBuffCount_; }
      set {
        activeBuffCount_ = value;
      }
    }

    /// <summary>Field number for the "buffTime" field.</summary>
    public const int BuffTimeFieldNumber = 7;
    private int buffTime_;
    /// <summary>
    ///buff剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffTime {
      get { return buffTime_; }
      set {
        buffTime_ = value;
      }
    }

    /// <summary>Field number for the "lastHurt" field.</summary>
    public const int LastHurtFieldNumber = 8;
    private int lastHurt_;
    /// <summary>
    ///上一次伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHurt {
      get { return lastHurt_; }
      set {
        lastHurt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chapter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chapter);
      }
      if (BattleCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleCount);
      }
      if (BattleBuyCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattleBuyCount);
      }
      if (BossHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BossHp);
      }
      if (BossMaxHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BossMaxHp);
      }
      if (ActiveBuffCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ActiveBuffCount);
      }
      if (BuffTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BuffTime);
      }
      if (LastHurt != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastHurt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      if (BattleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleCount);
      }
      if (BattleBuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleBuyCount);
      }
      if (BossHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHp);
      }
      if (BossMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossMaxHp);
      }
      if (ActiveBuffCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveBuffCount);
      }
      if (BuffTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffTime);
      }
      if (LastHurt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHurt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chapter = input.ReadInt32();
            break;
          }
          case 16: {
            BattleCount = input.ReadInt32();
            break;
          }
          case 24: {
            BattleBuyCount = input.ReadInt32();
            break;
          }
          case 32: {
            BossHp = input.ReadInt32();
            break;
          }
          case 40: {
            BossMaxHp = input.ReadInt32();
            break;
          }
          case 48: {
            ActiveBuffCount = input.ReadInt32();
            break;
          }
          case 56: {
            BuffTime = input.ReadInt32();
            break;
          }
          case 64: {
            LastHurt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本伤害排行
  /// </summary>
  public sealed class ReqGuildDungeonHurtRank : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonHurtRank> _parser = new pb::MessageParser<ReqGuildDungeonHurtRank>(() => new ReqGuildDungeonHurtRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonHurtRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 1;
    private int chapter_;
    /// <summary>
    ///章节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chapter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chapter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chapter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildDungeonHurtRank : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonHurtRank> _parser = new pb::MessageParser<AckGuildDungeonHurtRank>(() => new AckGuildDungeonHurtRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonHurtRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "ranks" field.</summary>
    public const int RanksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.RankInfo> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RankInfo> ranks_ = new pbc::RepeatedField<global::Protocol.RankInfo>();
    /// <summary>
    ///排行榜列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RankInfo> Ranks {
      get { return ranks_; }
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> playerIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///今日点赞过的玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 3;
    private int chapter_;
    /// <summary>
    ///当前章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ranks_.WriteTo(output, _repeated_ranks_codec);
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (Chapter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chapter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 18:
          case 16: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 24: {
            Chapter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挑战公会副本
  /// </summary>
  public sealed class ReqGuildDungeonBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonBattle> _parser = new pb::MessageParser<ReqGuildDungeonBattle>(() => new ReqGuildDungeonBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 1;
    private int chapter_;
    /// <summary>
    ///挑战章节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///挑战1，扫荡2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chapter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chapter);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chapter = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildDungeonBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonBattle> _parser = new pb::MessageParser<AckGuildDungeonBattle>(() => new AckGuildDungeonBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买挑战次数
  /// </summary>
  public sealed class ReqGuildDungeonBuyBattleCount : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonBuyBattleCount> _parser = new pb::MessageParser<ReqGuildDungeonBuyBattleCount>(() => new ReqGuildDungeonBuyBattleCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonBuyBattleCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildDungeonBuyBattleCount : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonBuyBattleCount> _parser = new pb::MessageParser<AckGuildDungeonBuyBattleCount>(() => new AckGuildDungeonBuyBattleCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonBuyBattleCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///激活buff
  /// </summary>
  public sealed class ReqGuildDungeonActiveBuff : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonActiveBuff> _parser = new pb::MessageParser<ReqGuildDungeonActiveBuff>(() => new ReqGuildDungeonActiveBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonActiveBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildDungeonActiveBuff : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonActiveBuff> _parser = new pb::MessageParser<AckGuildDungeonActiveBuff>(() => new AckGuildDungeonActiveBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonActiveBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本排行点赞
  /// </summary>
  public sealed class ReqGuildDungeonGivelike : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonGivelike> _parser = new pb::MessageParser<ReqGuildDungeonGivelike>(() => new ReqGuildDungeonGivelike());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonGivelike> Parser { get { return _parser; } }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 2;
    private int chapter_;
    /// <summary>
    ///章节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Chapter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chapter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            Chapter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AckGuildDungeonGivelike : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonGivelike> _parser = new pb::MessageParser<AckGuildDungeonGivelike>(() => new AckGuildDungeonGivelike());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonGivelike> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///集结号角
  /// </summary>
  public sealed class ReqGuildDungeonMasshorn : pb::IMessage {
    private static readonly pb::MessageParser<ReqGuildDungeonMasshorn> _parser = new pb::MessageParser<ReqGuildDungeonMasshorn>(() => new ReqGuildDungeonMasshorn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildDungeonMasshorn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AckGuildDungeonMasshorn : pb::IMessage {
    private static readonly pb::MessageParser<AckGuildDungeonMasshorn> _parser = new pb::MessageParser<AckGuildDungeonMasshorn>(() => new AckGuildDungeonMasshorn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildDungeonMasshorn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
