// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBDivine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  /// <summary>
  ///出战英雄状态信息
  /// </summary>
  public sealed class DivineHero : pb::IMessage {
    private static readonly pb::MessageParser<DivineHero> _parser = new pb::MessageParser<DivineHero>(() => new DivineHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineHero> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 2;
    private long blood_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 3;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 4;
    private int battle_;
    /// <summary>
    ///是否为当前选择英雄0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Blood != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BloodLimit);
      }
      if (Battle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Battle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      if (Battle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            Blood = input.ReadInt64();
            break;
          }
          case 24: {
            BloodLimit = input.ReadInt64();
            break;
          }
          case 32: {
            Battle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///守卫状态信息
  /// </summary>
  public sealed class DivineBoss : pb::IMessage {
    private static readonly pb::MessageParser<DivineBoss> _parser = new pb::MessageParser<DivineBoss>(() => new DivineBoss());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineBoss> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///守卫配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "blood" field.</summary>
    public const int BloodFieldNumber = 2;
    private long blood_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Blood {
      get { return blood_; }
      set {
        blood_ = value;
      }
    }

    /// <summary>Field number for the "bloodLimit" field.</summary>
    public const int BloodLimitFieldNumber = 3;
    private long bloodLimit_;
    /// <summary>
    ///血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BloodLimit {
      get { return bloodLimit_; }
      set {
        bloodLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Blood != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Blood);
      }
      if (BloodLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BloodLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Blood != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blood);
      }
      if (BloodLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BloodLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Blood = input.ReadInt64();
            break;
          }
          case 24: {
            BloodLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///格子状态信息
  /// </summary>
  public sealed class DivineGrid : pb::IMessage {
    private static readonly pb::MessageParser<DivineGrid> _parser = new pb::MessageParser<DivineGrid>(() => new DivineGrid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineGrid> Parser { get { return _parser; } }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private int grid_;
    /// <summary>
    ///格子ID(1-25)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grid {
      get { return grid_; }
      set {
        grid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态0未开启1守卫2传送门3事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///守卫ID或事件类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Grid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Grid);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Grid = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///buff信息
  /// </summary>
  public sealed class DivineBuff : pb::IMessage {
    private static readonly pb::MessageParser<DivineBuff> _parser = new pb::MessageParser<DivineBuff>(() => new DivineBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private int buffId_;
    /// <summary>
    ///buff配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///叠加数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主界面信息
  /// </summary>
  public sealed class DivineInfo : pb::IMessage {
    private static readonly pb::MessageParser<DivineInfo> _parser = new pb::MessageParser<DivineInfo>(() => new DivineInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "layerId" field.</summary>
    public const int LayerIdFieldNumber = 1;
    private int layerId_;
    /// <summary>
    ///当前层级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerId {
      get { return layerId_; }
      set {
        layerId_ = value;
      }
    }

    /// <summary>Field number for the "clearance" field.</summary>
    public const int ClearanceFieldNumber = 2;
    private int clearance_;
    /// <summary>
    ///是否已经通关0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Clearance {
      get { return clearance_; }
      set {
        clearance_ = value;
      }
    }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 3;
    private int resetTime_;
    /// <summary>
    ///冒险重置剩余时间秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "killNum" field.</summary>
    public const int KillNumFieldNumber = 4;
    private int killNum_;
    /// <summary>
    ///击杀守卫数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "healthNum" field.</summary>
    public const int HealthNumFieldNumber = 5;
    private int healthNum_;
    /// <summary>
    ///生命药剂数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HealthNum {
      get { return healthNum_; }
      set {
        healthNum_ = value;
      }
    }

    /// <summary>Field number for the "healthUseTimes" field.</summary>
    public const int HealthUseTimesFieldNumber = 6;
    private int healthUseTimes_;
    /// <summary>
    ///生命药剂剩余使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HealthUseTimes {
      get { return healthUseTimes_; }
      set {
        healthUseTimes_ = value;
      }
    }

    /// <summary>Field number for the "exorcismNum" field.</summary>
    public const int ExorcismNumFieldNumber = 7;
    private int exorcismNum_;
    /// <summary>
    ///驱魂药剂数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExorcismNum {
      get { return exorcismNum_; }
      set {
        exorcismNum_ = value;
      }
    }

    /// <summary>Field number for the "exorcismUseTimes" field.</summary>
    public const int ExorcismUseTimesFieldNumber = 8;
    private int exorcismUseTimes_;
    /// <summary>
    ///驱魂药剂剩余使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExorcismUseTimes {
      get { return exorcismUseTimes_; }
      set {
        exorcismUseTimes_ = value;
      }
    }

    /// <summary>Field number for the "summonNum" field.</summary>
    public const int SummonNumFieldNumber = 9;
    private int summonNum_;
    /// <summary>
    ///召唤商人次数	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonNum {
      get { return summonNum_; }
      set {
        summonNum_ = value;
      }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.DivineHero> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.DivineHero.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineHero> heros_ = new pbc::RepeatedField<global::Protocol.DivineHero>();
    /// <summary>
    ///出战英雄列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineHero> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "grids" field.</summary>
    public const int GridsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protocol.DivineGrid> _repeated_grids_codec
        = pb::FieldCodec.ForMessage(90, global::Protocol.DivineGrid.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineGrid> grids_ = new pbc::RepeatedField<global::Protocol.DivineGrid>();
    /// <summary>
    ///格子信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineGrid> Grids {
      get { return grids_; }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Protocol.DivineBuff> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(98, global::Protocol.DivineBuff.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineBuff> buffs_ = new pbc::RepeatedField<global::Protocol.DivineBuff>();
    /// <summary>
    ///buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineBuff> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "otherBuff" field.</summary>
    public const int OtherBuffFieldNumber = 13;
    private int otherBuff_;
    /// <summary>
    ///额外buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherBuff {
      get { return otherBuff_; }
      set {
        otherBuff_ = value;
      }
    }

    /// <summary>Field number for the "boss" field.</summary>
    public const int BossFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Protocol.DivineBoss> _repeated_boss_codec
        = pb::FieldCodec.ForMessage(114, global::Protocol.DivineBoss.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineBoss> boss_ = new pbc::RepeatedField<global::Protocol.DivineBoss>();
    /// <summary>
    ///守卫列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineBoss> Boss {
      get { return boss_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 15;
    private int rewards_;
    /// <summary>
    ///是否可以领取任务奖励0=不能领取,1=可以领取,2=已经领取全部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rewards {
      get { return rewards_; }
      set {
        rewards_ = value;
      }
    }

    /// <summary>Field number for the "targetNum" field.</summary>
    public const int TargetNumFieldNumber = 16;
    private int targetNum_;
    /// <summary>
    ///当前目标奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetNum {
      get { return targetNum_; }
      set {
        targetNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LayerId);
      }
      if (Clearance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Clearance);
      }
      if (ResetTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResetTime);
      }
      if (KillNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KillNum);
      }
      if (HealthNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HealthNum);
      }
      if (HealthUseTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HealthUseTimes);
      }
      if (ExorcismNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExorcismNum);
      }
      if (ExorcismUseTimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExorcismUseTimes);
      }
      if (SummonNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SummonNum);
      }
      heros_.WriteTo(output, _repeated_heros_codec);
      grids_.WriteTo(output, _repeated_grids_codec);
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (OtherBuff != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OtherBuff);
      }
      boss_.WriteTo(output, _repeated_boss_codec);
      if (Rewards != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Rewards);
      }
      if (TargetNum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TargetNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerId);
      }
      if (Clearance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clearance);
      }
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetTime);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (HealthNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HealthNum);
      }
      if (HealthUseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HealthUseTimes);
      }
      if (ExorcismNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExorcismNum);
      }
      if (ExorcismUseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExorcismUseTimes);
      }
      if (SummonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonNum);
      }
      size += heros_.CalculateSize(_repeated_heros_codec);
      size += grids_.CalculateSize(_repeated_grids_codec);
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (OtherBuff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherBuff);
      }
      size += boss_.CalculateSize(_repeated_boss_codec);
      if (Rewards != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rewards);
      }
      if (TargetNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Clearance = input.ReadInt32();
            break;
          }
          case 24: {
            ResetTime = input.ReadInt32();
            break;
          }
          case 32: {
            KillNum = input.ReadInt32();
            break;
          }
          case 40: {
            HealthNum = input.ReadInt32();
            break;
          }
          case 48: {
            HealthUseTimes = input.ReadInt32();
            break;
          }
          case 56: {
            ExorcismNum = input.ReadInt32();
            break;
          }
          case 64: {
            ExorcismUseTimes = input.ReadInt32();
            break;
          }
          case 72: {
            SummonNum = input.ReadInt32();
            break;
          }
          case 82: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 90: {
            grids_.AddEntriesFrom(input, _repeated_grids_codec);
            break;
          }
          case 98: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 104: {
            OtherBuff = input.ReadInt32();
            break;
          }
          case 114: {
            boss_.AddEntriesFrom(input, _repeated_boss_codec);
            break;
          }
          case 120: {
            Rewards = input.ReadInt32();
            break;
          }
          case 128: {
            TargetNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求主界面信息
  /// </summary>
  public sealed class ReqDivine : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivine> _parser = new pb::MessageParser<ReqDivine>(() => new ReqDivine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应主界面信息
  /// </summary>
  public sealed class AckDivine : pb::IMessage {
    private static readonly pb::MessageParser<AckDivine> _parser = new pb::MessageParser<AckDivine>(() => new AckDivine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivine> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态0正常1未选择出战英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送神界冒险的数据
  /// </summary>
  public sealed class AckDivineInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineInfo> _parser = new pb::MessageParser<AckDivineInfo>(() => new AckDivineInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Protocol.DivineInfo info_;
    /// <summary>
    ///主界面信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.DivineInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Protocol.DivineInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冒险出战
  /// </summary>
  public sealed class ReqDivineMatrix : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineMatrix> _parser = new pb::MessageParser<ReqDivineMatrix>(() => new ReqDivineMatrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineMatrix> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> heroIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///英雄唯一id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroIds {
      get { return heroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应冒险出战
  /// </summary>
  public sealed class AckDivineMatrix : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineMatrix> _parser = new pb::MessageParser<AckDivineMatrix>(() => new AckDivineMatrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineMatrix> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求选择出战英雄
  /// </summary>
  public sealed class ReqDivineSelect : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineSelect> _parser = new pb::MessageParser<ReqDivineSelect>(() => new ReqDivineSelect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineSelect> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///选择出战英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应选择出战英雄
  /// </summary>
  public sealed class AckDivineSelect : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineSelect> _parser = new pb::MessageParser<AckDivineSelect>(() => new AckDivineSelect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineSelect> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冒险战斗
  /// </summary>
  public sealed class ReqDivineBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineBattle> _parser = new pb::MessageParser<ReqDivineBattle>(() => new ReqDivineBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private int targetId_;
    /// <summary>
    ///目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    /// <summary>
    ///英雄唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 3;
    private int jump_;
    /// <summary>
    ///是否开启跳过战斗0否1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      if (Jump != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Jump);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Jump != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Jump);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
          case 24: {
            Jump = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应冒险战斗
  /// </summary>
  public sealed class AckDivineBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineBattle> _parser = new pb::MessageParser<AckDivineBattle>(() => new AckDivineBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求事件内容
  /// </summary>
  public sealed class ReqDivineEvent : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineEvent> _parser = new pb::MessageParser<ReqDivineEvent>(() => new ReqDivineEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///事件类型ID-神秘事件-智力题目-宝箱-NPC对话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应事件内容
  /// </summary>
  public sealed class AckDivineEvent : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineEvent> _parser = new pb::MessageParser<AckDivineEvent>(() => new AckDivineEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///事件类型ID-神秘事件-智力题目-宝箱-NPC对话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_value_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> value_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///额外参数神秘事件ID或智力题目列表或宝箱钥匙数量或NPC对话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 3;
    private int current_;
    /// <summary>
    ///智力题目进度1-3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_answer_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> answer_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///答对智力题目ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Answer {
      get { return answer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      value_.WriteTo(output, _repeated_value_codec);
      if (Current != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Current);
      }
      answer_.WriteTo(output, _repeated_answer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += value_.CalculateSize(_repeated_value_codec);
      if (Current != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Current);
      }
      size += answer_.CalculateSize(_repeated_answer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
          case 24: {
            Current = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            answer_.AddEntriesFrom(input, _repeated_answer_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求事件答案
  /// </summary>
  public sealed class ReqDivineAnswer : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineAnswer> _parser = new pb::MessageParser<ReqDivineAnswer>(() => new ReqDivineAnswer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineAnswer> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///事件类型ID-神秘事件-智力题目-宝箱-NPC对话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 2;
    private int answer_;
    /// <summary>
    ///神秘事件答案-智力答案-NPC对话答案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Answer {
      get { return answer_; }
      set {
        answer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Answer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Answer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Answer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Answer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Answer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应事件答案
  /// </summary>
  public sealed class AckDivineAnswer : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineAnswer> _parser = new pb::MessageParser<AckDivineAnswer>(() => new AckDivineAnswer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineAnswer> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///冒险商店出售物品
  /// </summary>
  public sealed class DivineShopItem : pb::IMessage {
    private static readonly pb::MessageParser<DivineShopItem> _parser = new pb::MessageParser<DivineShopItem>(() => new DivineShopItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineShopItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    ///冒险商店配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///状态：0可购买,1已售罄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求召唤商人-神秘商店-冒险商店
  /// </summary>
  public sealed class ReqDivineShop : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineShop> _parser = new pb::MessageParser<ReqDivineShop>(() => new ReqDivineShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1召唤商人2神秘商店3冒险商店
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 2;
    private int grid_;
    /// <summary>
    ///神秘商店事件格子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grid {
      get { return grid_; }
      set {
        grid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Grid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Grid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Grid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Grid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应冒险商店
  /// </summary>
  public sealed class AckDivineShop : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineShop> _parser = new pb::MessageParser<AckDivineShop>(() => new AckDivineShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.DivineShopItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.DivineShopItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineShopItem> items_ = new pbc::RepeatedField<global::Protocol.DivineShopItem>();
    /// <summary>
    ///出售列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineShopItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求冒险商店购买
  /// </summary>
  public sealed class ReqDivineShopBuy : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineShopBuy> _parser = new pb::MessageParser<ReqDivineShopBuy>(() => new ReqDivineShopBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineShopBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应冒险商店购买
  /// </summary>
  public sealed class AckDivineShopBuy : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineShopBuy> _parser = new pb::MessageParser<AckDivineShopBuy>(() => new AckDivineShopBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineShopBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.DivineShopItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.DivineShopItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineShopItem> items_ = new pbc::RepeatedField<global::Protocol.DivineShopItem>();
    /// <summary>
    ///出售列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineShopItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求开启下一层
  /// </summary>
  public sealed class ReqDivineNext : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineNext> _parser = new pb::MessageParser<ReqDivineNext>(() => new ReqDivineNext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineNext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应开启下一层
  /// </summary>
  public sealed class AckDivineNext : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineNext> _parser = new pb::MessageParser<AckDivineNext>(() => new AckDivineNext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineNext> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ItemInfo> items_ = new pbc::RepeatedField<global::Protocol.ItemInfo>();
    /// <summary>
    ///累计获得物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///目标奖励状态
  /// </summary>
  public sealed class DivineRewardsStatus : pb::IMessage {
    private static readonly pb::MessageParser<DivineRewardsStatus> _parser = new pb::MessageParser<DivineRewardsStatus>(() => new DivineRewardsStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DivineRewardsStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///状态0未达成1未领取2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求目标奖励状态列表
  /// </summary>
  public sealed class ReqDivineRewardsList : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineRewardsList> _parser = new pb::MessageParser<ReqDivineRewardsList>(() => new ReqDivineRewardsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineRewardsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应目标奖励状态列表
  /// </summary>
  public sealed class AckDivineRewardsList : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineRewardsList> _parser = new pb::MessageParser<AckDivineRewardsList>(() => new AckDivineRewardsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineRewardsList> Parser { get { return _parser; } }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.DivineRewardsStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.DivineRewardsStatus.Parser);
    private readonly pbc::RepeatedField<global::Protocol.DivineRewardsStatus> status_ = new pbc::RepeatedField<global::Protocol.DivineRewardsStatus>();
    /// <summary>
    ///目标奖励状态列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.DivineRewardsStatus> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取目标奖励
  /// </summary>
  public sealed class ReqDivineRewards : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineRewards> _parser = new pb::MessageParser<ReqDivineRewards>(() => new ReqDivineRewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///响应领取目标奖励
  /// </summary>
  public sealed class AckDivineRewards : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineRewards> _parser = new pb::MessageParser<AckDivineRewards>(() => new AckDivineRewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineRewards> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求猜拳
  /// </summary>
  public sealed class ReqDivineGuess : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineGuess> _parser = new pb::MessageParser<ReqDivineGuess>(() => new ReqDivineGuess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineGuess> Parser { get { return _parser; } }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private int bet_;
    /// <summary>
    ///押注配置类型1-4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "guess" field.</summary>
    public const int GuessFieldNumber = 2;
    private int guess_;
    /// <summary>
    ///出拳选择1石头2剪子3布	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guess {
      get { return guess_; }
      set {
        guess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bet != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Bet);
      }
      if (Guess != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Guess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Guess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bet = input.ReadInt32();
            break;
          }
          case 16: {
            Guess = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应猜拳
  /// </summary>
  public sealed class AckDivineGuess : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineGuess> _parser = new pb::MessageParser<AckDivineGuess>(() => new AckDivineGuess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineGuess> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///1胜2负3平
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private int bet_;
    /// <summary>
    ///押注配置类型1-4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求生命药剂使用
  /// </summary>
  public sealed class ReqDivineHealthUse : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineHealthUse> _parser = new pb::MessageParser<ReqDivineHealthUse>(() => new ReqDivineHealthUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineHealthUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    /// <summary>
    ///英雄唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应生命药剂使用
  /// </summary>
  public sealed class AckDivineHealthUse : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineHealthUse> _parser = new pb::MessageParser<AckDivineHealthUse>(() => new AckDivineHealthUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineHealthUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求驱魂药剂使用
  /// </summary>
  public sealed class ReqDivineExorcismUse : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineExorcismUse> _parser = new pb::MessageParser<ReqDivineExorcismUse>(() => new ReqDivineExorcismUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineExorcismUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private int targetId_;
    /// <summary>
    ///守卫id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应驱魂药剂使用
  /// </summary>
  public sealed class AckDivineExorcismUse : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineExorcismUse> _parser = new pb::MessageParser<AckDivineExorcismUse>(() => new AckDivineExorcismUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineExorcismUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求驱魂药剂购买
  /// </summary>
  public sealed class ReqDivineExorcismBuy : pb::IMessage {
    private static readonly pb::MessageParser<ReqDivineExorcismBuy> _parser = new pb::MessageParser<ReqDivineExorcismBuy>(() => new ReqDivineExorcismBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDivineExorcismBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应驱魂药剂购买
  /// </summary>
  public sealed class AckDivineExorcismBuy : pb::IMessage {
    private static readonly pb::MessageParser<AckDivineExorcismBuy> _parser = new pb::MessageParser<AckDivineExorcismBuy>(() => new AckDivineExorcismBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckDivineExorcismBuy> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
