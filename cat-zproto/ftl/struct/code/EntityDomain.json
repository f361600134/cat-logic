{
	"content":"package com.cat.server.game.module.${entity.getEntityName()?lower_case}.domain;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.cat.server.core.server.AbstractModuleDomain;\n\n<#--一对一-->\n<#if module.isOne2one()>\n/**\n* ${entity.getEntityName()}Domain\n* @author Jeremy\n*/\n<#if module.getExtendInfo()?seq_contains(1)>\n<#assign text=\"implements IMissionHandler\" />\n</#if>\npublic class ${entity.getEntityName()}Domain extends AbstractModuleDomain<Long, ${entity.getEntityName()}> ${text}{\n\n\tprivate static final Logger log = LoggerFactory.getLogger(${entity.getEntityName()}Domain.class);\n\t\n\t<#if module.getExtendInfo()?seq_contains(1)>\n\t// 代理处理代理类\n\tprivate IMissionHandler missionHandler;\n\t</#if>\n\t\n\tpublic ${entity.getEntityName()}Domain(){\n\t}\n\t\n\t////////////业务代码////////////////////\n\t<#if module.getExtendInfo()?seq_contains(1)>\n\t<#--任务相关的业务代码-->\n\t/**\n\t * 初次创建对象, 初始化任务,\n\t */\n\t@Override\n\tpublic void afterCreate() {\n\t\tint configId = 0;\n\t\t${entity.getEntityName()}MissionType initNission = ${entity.getEntityName()}MissionType.create(configId);\n\t\tbean.getMissionData().addMissionPojo(initNission);\n\t\tbean.update();\n\t}\n\n\t@Override\n\tpublic void afterInit() {\n\t\tthis.missionHandler = Builder.newBuilder().\n\t\t\t\tplayerId(getPlayerId()).missionData(bean.getMissionData())\n\t\t\t\t.afterRewardedListener((mission, missionData) -> {\n\t\t\t\t\t//TODO something...\n\t\t\t\t}).build();\n\t}\n\t\n\t@Override\n\tpublic ErrorCode onProcess(IEvent event) {\n\t\tErrorCode errorCode = missionHandler.onProcess(event);\n\t\tif (errorCode.isSuccess()) {\n\t\t\tbean.update();\n\t\t}\n\t\treturn errorCode;\n\t}\n\n\t@Override\n\tpublic ErrorCode onReward(int configId, NatureEnum nenum) {\n\t\tErrorCode errorCode = missionHandler.onReward(configId, nenum);\n\t\tif (errorCode.isSuccess()) {\n\t\t\tbean.update();\n\t\t}\n\t\treturn errorCode;\n\t}\n\t\n\t@Override\n\tpublic Collection<PBMissionInfo> toProto() {\n\t\treturn missionHandler.toProto();\n\t}\n\n\t@Override\n\tpublic List<IMission> getUpdateList() {\n\t\treturn missionHandler.getUpdateList();\n\t}\n\t</#if>\n}\n</#if>\n\n<#-- 一对多 -->\n<#if !module.isOne2one()>\n<#if module.getExtendInfo()?seq_contains(2)>\nimport com.cat.server.game.module.resource.IResourceDomain;\nimport com.cat.server.game.module.resource.domain.ItemResourceDomain;\n</#if>\n<#if !module.isOne2one() && module.getExtendInfo()?seq_contains(1)>\nimport com.cat.server.core.event.IEvent;\nimport com.cat.server.core.server.AbstractModuleMultiDomain;\nimport com.cat.server.game.data.proto.PBBag.PBMissionInfo;\nimport com.cat.server.game.helper.log.NatureEnum;\nimport com.cat.server.game.helper.result.ErrorCode;\nimport com.cat.server.game.module.mission.handler.${entity.getEntityName()}MissionHandler;\nimport com.cat.server.game.module.mission.handler.IMissionHandler;\nimport com.cat.server.game.module.mission.type.IMission;\n</#if>\n\n/**\n* ${entity.getEntityName()}Domain\n* @author Jeremy\n*/\n<#if module.getExtendInfo()?seq_contains(1)>\n<#assign mission=\" IMissionHandler\" />\n</#if>\n<#if module.getExtendInfo()?seq_contains(2)>\n<#assign resource=\" IResourceDomain<Long, \"+ entity.getEntityName()+\">\" />\n</#if>\n<#assign interf =\"\"/>\n<#if mission??>\n\t<#assign interf = \"implements\" + mission/>\n</#if>\n<#if resource??>\n\t<#if interf?contains(\"implements\")>\n\t<#assign interf = interf +\",\"+ resource/>\n\t<#else>\n\t<#assign interf = \"implements\" + resource/>\n\t</#if>\n</#if>\npublic class ${entity.getEntityName()}Domain extends AbstractModuleMultiDomain<Long, Long, ${entity.getEntityName()}> ${interf}{\n\n\tprivate static final Logger log = LoggerFactory.getLogger(${entity.getEntityName()}Domain.class);\n\t\n\t<#if module.getExtendInfo()?seq_contains(2)>\n\tprivate static final int LIMIT = 999; \n\t/**\n\t * 资源代理对象\n\t */\n\tprivate IResourceDomain<Long, ${entity.getEntityName()}> resourceDomainProxy;\n\t\n\t</#if>\n\t<#if !module.isOne2one() && module.getExtendInfo()?seq_contains(1)>\n\t/**\n\t * 任务代理对象\n\t */\n\tprivate Map<Integer, IMissionHandler> missionHandlerMap;\n\t\n\tpublic ${entity.getEntityName()}Domain(){\n\t\tthis.missionHandlerMap = new ConcurrentHashMap<>();\n\t}\n\t<#else>\n\tpublic ${entity.getEntityName()}Domain(){\n\t\t\n\t}\n\t</#if>\n\n\t\n\t////////////业务代码////////////////////\n\t\n\t<#if !module.isOne2one() && module.getExtendInfo()?seq_contains(1)>\n\t<#--任务相关的业务代码-->\n\t@Override\n\tpublic void afterInit() {\n\t\tbeanMap.forEach((configId, ${entity.getEntityName()}) -> {\n\t\t\t//\t伪代码,初始化任务处理器,不同的任务处理器代理的不同神器内的任务\n\t\t\tIMissionHandler handler = ${entity.getEntityName()}MissionHandler.Builder.newBuilder()\n\t\t\t\t\t.playerId(playerId)\n\t\t\t\t\t.missionData(${entity.getEntityName()}.getMissionData())\n\t\t\t\t\t.build();\n\t\t\tmissionHandlerMap.put(configId, handler);\n\t\t});\n\t}\n\t\n\t@Override\n\tpublic ErrorCode onProcess(IEvent event) {\n\t\tErrorCode code = ErrorCode.SUCCESS;\n\t\tfor (Integer configId : missionHandlerMap.keySet()) {\n\t\t\tIMissionHandler handler = missionHandlerMap.get(configId);\n\t\t\tErrorCode cur = handler.onProcess(event);\n\t\t\tif (cur.isSuccess()) {//\t如果处理成功, 则保存对应的神兵对象\n\t\t\t\tgetBean(configId).update();\n\t\t\t}else {\n\t\t\t\tcode = cur;\n\t\t\t}\n\t\t}\n\t\treturn code;\n\t}\n\n\t@Override\n\tpublic ErrorCode onReward(int configId, NatureEnum nenum) {\n\t\tIMissionHandler handler = missionHandlerMap.get(configId);\n\t\treturn handler.onReward(configId, nenum);\n\t}\n\n\t@Override\n\tpublic Collection<PBMissionInfo> toProto() {\n\t\tCollection<PBMissionInfo> ret = new ArrayList<>();\n\t\tfor (IMissionHandler handler : missionHandlerMap.values()) {\n\t\t\tret.addAll(handler.toProto());\n\t\t}\n\t\treturn ret;\n\t}\n\n\t@Override\n\tpublic List<IMission> getUpdateList() {\n\t\tList<IMission> ret = new ArrayList<>();\n\t\tfor (IMissionHandler handler : missionHandlerMap.values()) {\n\t\t\tret.addAll(handler.getUpdateList());\n\t\t}\n\t\treturn ret;\n\t}\n\t</#if>\n\t\n\t<#if module.getExtendInfo()?seq_contains(2)>\n\t<#--资源相关的业务代码-->\n\t@Override\n\tpublic void afterInit() {\n\t\tthis.resourceDomainProxy = ${entity.getEntityName()}ResourceDomain.create(playerId, getBeanMap());\n\t}\n\t\n\t@Override\n\tpublic ${entity.getEntityName()} getBeanByConfigId(int configId) {\n\t\treturn resourceDomainProxy.getBeanByConfigId(configId);\n\t}\n\n\t//@Override\n\t//public Collection<${entity.getEntityName()}> getBeansByConfigId(int configId) {\n\t//\treturn resourceDomainProxy.getBeansByConfigId(configId);\n\t//}\n\n\t@Override\n\tpublic boolean checkAdd(int configId, int count) {\n\t\treturn resourceDomainProxy.checkAdd(configId, count);\n\t}\n\n\t@Override\n\tpublic List<${entity.getEntityName()}> add(int configId, int count) {\n\t\treturn resourceDomainProxy.add(configId, count);\n\t}\n\n\t@Override\n\tpublic boolean checkEnough(int configId, int count) {\n\t\treturn resourceDomainProxy.checkEnough(configId, count);\n\t}\n\n\t@Override\n\tpublic boolean costByConfigId(int configId, int count) {\n\t\treturn resourceDomainProxy.costByConfigId(configId, count);\n\t}\n\n\t@Override\n\tpublic boolean costById(Long id, int count) {\n\t\treturn resourceDomainProxy.costById(id, count);\n\t}\n\n\t@Override\n\tpublic List<${entity.getEntityName()}> getUpdateItemList() {\n\t\treturn resourceDomainProxy.getUpdateItemList();\n\t}\n\n\t@Override\n\tpublic List<${entity.getEntityName()}> getDeleteItemList() {\n\t\treturn resourceDomainProxy.getDeleteItemList();\n\t}\n\t</#if>\n}\n</#if>\n",
	"id":1003,
	"name":"EntityDomain",
	"type":1
}