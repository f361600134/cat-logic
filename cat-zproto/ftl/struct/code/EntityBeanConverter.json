{
	"content":" package com.game.module.${module.name?lower_case}.persistence;\n\n\nimport java.util.Collection;\nimport com.game.persistence.AbstractCommonDataConverter;\nimport common.utils.buffer.BufferWrapper;\nimport common.utils.buffer.DefaultBufferWrapper;\nimport com.game.module.${module.name?lower_case}.structs.*;\n\n/**\n* ${entityName}BeanConverter\n* @date ${.now?string(\"yyyy-MM-dd HH:mm:ss\")}\n*/\npublic class ${entity.entityName}BeanConverter extends AbstractCommonDataConverter<${entity.entityName}Bean>{\n\n\t\tprivate final static int VERSION_1 = 1;\n\t\tprivate final static int CUR_VERSION = VERSION_1;\n\t\tprivate static final ${entity.entityName}BeanConverter INSTANCE = new ${entity.entityName}BeanConverter();\n\t\n\t\tpublic static ${entity.entityName}BeanConverter getInstance() {\n        return INSTANCE;\n    }\n\t\t\n  \tprivate ${entity.entityName}BeanConverter() {\n        super(${entity.entityName}Bean.class);\n    }\n\n\t\t@Override\n    protected byte[] toBytes(${entity.entityName}Bean bean) {\n        return toBytes1(bean);\n    }\n    \n    @Override\n    protected ${entity.entityName}Bean fromBytes(long id, byte[] bytes) {\n        ${entity.entityName}Bean bean = new ${entity.entityName}Bean();\n        bean.setId(id);\n        if (bytes == null || bytes.length <= 4) {\n            return bean;\n        }\n        BufferWrapper buffer = new DefaultBufferWrapper(bytes);\n        int version = buffer.readInt();\n        if (version == VERSION_1) {\n            fromBytes1(bean, buffer);\n        } else {\n            fromBytes1(bean, buffer);\n        }\n        return bean;\n    }\n    \n    private byte[] toBytes1(${entity.entityName}Bean bean) {\n        BufferWrapper buffer = new DefaultBufferWrapper();\n        buffer.writeInt(CUR_VERSION);\n        <#if entity.properties ? exists>\n\t\t<#list entity.properties as bean>\n\t\t<#if bean.keyword != \"transient\">\n\t\t<#if bean.type == 'String'>\n\t\tbuffer.writeString(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'int' || bean.type == \"Integer\">\n\t\tbuffer.writeInt(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'boolean' || bean.type == \"Boolean\">\n\t\tbuffer.writeBoolean(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'double' || bean.type == \"Double\">\n\t\tbuffer.writeDouble(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'float' || bean.type == \"Float\">\n\t\tbuffer.writeFloat(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'long' || bean.type == \"Long\">\n\t\tbuffer.writeLong(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type == 'short' || bean.type == \"Short\">\n\t\tbuffer.writeShort(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('List<Long>') || bean.type ? contains('Set<Long>')>\n\t\tbuffer.writeLongs(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('List<Integer>') || bean.type ? contains('Set<Integer>')>\n\t\tbuffer.writeInts(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('List<String>') || bean.type ? contains('Set<String>')>\n\t\tbuffer.writeStrings(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('List<') || bean.type ? contains('Set<')>\n\t\t<#-- 复杂类型的List-->\n\t\tbuffer.writeDatas(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('Map<Integer, Integer>')>\n\t\tbuffer.writeIIMap(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('Map<Integer, Long>')>\n\t\tbuffer.writeILMap(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('Map<Long, Integer>')>\n\t\tbuffer.writeLIMap(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('Map<Long, Long>')>\n\t\tbuffer.writeLLMap(bean.get${bean.field?cap_first}());\n\t\t<#elseif bean.type ? contains('Map<')>\n\t\t<#-- 复杂类型的Map-->\n\t\tbuffer.writeDatas(bean.get${bean.field?cap_first}().values());\n\t\t<#else>\n\t\tbuffer.writeUnSupportObject(bean.get${bean.field?cap_first}());\n\t\t</#if>\n\t\t</#if>\n        </#list>\n        </#if>\n        return buffer.getData();\n    }\n    \n\tprivate void fromBytes1(${entity.entityName}Bean bean, BufferWrapper buffer) {\n\t\t<#if entity.properties ? exists>\n\t\t<#list entity.properties as bean>\n\t\t<#if bean.keyword != \"transient\">\n\t\t<#if bean.type == 'String'>\n\t\tbean.set${bean.field?cap_first}(buffer.readString());\n\t\t<#elseif bean.type == 'int' || bean.type == \"Integer\">\n\t\tbean.set${bean.field?cap_first}(buffer.readInt());\n\t\t<#elseif bean.type == 'boolean' || bean.type == \"Boolean\">\n\t\tbean.set${bean.field?cap_first}(buffer.readBoolean());\n\t\t<#elseif bean.type == 'double' || bean.type == \"Double\">\n\t\tbean.set${bean.field?cap_first}(buffer.readDouble());\n\t\t<#elseif bean.type == 'float' || bean.type == \"Float\">\n\t\tbean.set${bean.field?cap_first}(buffer.readFloat());\n\t\t<#elseif bean.type == 'long' || bean.type == \"Long\">\n\t\tbean.set${bean.field?cap_first}(buffer.readLong());\n\t\t<#elseif bean.type == 'short' || bean.type == \"Short\">\n\t\tbean.set${bean.field?cap_first}(buffer.readShort());\n\t\t<#elseif bean.type ? contains('List<Long>') || bean.type ? contains('Set<Long>')>\n\t\tbean.get${bean.field?cap_first}().addAll(buffer.readLongs());\n\t\t<#elseif bean.type ? contains('List<Integer>') || bean.type ? contains('Set<Integer>')>\n\t\tbean.get${bean.field?cap_first}().addAll(buffer.readInts());\n\t\t<#elseif bean.type ? contains('List<String>') || bean.type ? contains('Set<String>')>\n\t\tbean.get${bean.field?cap_first}().addAll(buffer.readStrings());\n\t\t<#elseif bean.type ? contains('List<') || bean.type ? contains('Set<')>\n\t\t<#-- 复杂类型的List, Set-->\n\t\tbean.get${bean.field?cap_first}().putAll(buffer.readDatas(${bean.genericType}.class));\n\t\t<#elseif bean.type ? contains('Map<Integer, Integer>')>\n\t\tbean.get${bean.field?cap_first}().putAll(buffer.readIIMap());\n\t\t<#elseif bean.type ? contains('Map<Integer, Long>')>\n\t\tbean.get${bean.field?cap_first}().putAll(buffer.readILMap());\n\t\t<#elseif bean.type ? contains('Map<Long, Integer>')>\n\t\tbean.get${bean.field?cap_first}().putAll(buffer.readLIMap());\n\t\t<#elseif bean.type ? contains('Map<Long, Long>')>\n\t\tbean.get${bean.field?cap_first}().putAll(buffer.readLLMap());\n\t\t<#elseif bean.type ? contains('Map<')>\n\t\t<#-- 复杂类型的Map-->\n\t\tCollection<${bean.genericType}> ${bean.genericType?uncap_first}s = buffer.readDatas(${bean.genericType}.class);\n\t\t${bean.genericType?uncap_first}s.forEach(m -> bean.get${bean.field?cap_first}().put(m.getIIIIIId(), m));\n\t\t<#else>\n\t\tbuffer.writeUnSupportObject(bean.get${bean.field?cap_first}());\n\t\t</#if>\n\t\t</#if>\n        </#list>\n        </#if>\n\t}\n    \n}\n",
	"id":1016,
	"name":"EntityBeanConverter",
	"type":1
}