{
	"content":"实体信息\n\nfreemaker规定, List,Map不能直接输出, 只能通过for循环取出数据显示\n\n#实体信息\nentity entity信息,可以直接渲染输出\nentity.tablName, String, 数据表名\nentity.entityName ,String, 对象名\nentity.primaryKeys, List<String>, 实体字段主键列表, 循环取出\nentity.entityBeans, List<TableBean>, 实体拥有的成员变量列表, 可指定下标查看指定字段信息, eg:${entity.entityBeans[0]}\n\nTableBean\nbean.field, String, 成员变量字段名\nbean.type, String, 成员变量类型\nbean.desc, String, 字段注释\nbean.primary, String, 是否主键\nbean.tbField, String, 表字段名字\n\n#模块信息\nmodule module信息, 可以直接渲染输出\nmodule.id, String, 模块Id\nmodule.name, String, 模块名\nmodule.comment, String, 模块注释\nmodule.one2one, String, true|false 是否一对一\nmodule.extendInfo, List<Integer>, 附加信息, 1:任务,2:资源, 3:个人模块(通常伴有事件机制,消息返回)\n\n#协议信息\nprotocolObj 此模块锁拥有的所有协议对象信息, 可以直接渲染输出, 包含了协议对象, 请求协议, 响应协议\nprotocolObj.moduleName, String, 模块名字\nprotocolObj.javaPath, String, 协议配置的java路径\nprotocolObj.outClass, String, 输出对象名字\nprotocolObj.dependenceObjs, Set<String>, 依赖对象路径列表\nprotocolObj.structures, Map<String, ProtocolStructure>, 协议对象对应的所有协议结构, 包含了协议对象, 请求协议, 响应协议\n\nprotoReqStructList, List<ProtocolStructure>, 请求协议列表\nprotoAckStructMap, Map<String, ProtocolStructure>, 响应协议列表\nprotoPBStructList, List<ProtocolStructure>, 协议对象列表\n\nstruct, ProtocolStructure, 享元协议对象, 生成协议时使用, 表示当前生成的协议信息.\n\nProtocolStructure, 协议结构\nname, String, 协议名\ncomment, String, 协议注释\nfields, List<ProtocolField>, 协议字段列表\n\nProtocolField, 字段结构\nidentifier, String, 标识符，repeated\ntype, String, proto 数据类型\nname, String, 字段名称\ncomment, String, 备注信息\nrepeated, String, true|false, 该参数是否为list\njavaType, String, proto对应的Java类型\nindex, String, 下标\n\n预计增加的api\nfileName, String, 文件名字\nclazzName, String, 类名, 通常类名跟文件名保持一致\n\n",
	"id":1,
	"name":"Api",
	"type":2
}